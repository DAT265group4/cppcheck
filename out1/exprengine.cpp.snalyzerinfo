CWE
DataBase
Value
Value
getRange
getSymbolicExpression
isEqual
isGreaterThan
isLessThan
isUninit
UninitValue
isEqual
isUninit
IntRange
getRange call:[str] noreturn:[str]
FloatRange
getRange call:[to_string] noreturn:[to_string]
ConditionalValue
StringLiteralValue
getRange
size call:[size] noreturn:[size]
StructValue
getRange call:[getSymbolicExpression] noreturn:[getSymbolicExpression]
getValueOfMember call:[end,find,return]
getUninitStructMember call:[isUninit,string] noreturn:[string]
AddressOfValue
getRange call:[to_string] noreturn:[to_string]
BinOpResult
getName call:[string]
IntegerTruncation
FunctionCallArgumentValues
BailoutValue
isEqual
isUninit
operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
FwdAnalysis
Result
Result
getFileName
Suppression
Suppression
Suppression
operator=
operator<
isLocal call:[empty,find_first_of]
isSameParameters
FileLocation
FileLocation
FileLocation
getinfo
setinfo
shortMessage
verboseMessage
symbolNames
ErrorLogger
ErrorLogger call:[close,is_open,plistFooter] noreturn:[close]
reportProgress
reportInfo call:[reportErr] noreturn:[reportErr]
plistFooter
min_value
max_value call:[return]
Platform
isIntValue call:[max_value,min_value] noreturn:[max_value]
isIntValue call:[max_value]
isLongValue call:[max_value,min_value] noreturn:[max_value]
isLongValue call:[max_value]
isLongLongValue call:[max_value]
isWindowsPlatform
platformString call:[platformString] noreturn:[platformString]
platformString
unsignedCharMax call:[max_value] noreturn:[max_value]
signedCharMax call:[max_value] noreturn:[max_value]
signedCharMin call:[min_value] noreturn:[min_value]
operator() call:[caseInsensitiveStringCompare]
FileSettings
cppcheckDefines
isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
Standards
setC
getC
setCPP
getCPP
Error
Error
Error
getAllocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
getDeallocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
allocId call:[getAllocDealloc]
deallocId call:[getAllocDealloc]
setalloc
setdealloc
setrealloc
setnoreturn
ismemory call:[return] noreturn:[return]
ismemory call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
Container
getAction call:[end,find]
getYield call:[end,find]
ArgumentChecks
IteratorInfo
MinSize
Function
isboolargbad call:[getarg]
isargformatstr call:[getarg]
isargstrz call:[getarg]
validarg global:[emptyString] call:[getarg]
isInt call:[isInt] noreturn:[isInt]
getArgIteratorInfo call:[getarg]
argminsizes call:[getarg]
markupExtensions
isexporter call:[end,find] noreturn:[end]
isexportedprefix call:[end,find,isPrefix,return] noreturn:[return]
isexportedsuffix call:[end,find,isSuffix,return] noreturn:[return]
isreflection call:[end,find] noreturn:[end]
reflectionArgument call:[end,find]
podtype call:[end,find,return]
PlatformType
operator== call:[return] noreturn:[return]
operator!=
platform_type call:[end,find,return]
platform_type call:[end,find,platform_type,return]
addPrefix call:[insert] noreturn:[insert]
addSuffix call:[insert] noreturn:[insert]
isPrefix call:[end,find,return] noreturn:[return]
isSuffix call:[end,find,return] noreturn:[return]
CodeBlock
setStart
setEnd
setOffset
addBlock call:[insert] noreturn:[insert]
start
end
offset
isBlock call:[end,find] noreturn:[end]
getAllocDealloc call:[end,find,return]
TimerResultsIntf
TimerResultsData
seconds
TimerResults
Rule
SafeChecks
clear
configurationExcluded call:[compare,length]
posix call:[begin,end,find] noreturn:[end]
terminate
terminated
operator()
operator()
operator()
operator() call:[abs]
operator()
Value
equalValue call:[sameToken]
visitValue call:[f]
operator() call:[compare] noreturn:[compare]
operator() call:[bind,move,ref,visitValue] noreturn:[visitValue]
compareValue call:[assert,bind,isSymbolicValue,move,ref,sameToken,visitValue]
operator== call:[equalValue]
operator!=
equalTo call:[bind,ref,visitValue]
decreaseRange call:[visitValue] noreturn:[visitValue]
invertBound
invertRange call:[decreaseRange,invertBound] noreturn:[decreaseRange]
isIntValue
isTokValue
isFloatValue
isMovedValue
isUninitValue
isContainerSizeValue
isLifetimeValue
isBufferSizeValue
isIteratorValue
isIteratorStartValue
isIteratorEndValue
isSymbolicValue
isLocalLifetimeValue
isArgumentLifetimeValue
isSubFunctionLifetimeValue
isNonValue call:[isLifetimeValue,isMovedValue,isUninitValue] noreturn:[isLifetimeValue]
setKnown
isKnown
setPossible
isPossible
isImpossible
setImpossible
setInconclusive
isInconclusive
changeKnownToPossible call:[isKnown]
errorSeverity
LifetimeToken
LifetimeToken
LifetimeToken
setAddressOf
setInconclusive
isClass call:[setFlag] noreturn:[setFlag]
isFunction call:[setFlag] noreturn:[setFlag]
isVariable call:[setFlag] noreturn:[setFlag]
isAlias call:[setFlag] noreturn:[setFlag]
isSpecialization call:[setFlag] noreturn:[setFlag]
isPartialSpecialization call:[setFlag] noreturn:[setFlag]
isForwardDeclaration call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
getFlag call:[return] noreturn:[return]
setFlag
operator==
token
token
scope
name
fullName
nameToken
paramEnd
paramEnd
isClass call:[getFlag] noreturn:[getFlag]
isFunction call:[getFlag] noreturn:[getFlag]
isVariable call:[getFlag] noreturn:[getFlag]
isAlias call:[getFlag] noreturn:[getFlag]
isSpecialization call:[getFlag] noreturn:[getFlag]
isPartialSpecialization call:[getFlag] noreturn:[getFlag]
isForwardDeclaration call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isSameFamily call:[return]
ScopeInfo2
TokenImpl
str call:[update_property_info] noreturn:[update_property_info]
str
tokAt call:[tokAt]
linkAt call:[linkAt]
simpleMatch call:[simpleMatch] noreturn:[simpleMatch]
valueType
argumentType call:[Match,astParent] noreturn:[astParent]
tokType
tokType call:[setFlag] noreturn:[setFlag]
isKeyword
isName call:[getFlag] noreturn:[getFlag]
isNameOnly
isLiteral call:[getFlag] noreturn:[getFlag]
isNumber
isEnumerator
isOp call:[isAssignmentOp,isConstOp,return] noreturn:[return]
isConstOp call:[isArithmeticalOp,return] noreturn:[return]
isExtendedOp call:[isConstOp]
isArithmeticalOp
isComparisonOp
isAssignmentOp
isBoolean
isIncDecOp
isBinaryOp call:[astOperand1,astOperand2]
isUnaryOp call:[astOperand1,astOperand2]
flags
flags
isUnsigned call:[getFlag] noreturn:[getFlag]
isUnsigned call:[setFlag] noreturn:[setFlag]
isSigned call:[getFlag] noreturn:[getFlag]
isSigned call:[setFlag] noreturn:[setFlag]
isPointerCompare call:[getFlag] noreturn:[getFlag]
isPointerCompare call:[setFlag] noreturn:[setFlag]
isLong call:[getFlag] noreturn:[getFlag]
isLong call:[setFlag] noreturn:[setFlag]
isStandardType call:[getFlag] noreturn:[getFlag]
isStandardType call:[setFlag] noreturn:[setFlag]
isExpandedMacro call:[getFlag] noreturn:[getFlag]
isExpandedMacro call:[setFlag] noreturn:[setFlag]
isCast call:[getFlag] noreturn:[getFlag]
isCast call:[setFlag] noreturn:[setFlag]
isAttributeConstructor call:[getFlag] noreturn:[getFlag]
isAttributeConstructor call:[setFlag] noreturn:[setFlag]
isAttributeDestructor call:[getFlag] noreturn:[getFlag]
isAttributeDestructor call:[setFlag] noreturn:[setFlag]
isAttributeUnused call:[getFlag] noreturn:[getFlag]
isAttributeUnused call:[setFlag] noreturn:[setFlag]
isAttributeUsed call:[getFlag] noreturn:[getFlag]
isAttributeUsed call:[setFlag] noreturn:[setFlag]
isAttributePure call:[getFlag] noreturn:[getFlag]
isAttributePure call:[setFlag] noreturn:[setFlag]
isAttributeConst call:[getFlag] noreturn:[getFlag]
isAttributeConst call:[setFlag] noreturn:[setFlag]
isAttributeNoreturn call:[getFlag] noreturn:[getFlag]
isAttributeNoreturn call:[setFlag] noreturn:[setFlag]
isAttributeNothrow call:[getFlag] noreturn:[getFlag]
isAttributeNothrow call:[setFlag] noreturn:[setFlag]
isAttributePacked call:[getFlag] noreturn:[getFlag]
isAttributePacked call:[setFlag] noreturn:[setFlag]
isAttributeNodiscard call:[getFlag] noreturn:[getFlag]
isAttributeNodiscard call:[setFlag] noreturn:[setFlag]
isAttributeMaybeUnused call:[getFlag] noreturn:[getFlag]
isAttributeMaybeUnused call:[setFlag] noreturn:[setFlag]
setCppcheckAttribute call:[setCppcheckAttribute] noreturn:[setCppcheckAttribute]
getCppcheckAttribute call:[getCppcheckAttribute] noreturn:[getCppcheckAttribute]
hasCppcheckAttributes
isControlFlowKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[setFlag] noreturn:[setFlag]
isComplex call:[getFlag] noreturn:[getFlag]
isComplex call:[setFlag] noreturn:[setFlag]
isEnumType call:[getFlag] noreturn:[getFlag]
isEnumType call:[setFlag] noreturn:[setFlag]
isAtAddress call:[getFlag] noreturn:[getFlag]
isAtAddress call:[setFlag] noreturn:[setFlag]
isIncompleteVar call:[getFlag] noreturn:[getFlag]
isIncompleteVar call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
isExternC call:[getFlag] noreturn:[getFlag]
isExternC call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclComma call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclComma call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclEq call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclEq call:[setFlag] noreturn:[setFlag]
isImplicitInt call:[getFlag] noreturn:[getFlag]
isImplicitInt call:[setFlag] noreturn:[setFlag]
isInline call:[getFlag] noreturn:[getFlag]
isInline call:[setFlag] noreturn:[setFlag]
isTemplate call:[getFlag] noreturn:[getFlag]
isTemplate call:[setFlag] noreturn:[setFlag]
isBitfield
bits
templateSimplifierPointers
templateSimplifierPointer call:[insert] noreturn:[insert]
setBits
isUtf8 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf16 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf32 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isCChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isCMultiChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isTemplateArg call:[getFlag] noreturn:[getFlag]
isTemplateArg call:[setFlag] noreturn:[setFlag]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findmatch call:[findmatch]
findmatch call:[findmatch]
fileIndex
fileIndex
linenr
linenr
column
column
next
previous
varId
varId call:[isStandardType,tokType,update_property_info] noreturn:[isStandardType,update_property_info]
exprId
exprId
forDebug
forDebugVarId call:[forDebug]
forDebugExprId call:[forDebug]
forPrintOut call:[forDebug]
link call:[update_property_info] noreturn:[update_property_info]
link
scope
scope
function
variable call:[tokType] noreturn:[tokType]
variable
type
enumerator
enumerator call:[tokType] noreturn:[tokType]
progressValue
originalName global:[emptyString]
values
originalName call:[string] noreturn:[string]
getKnownIntValue call:[front]
removeValues call:[remove_if] noreturn:[remove_if]
index
next
previous
getFlag call:[return] noreturn:[return]
setFlag
astOperand1
astOperand1
astOperand2
astOperand2
astParent
astParent
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astTop
astTop
clearAst
clearValueFlow
astString call:[astString] noreturn:[astString]
setCpp11init
isCpp11init
Dimension
BaseInfo
operator<
FriendInfo
Type call:[next,str,tokAt] noreturn:[next]
type global:[emptyString] call:[str]
isTypeAlias call:[str]
Enumerator
getFlag call:[return] noreturn:[return]
setFlag
Variable call:[evaluate] noreturn:[evaluate]
nameToken
typeStartToken
typeEndToken
name global:[emptyString] call:[str] noreturn:[str]
declarationId call:[varId] noreturn:[varId]
index
isPublic
isProtected
isPrivate
isGlobal
isNamespace
isArgument
isLocal call:[isExtern,return] noreturn:[isExtern]
isMutable call:[getFlag] noreturn:[getFlag]
isVolatile call:[getFlag] noreturn:[getFlag]
isStatic call:[getFlag] noreturn:[getFlag]
isExtern call:[getFlag] noreturn:[getFlag]
isConst call:[getFlag] noreturn:[getFlag]
isThrow
isClass call:[getFlag] noreturn:[getFlag]
isArray call:[getFlag] noreturn:[getFlag]
isPointer call:[getFlag] noreturn:[getFlag]
isPointerToArray call:[getFlag,isPointer] noreturn:[getFlag]
isArrayOrPointer call:[getFlag] noreturn:[getFlag]
isReference call:[getFlag] noreturn:[getFlag]
isRValueReference call:[getFlag] noreturn:[getFlag]
hasDefault call:[getFlag] noreturn:[getFlag]
isInit call:[getFlag] noreturn:[getFlag]
type
typeScope
scope
dimensions
dimension
dimensionKnown
isStlType call:[getFlag] noreturn:[getFlag]
isStlStringType call:[getFlag] noreturn:[getFlag]
isSmartPointer call:[getFlag] noreturn:[getFlag]
isStlType call:[isStlType,strAt] noreturn:[strAt]
isStlType call:[end,find,isStlType,strAt] noreturn:[end]
isFloatingType call:[getFlag] noreturn:[getFlag]
isEnumType call:[isEnumType,type] noreturn:[isEnumType]
isMaybeUnused call:[getFlag] noreturn:[getFlag]
valueType
accessControl
type
getFlag call:[return] noreturn:[return]
setFlag
name call:[str] noreturn:[str]
argCount call:[size] noreturn:[size]
minArgCount call:[size]
initializedArgCount
isLambda
isConstructor
isDestructor
isAttributeConstructor call:[isAttributeConstructor] noreturn:[isAttributeConstructor]
isAttributeDestructor call:[isAttributeDestructor] noreturn:[isAttributeDestructor]
isAttributePure call:[isAttributePure] noreturn:[isAttributePure]
isAttributeConst call:[isAttributeConst] noreturn:[isAttributeConst]
isAttributeNoreturn call:[isAttributeNoreturn] noreturn:[isAttributeNoreturn]
isAttributeNothrow call:[isAttributeNothrow] noreturn:[isAttributeNothrow]
isAttributeNodiscard call:[isAttributeNodiscard] noreturn:[isAttributeNodiscard]
hasBody call:[getFlag] noreturn:[getFlag]
isInline call:[getFlag] noreturn:[getFlag]
isConst call:[getFlag] noreturn:[getFlag]
hasVirtualSpecifier call:[getFlag] noreturn:[getFlag]
isPure call:[getFlag] noreturn:[getFlag]
isStatic call:[getFlag] noreturn:[getFlag]
isStaticLocal call:[getFlag] noreturn:[getFlag]
isExtern call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isExplicit call:[getFlag] noreturn:[getFlag]
isDefault call:[getFlag] noreturn:[getFlag]
isDelete call:[getFlag] noreturn:[getFlag]
isNoExcept call:[getFlag] noreturn:[getFlag]
isThrow call:[getFlag] noreturn:[getFlag]
hasOverrideSpecifier call:[getFlag] noreturn:[getFlag]
hasFinalSpecifier call:[getFlag] noreturn:[getFlag]
isOperator call:[getFlag] noreturn:[getFlag]
hasLvalRefQualifier call:[getFlag] noreturn:[getFlag]
hasRvalRefQualifier call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isVolatile call:[getFlag] noreturn:[getFlag]
hasTrailingReturnType call:[getFlag] noreturn:[getFlag]
hasBody call:[setFlag] noreturn:[setFlag]
isInlineKeyword call:[getFlag] noreturn:[getFlag]
isEscapeFunction call:[getFlag] noreturn:[getFlag]
isEscapeFunction call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
returnDefEnd call:[findmatch,hasTrailingReturnType] noreturn:[findmatch]
isInline call:[setFlag] noreturn:[setFlag]
isConst call:[setFlag] noreturn:[setFlag]
hasVirtualSpecifier call:[setFlag] noreturn:[setFlag]
isPure call:[setFlag] noreturn:[setFlag]
isStatic call:[setFlag] noreturn:[setFlag]
isStaticLocal call:[setFlag] noreturn:[setFlag]
isExtern call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
isExplicit call:[setFlag] noreturn:[setFlag]
isDefault call:[setFlag] noreturn:[setFlag]
isDelete call:[setFlag] noreturn:[setFlag]
isNoExcept call:[setFlag] noreturn:[setFlag]
isThrow call:[setFlag] noreturn:[setFlag]
isOperator call:[setFlag] noreturn:[setFlag]
hasLvalRefQualifier call:[setFlag] noreturn:[setFlag]
hasRvalRefQualifier call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isVolatile call:[setFlag] noreturn:[setFlag]
hasTrailingReturnType call:[setFlag] noreturn:[setFlag]
isInlineKeyword call:[setFlag] noreturn:[setFlag]
setBodyStartEnd call:[link,push_back] noreturn:[push_back]
isAnonymous call:[compare,isdigit,size] noreturn:[isdigit]
findEnumerator call:[str]
isNestedIn
nestedInFunction
isClassOrStruct call:[return] noreturn:[return]
isClassOrStructOrUnion call:[return] noreturn:[return]
isExecutable
isLoopScope
isLocal call:[return] noreturn:[return]
findRecordInNestedList call:[findRecordInNestedList]
findType call:[findType]
addFunction call:[back,insert,make_pair,push_back,str] noreturn:[insert]
ValueType
ValueType
ValueType
ValueType
isPrimitive call:[return] noreturn:[return]
isIntegral call:[return] noreturn:[return]
isFloat call:[return] noreturn:[return]
isEnum
findType call:[findType]
findScope call:[findScope]
isVarId call:[size] noreturn:[size]
getVariableFromVarId call:[at] noreturn:[at]
variableList
setSettings
getSettings
isC
isCPP
front
front
back
back
getFiles
find call:[find] noreturn:[find]
end call:[end] noreturn:[end]
map
getVarId
setTimerResults
isC call:[isC] noreturn:[isC]
isCPP call:[isCPP] noreturn:[isCPP]
setPreprocessor
getPreprocessor
codeWithTemplates
setSettings call:[setSettings] noreturn:[setSettings]
getSymbolDatabase
varIdCount
tokens call:[front] noreturn:[front]
isMaxTime
getSettings
newVarId
ExprEngineException
str call:[getRange,str] noreturn:[str]
extfind call:[size]
str call:[str] noreturn:[str]
TrackExecution
getNewDataIndex
symbolRange call:[end,find,getSymbolicExpression,index,insert,isdigit,push_back,str] noreturn:[push_back]
state call:[push_back] noreturn:[push_back]
print call:[column,insert,linenr] noreturn:[insert]
report call:[clear,empty,getStatus,linenr,next,str] noreturn:[clear,str]
setAbortLine
addError call:[insert] noreturn:[insert]
isAllOk call:[empty] noreturn:[empty]
addMissingContract call:[insert] noreturn:[insert]
getMissingContracts
ifSplit call:[push_back,to_string] noreturn:[push_back]
getStatus call:[end,find]
Data
Data call:[getNewSymbolName]
isC call:[isC] noreturn:[isC]
isCPP call:[isCPP] noreturn:[isCPP]
executeContract call:[astTop,createAst,createTokens,declarationId,end,executeExpression,find,front,fullName,getSymbolDatabase,istr,name,next,setValueTypeInTokenList,str,tokenList,varId,variable] noreturn:[executeExpression,varId]
contractConstraints call:[executeContract,push_back] noreturn:[push_back]
assignValue call:[symbolRange] noreturn:[symbolRange]
assignStructMember call:[symbolRange]
functionCall call:[begin,end,erase,getSymbolDatabase,getVariableFromVarId,isGlobal] noreturn:[erase]
getNewSymbolName call:[to_string] noreturn:[to_string]
getArrayValue call:[assignValue,end,find,varId,variable]
getValue call:[Match,addConstraints,assignValue,astOperand2,end,find,getKnownIntValue,getNewSymbolName,getSymbolDatabase,getValueRangeFromValueType,getVariableFromVarId,hasKnownIntValue,nameToken,next,to_string,variable] noreturn:[addConstraints,assignValue]
trackCheckContract call:[getline,istr,state,str] noreturn:[state]
trackProgramState call:[empty,getSymbolDatabase,getSymbolicExpression,getVariableFromVarId,name,state,str] noreturn:[getSymbolicExpression,state]
addMissingContract call:[addMissingContract] noreturn:[addMissingContract]
notValue call:[empty]
addConstraint call:[notValue,push_back] noreturn:[push_back]
addConstraint call:[push_back] noreturn:[push_back]
addConstraints call:[addConstraint,getCppcheckAttribute,to_string] noreturn:[addConstraint]
reportError call:[addError,empty,errmsg,linenr,push_back,reportErr] noreturn:[addError,reportErr]
str call:[getSymbolDatabase,getSymbolicExpression,getSymbols,getVariableFromVarId,isLocal,str] noreturn:[getSymbols,str]
load call:[clear,empty,end,erase,find,getSymbols,isdigit,parsestr,stoi] noreturn:[clear,erase,getSymbols]
ifSplit call:[ifSplit] noreturn:[ifSplit]
parsestr call:[ExprEngineException,empty,extfind,find,find_first_not_of,getline,istr,push_back,size,stoi,substr] noreturn:[ExprEngineException,push_back]
getSymbols call:[getSymbols] noreturn:[getSymbols]
simplifyValue call:[str]
translateUninitValueToRange call:[getNewSymbolName,getValueRangeFromValueType,size]
truncateInt
ArrayValue call:[assign,push_back] noreturn:[assign]
ArrayValue call:[assign,astParent,dimensions,getNewSymbolName,getValueRangeFromValueType,isArgument,isConst,isGlobal,isStatic,nameToken,push_back,str,to_string,valueType,vt] noreturn:[assign,astParent,getValueRangeFromValueType,push_back]
ArrayValue
getRange call:[empty,getSymbolicExpression,string]
assign call:[begin,clear,erase,push_back,size] noreturn:[clear,push_back]
clear call:[clear,push_back] noreturn:[push_back]
isEqual
isNonOverlapping
read call:[clear,isEqual,isNonOverlapping,push_back,size,to_string] noreturn:[clear,push_back]
getSymbolicExpression call:[getSymbolicExpression,str,string] noreturn:[str]
getSymbolicExpression call:[empty,getSymbolicExpression,str,string] noreturn:[str]
getSymbolicExpression call:[getSymbolicExpression,str,string] noreturn:[str]
getSymbolicExpression call:[getSymbolicExpression,to_string]
isEqual call:[empty]
isGreaterThan call:[empty]
isLessThan call:[empty]
isEqual call:[empty,isFloat,toDoubleNumber]
isGreaterThan call:[empty,isFloat,toDoubleNumber] noreturn:[toDoubleNumber]
isLessThan call:[empty,isFloat,toDoubleNumber] noreturn:[toDoubleNumber]
isEqual
isGreaterThan
isLessThan
isTrue
getExpr
getIntBitsFromValueType
getValueRangeFromValueType call:[getIntBitsFromValueType,infinity,isFloat,isIntegral]
getValueRangeFromValueType call:[getNewSymbolName,getValueRangeFromValueType,parseDecl] noreturn:[getValueRangeFromValueType]
call call:[ExprEngineException,f,void] noreturn:[ExprEngineException,f]
calculateArrayIndex call:[astOperand1,astOperand2,executeExpression,simpleMatch,simplifyValue,size] noreturn:[astOperand1,simplifyValue]
executeReturn call:[astOperand1,call,executeExpression]
truncateValue call:[getIntBitsFromValueType,getNewSymbolName,getValueRangeFromValueType,isIntegral,str,truncateInt]
assignExprValue call:[Match,assign,assignStructMember,assignValue,astOperand1,astOperand2,calculateArrayIndex,call,executeExpression,getArrayValue,isUnaryOp,nameToken,next,scope,simpleMatch,str,varId,variable] noreturn:[assign,assignStructMember,assignValue,astOperand1,call]
executeAssign call:[assignExprValue,astOperand1,astOperand2,binop,call,executeExpression,getValueRangeFromValueType,simplifyValue,size,str,substr,truncateValue,valueType] noreturn:[call,simplifyValue,truncateValue]
executeIncDec call:[assignExprValue,astOperand1,call,executeExpression,precedes,simplifyValue,str,substr]
executeFunctionCall call:[addMissingContract,assign,assignExprValue,assignValue,astOperand1,call,contractConstraints,declarationId,empty,end,execute,executeExpression,executeExpression1,find,fullName,function,functionCall,getAllocFuncInfo,getArguments,getKnownIntValue,getNewSymbolName,getValue,getValueRangeFromValueType,hasBody,hasKnownIntValue,isExecutable,isIntegral,isReference,load,name,pop_back,previous,push_back,scope,simpleMatch,size,to_string,translateUninitValueToRange,valueType,vt] noreturn:[addMissingContract,assign,assignExprValue,assignValue,declarationId,pop_back,translateUninitValueToRange]
executeArrayIndex call:[ExprEngineException,astOperand1,astOperand2,calculateArrayIndex,call,executeExpression,getArrayValue,getNewSymbolName,read,simpleMatch,size,tokType] noreturn:[ExprEngineException,astOperand1,call]
executeCast call:[astOperand1,astOperand2,call,executeExpression,getNewSymbolName,getValueRangeFromValueType,valueType]
executeDot call:[astOperand1,astOperand2,call,empty,executeExpression,getValue,getValueOfMember,getValueRangeFromValueType,originalName,read,str,valueType,varId] noreturn:[call]
streamReadSetValue call:[assignExprValue,getValueRangeFromValueType,valueType] noreturn:[assignExprValue]
executeStreamRead call:[astOperand1,astOperand2,simpleMatch,streamReadSetValue] noreturn:[astOperand2]
executeBinaryOp call:[addConstraint,astOperand1,astOperand2,call,data2,executeExpression,falseData,getKnownIntValue,hasKnownIntValue,simplifyValue,str,trueData] noreturn:[executeExpression]
executeAddressOf call:[astOperand1,call,getNewSymbolName,varId]
executeDeref call:[assignValue,astOperand1,call,executeExpression,getNewSymbolName,getValue,getValueRangeFromValueType,read,size,valueType,varId] noreturn:[assignValue,call]
executeNot call:[astOperand1,call,executeExpression,simplifyValue]
executeVariable call:[call,getValue,valueType,varId]
executeKnownMacro call:[call,getKnownIntValue,getNewSymbolName]
executeNumber call:[call,isFloat,str,toDoubleNumber,toLongNumber,valueType]
executeStringLiteral call:[getNewSymbolName,size,str,substr]
executeExpression1 call:[Match,TerminateExpression,astOperand1,astOperand2,astParent,executeAddressOf,executeArrayIndex,executeAssign,executeBinaryOp,executeCast,executeDeref,executeDot,executeFunctionCall,executeIncDec,executeKnownMacro,executeNot,executeNumber,executeReturn,executeStreamRead,executeStringLiteral,executeVariable,getKnownIntValue,hasKnownIntValue,isAssignmentOp,isBinaryOp,isCPP,isCast,isName,isNumber,isUnaryOp,str,terminated,to_string,tokType,varId] noreturn:[TerminateExpression,executeAddressOf,executeArrayIndex,executeAssign,executeBinaryOp,executeCast,executeDeref,executeDot,executeFunctionCall,executeIncDec,executeKnownMacro,executeNot,executeNumber,executeReturn,executeStreamRead,executeStringLiteral,executeVariable]
executeExpression call:[executeExpression1,translateUninitValueToRange,valueType] noreturn:[translateUninitValueToRange]
checkConditionBranches call:[BinOpResult,isEqual,isTrue,make_tuple] noreturn:[isTrue,make_tuple]
execute call:[ExprEngineException,Match,Recursion,addConstraint,assign,assignStructMember,assignValue,astOperand1,astOperand2,astParent,bodyData,call,caseData,checkConditionBranches,createVariableValue,defaultData,elseData,empty,end,exec,execute,executeExpression,extractForLoopValues,find,getKnownIntValue,getNewSymbolName,getValue,getValueRangeFromValueType,hasKnownIntValue,ifSplit,insert,isArray,isUnaryOp,isUninit,link,linkAt,name,nameToken,next,noexecData,precedes,previous,read,return,scope,simpleMatch,str,string,thenData,tie,time,toString,tokAt,trackProgramState,updateRecursion,valueType,var,varId,variable,visitAstNodes] noreturn:[ExprEngineException,addConstraint,assignValue,astOperand1,call,checkConditionBranches,createVariableValue,exec,execute,link,linkAt,previous,str]
Recursion
Recursion
executeAllFunctions call:[executeFunction,getSymbolDatabase,linenr,name,what] noreturn:[executeFunction]
createStructVal call:[assignStructMember,createVariableValue,get,getNewSymbolName,isInit,isIntegral,isPointer,name,valueType] noreturn:[assignStructMember]
createVariableValue call:[addConstraints,createStructVal,getNewSymbolName,getValueRangeFromValueType,isArgument,isArray,isConst,isFloat,isIntegral,isLocal,isPointer,isStatic,nameToken,valueType,vt] noreturn:[createStructVal,getValueRangeFromValueType,valueType]
executeFunction call:[Match,assignValue,call,column,contractConstraints,createVariableValue,data,declarationId,empty,execute,fileIndex,fullName,getMissingContracts,getSymbolDatabase,hasCppcheckAttributes,insert,isAllOk,isExecutable,isIntegral,linenr,name,nameToken,next,print,report,setAbortLine,time,valueType] noreturn:[assignValue,call,execute,insert,report]
runChecks call:[addBughuntingChecks,bughuntingReport,empty,executeAllFunctions,str,void] noreturn:[bughuntingReport,str]
dumpRecursive call:[dumpRecursive] noreturn:[dumpRecursive]
dump call:[dumpRecursive]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
