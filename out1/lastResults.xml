<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.6"/>
    <errors>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/analyzerinfo.cpp" sinceDate="12/3/2021">
            <location file="lib\utils.h" line="102"/>
        </error>
        <error id="syntaxError" severity="error" msg="Code &amp;#039;template&amp;lt;...&amp;#039; is invalid C code. Use --std or --language to configure the language." verbose="Code &amp;#039;template&amp;lt;...&amp;#039; is invalid C code. Use --std or --language to configure the language." file0="test/bug-hunting/cve/CVE-2019-1010315/dsdiff.c" sinceDate="12/3/2021">
            <location file="lib\utils.h" line="33"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;addResults&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;addResults&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/astutils.cpp" sinceDate="12/3/2021">
            <location file="lib\timer.h" line="62" info="Function in derived class"/>
            <location file="lib\timer.h" line="40" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/astutils.cpp" sinceDate="12/3/2021">
            <location file="lib\symboldatabase.h" line="1068"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEqual&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEqual&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="130" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="104" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isUninit&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isUninit&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="135" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="119" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="147" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="98" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEqual&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEqual&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="152" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="104" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isGreaterThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isGreaterThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="153" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="109" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isLessThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isLessThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="154" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="168" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="98" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEqual&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEqual&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="172" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="104" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isGreaterThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isGreaterThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="173" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="109" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isLessThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isLessThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="174" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getSymbolicExpression&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getSymbolicExpression&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="186" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="101" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="200" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="98" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getSymbolicExpression&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getSymbolicExpression&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="201" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="101" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="223" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="98" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getSymbolicExpression&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getSymbolicExpression&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="237" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="101" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="239" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="98" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getRange&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="266" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="98" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEqual&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEqual&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="281" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="104" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isGreaterThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isGreaterThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="282" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="109" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isLessThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isLessThan&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="283" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getSymbolicExpression&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getSymbolicExpression&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="307" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="101" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEqual&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEqual&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="327" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="104" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isUninit&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isUninit&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.h" line="330" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="119" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\bughuntingchecks.cpp" line="34"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\bughuntingchecks.cpp" line="408"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/bughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="lib\bughuntingchecks.cpp" line="630"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;_instances&amp;#039; can be declared with const" verbose="Variable &amp;#039;_instances&amp;#039; can be declared with const" cwe="398" file0="lib/check.cpp" sinceDate="12/3/2021">
            <location file="lib\check.cpp" line="80"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/check64bit.cpp" sinceDate="12/3/2021">
            <location file="lib\check64bit.h" line="53" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/check64bit.cpp" sinceDate="12/3/2021">
            <location file="lib\check64bit.h" line="68" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/check64bit.cpp" sinceDate="12/3/2021">
            <location file="lib\check64bit.h" line="80" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkassert.cpp" sinceDate="12/3/2021">
            <location file="lib\checkassert.h" line="51" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkassert.cpp" sinceDate="12/3/2021">
            <location file="lib\checkassert.h" line="66" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkassert.cpp" sinceDate="12/3/2021">
            <location file="lib\checkassert.h" line="76" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkautovariables.cpp" sinceDate="12/3/2021">
            <location file="lib\checkautovariables.h" line="52" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkautovariables.cpp" sinceDate="12/3/2021">
            <location file="lib\checkautovariables.h" line="92" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkautovariables.cpp" sinceDate="12/3/2021">
            <location file="lib\checkautovariables.h" line="116" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkautovariables.cpp" sinceDate="12/3/2021">
            <location file="lib\checkautovariables.cpp" line="413"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbool.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbool.h" line="51" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbool.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbool.h" line="112" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbool.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbool.h" line="132" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkboost.cpp" sinceDate="12/3/2021">
            <location file="lib\checkboost.h" line="50" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkboost.cpp" sinceDate="12/3/2021">
            <location file="lib\checkboost.h" line="64" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkboost.cpp" sinceDate="12/3/2021">
            <location file="lib\checkboost.h" line="73" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;toString&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;toString&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\ctu.h" line="43" info="Function in derived class"/>
            <location file="lib\check.h" line="101" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbufferoverrun.h" line="69" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbufferoverrun.h" line="80" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbufferoverrun.h" line="92" info="Function in derived class"/>
            <location file="lib\check.h" line="106" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbufferoverrun.h" line="95" info="Function in derived class"/>
            <location file="lib\check.h" line="118" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;loadFileInfoFromXml&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;loadFileInfoFromXml&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbufferoverrun.h" line="146" info="Function in derived class"/>
            <location file="lib\check.h" line="112" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbufferoverrun.h" line="154" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;toString&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;toString&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbufferoverrun.h" line="139" info="Function in derived class"/>
            <location file="lib\check.h" line="101" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop." verbose="Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbufferoverrun.cpp" line="930"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop." verbose="Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbufferoverrun.cpp" line="932"/>
        </error>
        <error id="unsignedLessThanZero" severity="style" msg="Checking if unsigned expression &amp;#039;formatStringArgNr&amp;#039; is less than zero." verbose="The unsigned expression &amp;#039;formatStringArgNr&amp;#039; will never be negative so it is either pointless or an error to check if it is." cwe="570" file0="lib/checkbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="lib\checkbufferoverrun.cpp" line="74"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.h" line="53" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.h" line="174" info="Function in derived class"/>
            <location file="lib\check.h" line="106" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;loadFileInfoFromXml&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;loadFileInfoFromXml&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.h" line="176" info="Function in derived class"/>
            <location file="lib\check.h" line="112" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.h" line="179" info="Function in derived class"/>
            <location file="lib\check.h" line="118" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.h" line="220" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.h" line="264" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;toString&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;toString&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.h" line="170" info="Function in derived class"/>
            <location file="lib\check.h" line="101" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="85"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="134"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="146"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="161"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="293"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="571"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::copy algorithm instead of a raw loop." verbose="Consider using std::copy algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="590"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="639"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="741"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="1748"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="2021"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="2519"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398" file0="lib/checkclass.cpp" sinceDate="12/3/2021">
            <location file="lib\checkclass.cpp" line="2552"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkcondition.cpp" sinceDate="12/3/2021">
            <location file="lib\checkcondition.h" line="56" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkcondition.cpp" sinceDate="12/3/2021">
            <location file="lib\checkcondition.h" line="172" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkcondition.cpp" sinceDate="12/3/2021">
            <location file="lib\checkcondition.h" line="202" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkcondition.cpp" sinceDate="12/3/2021">
            <location file="lib\checkother.h" line="60" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkcondition.cpp" sinceDate="12/3/2021">
            <location file="lib\checkother.h" line="292" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkcondition.cpp" sinceDate="12/3/2021">
            <location file="lib\checkother.h" line="373" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkcondition.cpp" sinceDate="12/3/2021">
            <location file="lib\checkcondition.cpp" line="751"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkexceptionsafety.cpp" sinceDate="12/3/2021">
            <location file="lib\checkexceptionsafety.h" line="63" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkexceptionsafety.cpp" sinceDate="12/3/2021">
            <location file="lib\checkexceptionsafety.h" line="111" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkexceptionsafety.cpp" sinceDate="12/3/2021">
            <location file="lib\checkexceptionsafety.h" line="128" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkfunctions.cpp" sinceDate="12/3/2021">
            <location file="lib\checkfunctions.h" line="61" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkfunctions.cpp" sinceDate="12/3/2021">
            <location file="lib\checkfunctions.h" line="126" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkfunctions.cpp" sinceDate="12/3/2021">
            <location file="lib\checkfunctions.h" line="150" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkinternal.cpp" sinceDate="12/3/2021">
            <location file="lib\checkinternal.h" line="45" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkinternal.cpp" sinceDate="12/3/2021">
            <location file="lib\checkinternal.h" line="95" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkinternal.cpp" sinceDate="12/3/2021">
            <location file="lib\checkinternal.h" line="112" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkio.cpp" sinceDate="12/3/2021">
            <location file="lib\checkio.h" line="53" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkio.cpp" sinceDate="12/3/2021">
            <location file="lib\checkio.h" line="137" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkio.cpp" sinceDate="12/3/2021">
            <location file="lib\checkio.h" line="169" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkleakautovar.h" line="117" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkleakautovar.h" line="164" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkleakautovar.h" line="175" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="180" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="195" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="221" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="239" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="258" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="268" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="284" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="298" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="304" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="320" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="351" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.h" line="363" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checknullpointer.h" line="56" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checknullpointer.h" line="110" info="Function in derived class"/>
            <location file="lib\check.h" line="106" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;loadFileInfoFromXml&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;loadFileInfoFromXml&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checknullpointer.h" line="112" info="Function in derived class"/>
            <location file="lib\check.h" line="112" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checknullpointer.h" line="115" info="Function in derived class"/>
            <location file="lib\check.h" line="118" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checknullpointer.h" line="119" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checknullpointer.h" line="132" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;toString&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;toString&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checknullpointer.h" line="106" info="Function in derived class"/>
            <location file="lib\check.h" line="101" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkleakautovar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkleakautovar.cpp" line="82"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuninitvar.h" line="65" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuninitvar.h" line="103" info="Function in derived class"/>
            <location file="lib\check.h" line="106" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;loadFileInfoFromXml&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;loadFileInfoFromXml&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuninitvar.h" line="105" info="Function in derived class"/>
            <location file="lib\check.h" line="112" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuninitvar.h" line="108" info="Function in derived class"/>
            <location file="lib\check.h" line="118" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuninitvar.h" line="130" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuninitvar.h" line="146" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;toString&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;toString&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuninitvar.h" line="99" info="Function in derived class"/>
            <location file="lib\check.h" line="101" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkother.cpp" line="487"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkother.cpp" line="1168"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkother.cpp" line="3216"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/checkother.cpp" sinceDate="12/3/2021">
            <location file="lib\checkother.cpp" line="3242"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkpostfixoperator.cpp" sinceDate="12/3/2021">
            <location file="lib\checkpostfixoperator.h" line="51" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkpostfixoperator.cpp" sinceDate="12/3/2021">
            <location file="lib\checkpostfixoperator.h" line="66" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkpostfixoperator.cpp" sinceDate="12/3/2021">
            <location file="lib\checkpostfixoperator.h" line="75" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checksizeof.cpp" sinceDate="12/3/2021">
            <location file="lib\checksizeof.h" line="51" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checksizeof.cpp" sinceDate="12/3/2021">
            <location file="lib\checksizeof.h" line="104" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checksizeof.cpp" sinceDate="12/3/2021">
            <location file="lib\checksizeof.h" line="125" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkstl.cpp" sinceDate="12/3/2021">
            <location file="lib\checkstl.h" line="56" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkstl.cpp" sinceDate="12/3/2021">
            <location file="lib\checkstl.h" line="241" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkstl.cpp" sinceDate="12/3/2021">
            <location file="lib\checkstl.h" line="286" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkstring.cpp" sinceDate="12/3/2021">
            <location file="lib\checkstring.h" line="51" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkstring.cpp" sinceDate="12/3/2021">
            <location file="lib\checkstring.h" line="97" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkstring.cpp" sinceDate="12/3/2021">
            <location file="lib\checkstring.h" line="117" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checktype.cpp" sinceDate="12/3/2021">
            <location file="lib\checktype.h" line="50" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checktype.cpp" sinceDate="12/3/2021">
            <location file="lib\checktype.h" line="87" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checktype.cpp" sinceDate="12/3/2021">
            <location file="lib\checktype.h" line="105" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;UncommentedMethod::usedSameFile&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;UncommentedMethod::usedSameFile&amp;#039; is not initialized in the constructor." cwe="398" file0="lib/checkuncommentedmethod.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuncommentedmethod.h" line="102"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;UncommentedMethod::usedOtherFile&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;UncommentedMethod::usedOtherFile&amp;#039; is not initialized in the constructor." cwe="398" file0="lib/checkuncommentedmethod.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuncommentedmethod.h" line="102"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkuncommentedmethod.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuncommentedmethod.h" line="65" info="Function in derived class"/>
            <location file="lib\check.h" line="106" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkuncommentedmethod.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuncommentedmethod.h" line="68" info="Function in derived class"/>
            <location file="lib\check.h" line="118" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkuncommentedmethod.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuncommentedmethod.h" line="79" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkuncommentedmethod.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuncommentedmethod.h" line="83" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkuncommentedmethod.cpp" sinceDate="12/3/2021">
            <location file="lib\checkuncommentedmethod.h" line="96" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getFileInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkunusedfunctions.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedfunctions.h" line="65" info="Function in derived class"/>
            <location file="lib\check.h" line="106" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;analyseWholeProgram&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkunusedfunctions.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedfunctions.h" line="68" info="Function in derived class"/>
            <location file="lib\check.h" line="118" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkunusedfunctions.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedfunctions.h" line="79" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkunusedfunctions.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedfunctions.h" line="83" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkunusedfunctions.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedfunctions.h" line="96" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkunusedvar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedvar.h" line="56" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkunusedvar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedvar.h" line="85" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkunusedvar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedvar.h" line="100" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkunusedvar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedvar.cpp" line="775"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkunusedvar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedvar.cpp" line="1383"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkunusedvar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedvar.cpp" line="1405"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkunusedvar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedvar.cpp" line="1417"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/checkunusedvar.cpp" sinceDate="12/3/2021">
            <location file="lib\checkunusedvar.cpp" line="1537"/>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &amp;#039;Variables&amp;#039;" verbose="The one definition rule is violated, different classes/structs have the same name &amp;#039;Variables&amp;#039;" cwe="758" sinceDate="12/3/2021">
            <location file="lib\checkunusedvar.cpp" line="100" info=""/>
            <location file="gui\test\data\benchmark\simple.cpp" line="1036" info=""/>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &amp;#039;Variables::VariableUsage&amp;#039;" verbose="The one definition rule is violated, different classes/structs have the same name &amp;#039;Variables::VariableUsage&amp;#039;" cwe="758" sinceDate="12/3/2021">
            <location file="lib\checkunusedvar.cpp" line="105" info=""/>
            <location file="gui\test\data\benchmark\simple.cpp" line="1041" info=""/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;runChecks&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkvaarg.cpp" sinceDate="12/3/2021">
            <location file="lib\checkvaarg.h" line="49" info="Function in derived class"/>
            <location file="lib\check.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getErrorMessages&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkvaarg.cpp" sinceDate="12/3/2021">
            <location file="lib\checkvaarg.h" line="65" info="Function in derived class"/>
            <location file="lib\check.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;classInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/checkvaarg.cpp" sinceDate="12/3/2021">
            <location file="lib\checkvaarg.h" line="78" info="Function in derived class"/>
            <location file="lib\check.h" line="87" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::copy_if algorithm instead of a raw loop." verbose="Consider using std::copy_if algorithm instead of a raw loop." cwe="398" file0="lib/clangimport.cpp" sinceDate="12/3/2021">
            <location file="lib\clangimport.cpp" line="1440"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/clangimport.cpp" sinceDate="12/3/2021">
            <location file="lib\clangimport.cpp" line="1518"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportErr&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportErr&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.h" line="198" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="264" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportOut&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportOut&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.h" line="205" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="256" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;bughuntingReport&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;bughuntingReport&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.h" line="207" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="286" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportProgress&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportProgress&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.h" line="212" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="272" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.h" line="217" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="282" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="111"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="339"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="442"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="588"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="728"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="909"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="1584"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop." verbose="Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="1673"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="91"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="92"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="93"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="94"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/cppcheck.cpp" sinceDate="12/3/2021">
            <location file="lib\cppcheck.cpp" line="1039"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isC&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isC&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/exprengine.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.cpp" line="408" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="81" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isCPP&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isCPP&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/exprengine.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.cpp" line="411" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getNewSymbolName&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getNewSymbolName&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/exprengine.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.cpp" line="479" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="78" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportError&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportError&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/exprengine.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.cpp" line="629" info="Function in derived class"/>
            <location file="lib\exprengine.h" line="83" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/exprengine.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.cpp" line="2039"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop." verbose="Consider using std::any_of, std::all_of, std::none_of, or std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/exprengine.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.cpp" line="2081"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/exprengine.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.cpp" line="2727"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;argValue&amp;#039; is always true" verbose="Condition &amp;#039;argValue&amp;#039; is always true" cwe="571" file0="lib/exprengine.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.cpp" line="1967" info="Condition &amp;#039;argValue&amp;#039; is always true"/>
            <location file="lib\exprengine.cpp" line="1962" info="Assuming that condition &amp;#039;!argValue&amp;#039; is not redundant"/>
        </error>
        <error id="shiftTooManyBits" severity="error" msg="Shifting 64-bit value by 64 bits is undefined behaviour" verbose="Shifting 64-bit value by 64 bits is undefined behaviour" cwe="758" file0="lib/exprengine.cpp" sinceDate="12/3/2021">
            <location file="lib\exprengine.cpp" line="245"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;Action&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;Action&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="lib/forwardanalyzer.cpp" sinceDate="12/3/2021">
            <location file="lib\analyzer.h" line="40"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ValuePtr &amp;lt; Analyzer &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ValuePtr &amp;lt; Analyzer &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="lib/forwardanalyzer.cpp" sinceDate="12/3/2021">
            <location file="lib\valueptr.h" line="46"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ValuePtr &amp;lt; InferModel &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ValuePtr &amp;lt; InferModel &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="lib/forwardanalyzer.cpp" sinceDate="12/3/2021">
            <location file="lib\valueptr.h" line="46"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ValuePtr &amp;lt; ConditionHandler &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ValuePtr &amp;lt; ConditionHandler &amp;gt;&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueptr.h" line="46"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/importproject.cpp" sinceDate="12/3/2021">
            <location file="lib\importproject.cpp" line="730"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398" file0="lib/importproject.cpp" sinceDate="12/3/2021">
            <location file="lib\importproject.cpp" line="1259"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignoreOtherPlatforms&amp;#039; is never used." verbose="The function &amp;#039;ignoreOtherPlatforms&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\importproject.cpp" line="79"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="lib\library.cpp" line="99"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getContainerFromAction&amp;#039; is never used." verbose="The function &amp;#039;getContainerFromAction&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\library.cpp" line="1571"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/mathlib.cpp" sinceDate="12/3/2021">
            <location file="lib\mathlib.cpp" line="355"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="lib\platform.cpp" line="171"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::copy_if algorithm instead of a raw loop." verbose="Consider using std::copy_if algorithm instead of a raw loop." cwe="398" file0="lib/preprocessor.cpp" sinceDate="12/3/2021">
            <location file="lib\preprocessor.cpp" line="111"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/preprocessor.cpp" sinceDate="12/3/2021">
            <location file="lib\preprocessor.cpp" line="1046"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;preprocessWhitespaces&amp;#039; is never used." verbose="The function &amp;#039;preprocessWhitespaces&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\preprocessor.cpp" line="583"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="lib\settings.cpp" line="83"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="lib\settings.cpp" line="84"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/symboldatabase.cpp" sinceDate="12/3/2021">
            <location file="lib\symboldatabase.cpp" line="2350"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/symboldatabase.cpp" sinceDate="12/3/2021">
            <location file="lib\symboldatabase.cpp" line="5319"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/symboldatabase.cpp" sinceDate="12/3/2021">
            <location file="lib\symboldatabase.cpp" line="5330"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/symboldatabase.cpp" sinceDate="12/3/2021">
            <location file="lib\symboldatabase.cpp" line="5341"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/symboldatabase.cpp" sinceDate="12/3/2021">
            <location file="lib\symboldatabase.cpp" line="5389"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/symboldatabase.cpp" sinceDate="12/3/2021">
            <location file="lib\symboldatabase.cpp" line="5406"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;findInNestedList&amp;#039; is never used." verbose="The function &amp;#039;findInNestedList&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\symboldatabase.cpp" line="5327"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;validateVariables&amp;#039; is never used." verbose="The function &amp;#039;validateVariables&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\symboldatabase.cpp" line="1822"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/templatesimplifier.cpp" sinceDate="12/3/2021">
            <location file="lib\templatesimplifier.cpp" line="725"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/templatesimplifier.cpp" sinceDate="12/3/2021">
            <location file="lib\templatesimplifier.cpp" line="1768"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/templatesimplifier.cpp" sinceDate="12/3/2021">
            <location file="lib\templatesimplifier.cpp" line="3383"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/templatesimplifier.cpp" sinceDate="12/3/2021">
            <location file="lib\templatesimplifier.cpp" line="3392"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/templatesimplifier.cpp" sinceDate="12/3/2021">
            <location file="lib\templatesimplifier.cpp" line="3409"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/templatesimplifier.cpp" sinceDate="12/3/2021">
            <location file="lib\templatesimplifier.cpp" line="3418"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/token.cpp" sinceDate="12/3/2021">
            <location file="lib\token.cpp" line="1215"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/token.cpp" sinceDate="12/3/2021">
            <location file="lib\token.cpp" line="1687"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getValueTokenDeadPointer&amp;#039; is never used." verbose="The function &amp;#039;getValueTokenDeadPointer&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\token.cpp" line="1924"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;printLines&amp;#039; is never used." verbose="The function &amp;#039;printLines&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\token.cpp" line="1187"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/tokenize.cpp" sinceDate="12/3/2021">
            <location file="lib\tokenize.cpp" line="1795"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="lib/tokenize.cpp" sinceDate="12/3/2021">
            <location file="lib\tokenize.cpp" line="1819"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/tokenize.cpp" sinceDate="12/3/2021">
            <location file="lib\tokenize.cpp" line="2097"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398" file0="lib/tokenize.cpp" sinceDate="12/3/2021">
            <location file="lib\tokenize.cpp" line="4286"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/tokenize.cpp" sinceDate="12/3/2021">
            <location file="lib\tokenize.cpp" line="8019"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/tokenize.cpp" sinceDate="12/3/2021">
            <location file="lib\tokenize.cpp" line="12805"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MAXTIME&amp;#039; since the value of &amp;#039;MAXTIME&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MAXTIME&amp;#039; since the value of &amp;#039;MAXTIME&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="lib\tokenize.cpp" line="159"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MAXTIME&amp;#039; since the value of &amp;#039;MAXTIME&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MAXTIME&amp;#039; since the value of &amp;#039;MAXTIME&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="lib\tokenize.cpp" line="175"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::transform algorithm instead of a raw loop." verbose="Consider using std::transform algorithm instead of a raw loop." cwe="398" file0="lib/tokenlist.cpp" sinceDate="12/3/2021">
            <location file="lib\tokenlist.cpp" line="433"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/tokenlist.cpp" sinceDate="12/3/2021">
            <location file="lib\tokenlist.cpp" line="448"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="lib/tokenlist.cpp" sinceDate="12/3/2021">
            <location file="lib\tokenlist.cpp" line="451"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;analyze&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;analyze&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2330" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="160" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;evaluate&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;evaluate&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2358" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="164" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;assume&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;assume&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2395" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="182" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;update&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;update&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2437" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="162" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reanalyze&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reanalyze&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2463" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="184" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getValue&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getValue&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2487" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1928" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getValue&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getValue&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2490" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1929" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;makeConditional&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;makeConditional&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2494" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1931" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;useSymbolicValues&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;useSymbolicValues&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2498" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2211" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;addErrorPath&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;addErrorPath&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2507" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1933" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isAlias&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isAlias&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2511" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1941" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isGlobal&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isGlobal&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2529" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1957" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lowerToPossible&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lowerToPossible&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2538" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="170" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lowerToInconclusive&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lowerToInconclusive&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2544" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="172" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isConditional&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isConditional&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2551" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="178" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;stopOnCondition&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;stopOnCondition&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2559" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="180" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;updateScope&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;updateScope&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2573" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="174" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reanalyze&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reanalyze&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2596" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2463" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getValueType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getValueType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2621" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1947" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;invalid&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;invalid&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2670" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1967" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getProgramState&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getProgramState&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2674" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1945" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2680" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1935" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;dependsOnThis&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;dependsOnThis&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2684" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1960" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isGlobal&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isGlobal&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2688" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2529" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isVariable&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isVariable&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2692" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1963" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2706" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2680" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isAlias&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isAlias&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2723" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2511" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2730" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2680" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;internalMatch&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;internalMatch&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2734" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1937" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;internalUpdate&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;internalUpdate&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2738" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2432" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reanalyze&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reanalyze&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2744" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2596" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;submatch&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;submatch&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2757" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2721" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="4635" info="Function in derived class"/>
            <location file="lib\infer.h" line="30" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;yield&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;yield&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="4639" info="Function in derived class"/>
            <location file="lib\infer.h" line="31" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;forward&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;forward&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5472" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="4997" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;forward&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;forward&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5481" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="5004" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reverse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reverse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5489" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="5010" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;parse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;parse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5498" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="5017" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5536" info="Function in derived class"/>
            <location file="lib\infer.h" line="30" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;yield&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;yield&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5539" info="Function in derived class"/>
            <location file="lib\infer.h" line="31" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5578" info="Function in derived class"/>
            <location file="lib\infer.h" line="30" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;yield&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;yield&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5581" info="Function in derived class"/>
            <location file="lib\infer.h" line="31" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5591" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="5577" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5597" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="5577" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;parse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;parse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5643" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="5498" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getValue&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getValue&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5937" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1928" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getValue&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getValue&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5945" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1929" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;makeConditional&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;makeConditional&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5954" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1931" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;addErrorPath&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;addErrorPath&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5960" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1933" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isAlias&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isAlias&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5966" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1941" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isGlobal&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isGlobal&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5980" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1957" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lowerToPossible&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lowerToPossible&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5984" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="170" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lowerToInconclusive&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lowerToInconclusive&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="5992" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="172" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isConditional&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isConditional&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6001" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="178" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;stopOnCondition&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;stopOnCondition&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6011" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="180" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;updateScope&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;updateScope&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6015" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="174" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6049" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1935" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getProgramState&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getProgramState&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6053" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="1945" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;forkScope&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;forkScope&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6060" info="Function in derived class"/>
            <location file="lib\analyzer.h" line="176" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;match&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6721" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2680" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isWritable&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isWritable&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6725" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2143" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;writeValue&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;writeValue&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6757" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2180" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isModified&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isModified&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6788" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="2076" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;parse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;parse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="7013" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="5498" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;forward&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;forward&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="7216" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="4997" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;forward&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;forward&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="7228" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="5004" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reverse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reverse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="7239" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="5010" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;parse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;parse&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="7248" info="Function in derived class"/>
            <location file="lib\valueflow.cpp" line="5017" info="Virtual function in base class"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;varId&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;varId&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="634"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6021"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="6130"/>
        </error>
        <error id="postfixOperator" severity="performance" msg="Prefer prefix ++/-- operators for non-primitive types." verbose="Prefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." cwe="398" file0="lib/valueflow.cpp" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="1804"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getValueType&amp;#039; is never used." verbose="The function &amp;#039;getValueType&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\valueflow.cpp" line="2621"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportOut&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportOut&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="cli/cmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.h" line="75" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="256" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportErr&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportErr&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="cli/cmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.h" line="78" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="264" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportProgress&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportProgress&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="cli/cmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.h" line="80" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="272" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="cli/cmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.h" line="85" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="282" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;bughuntingReport&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;bughuntingReport&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="cli/cmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.h" line="87" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="286" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportOut&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportOut&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="cli/cmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="cli\threadexecutor.h" line="56" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="256" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportErr&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportErr&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="cli/cmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="cli\threadexecutor.h" line="57" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="264" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportInfo&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="cli/cmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="cli\threadexecutor.h" line="58" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="282" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;bughuntingReport&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;bughuntingReport&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="cli/cmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="cli\threadexecutor.h" line="59" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="286" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::copy algorithm instead of a raw loop." verbose="Consider using std::copy algorithm instead of a raw loop." cwe="398" file0="cli/cmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="cli\cmdlineparser.cpp" line="608"/>
        </error>
        <error id="passedByValue" severity="performance" msg="Function parameter &amp;#039;exe&amp;#039; should be passed by const reference." verbose="Parameter &amp;#039;exe&amp;#039; is passed by value. It could be passed as a const reference which is usually faster and recommended in C++." cwe="398" file0="cli/cppcheckexecutor.cpp" sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.cpp" line="1190"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="cli/cppcheckexecutor.cpp" sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.cpp" line="152"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::copy_if algorithm instead of a raw loop." verbose="Consider using std::copy_if algorithm instead of a raw loop." cwe="398" file0="cli/cppcheckexecutor.cpp" sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.cpp" line="176"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.cpp" line="890"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.cpp" line="891"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;IMAGEHLP_SYMBOL64_EXT::nameExt&amp;#039; is never used." verbose="struct member &amp;#039;IMAGEHLP_SYMBOL64_EXT::nameExt&amp;#039; is never used." cwe="563" file0="cli/cppcheckexecutor.cpp" sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.cpp" line="595"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="The comparison &amp;#039;type == -1&amp;#039; is always true." verbose="Finding the same expression on both sides of an operator is suspicious and might indicate a cut and paste or logic error. Please examine this code carefully to determine if it is correct." cwe="398" file0="cli/cppcheckexecutor.cpp" sinceDate="12/3/2021">
            <location file="cli\cppcheckexecutor.cpp" line="554" info=""/>
            <location file="cli\cppcheckexecutor.cpp" line="400" info="&amp;#039;type&amp;#039; is assigned value &amp;#039;-1&amp;#039; here."/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;MAXNAMLEN&amp;#039; since the value of &amp;#039;MAXNAMLEN&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;MAXNAMLEN&amp;#039; since the value of &amp;#039;MAXNAMLEN&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="cli\filelister.cpp" line="218"/>
        </error>
        <error id="unsafeClassCanLeak" severity="style" msg="Class &amp;#039;HelpDialog&amp;#039; is unsafe, &amp;#039;HelpDialog::mHelpEngine&amp;#039; can leak by wrong usage." verbose="The class &amp;#039;HelpDialog&amp;#039; is unsafe, wrong usage can cause memory/resource leaks for &amp;#039;HelpDialog::mHelpEngine&amp;#039;. This can for instance be fixed by adding proper cleanup in the destructor." cwe="398" file0="gui/helpdialog.cpp" sinceDate="12/3/2021">
            <location file="gui\helpdialog.h" line="31"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="gui\helpdialog.cpp" line="37"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="gui\mainwindow.cpp" line="775"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;closeEvent&amp;#039; is never used." verbose="The function &amp;#039;closeEvent&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\mainwindow.cpp" line="1311"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="gui\projectfile.cpp" line="1159"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="gui\projectfiledialog.cpp" line="91"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;FILESDIR&amp;#039; since the value of &amp;#039;FILESDIR&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="gui\projectfiledialog.cpp" line="92"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;data&amp;#039; can be declared with const" verbose="Parameter &amp;#039;data&amp;#039; can be declared with const" cwe="398" file0="gui/test/cppchecklibrarydata/testcppchecklibrarydata.cpp" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="554"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;defineValid&amp;#039; is never used." verbose="The function &amp;#039;defineValid&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="360"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;mandatoryAttributeMissing&amp;#039; is never used." verbose="The function &amp;#039;mandatoryAttributeMissing&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="64"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;markupValid&amp;#039; is never used." verbose="The function &amp;#039;markupValid&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="468"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memoryResourceValid&amp;#039; is never used." verbose="The function &amp;#039;memoryResourceValid&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="260"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;platformTypeValid&amp;#039; is never used." verbose="The function &amp;#039;platformTypeValid&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="202"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;podtypeValid&amp;#039; is never used." verbose="The function &amp;#039;podtypeValid&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="79"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;reflectionValid&amp;#039; is never used." verbose="The function &amp;#039;reflectionValid&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="425"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;smartPointerValid&amp;#039; is never used." verbose="The function &amp;#039;smartPointerValid&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="170"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;typechecksValid&amp;#039; is never used." verbose="The function &amp;#039;typechecksValid&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="122"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;undefineValid&amp;#039; is never used." verbose="The function &amp;#039;undefineValid&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="395"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;xmlReaderError&amp;#039; is never used." verbose="The function &amp;#039;xmlReaderError&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\cppchecklibrarydata\testcppchecklibrarydata.cpp" line="30"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &amp;#039;!&amp;#039; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398" file0="gui/test/data/benchmark/simple.cpp" sinceDate="12/3/2021">
            <location file="gui\test\data\benchmark\simple.cpp" line="2184"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;tok&amp;#039; is redundant or there is possible null pointer dereference: tok." verbose="Either the condition &amp;#039;tok&amp;#039; is redundant or there is possible null pointer dereference: tok." cwe="476" file0="gui/test/data/benchmark/simple.cpp" sinceDate="12/3/2021">
            <location file="gui\test\data\benchmark\simple.cpp" line="2928" info="Null pointer dereference"/>
            <location file="gui\test\data\benchmark\simple.cpp" line="2917" info="Assuming that condition &amp;#039;tok&amp;#039; is not redundant"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;scope&amp;#039; can be declared with const" verbose="Parameter &amp;#039;scope&amp;#039; can be declared with const" cwe="398" file0="gui/test/data/benchmark/simple.cpp" sinceDate="12/3/2021">
            <location file="gui\test\data\benchmark\simple.cpp" line="1020"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/foo1.cpp" sinceDate="12/3/2021">
            <location file="gui\test\data\files\foo1.cpp" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/foo2.cxx" sinceDate="12/3/2021">
            <location file="gui\test\data\files\foo2.cxx" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/foo3.cc" sinceDate="12/3/2021">
            <location file="gui\test\data\files\foo3.cc" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/foo4.c" sinceDate="12/3/2021">
            <location file="gui\test\data\files\foo4.c" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/foo5.c++" sinceDate="12/3/2021">
            <location file="gui\test\data\files\foo5.c++" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/foo6.txx" sinceDate="12/3/2021">
            <location file="gui\test\data\files\foo6.txx" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/foo7.tpp" sinceDate="12/3/2021">
            <location file="gui\test\data\files\foo7.tpp" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/foo8.ipp" sinceDate="12/3/2021">
            <location file="gui\test\data\files\foo8.ipp" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/foo9.ixx" sinceDate="12/3/2021">
            <location file="gui\test\data\files\foo9.ixx" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/dir1/foo1.cpp" sinceDate="12/3/2021">
            <location file="gui\test\data\files\dir1\foo1.cpp" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/dir1/dir11/foo11.cpp" sinceDate="12/3/2021">
            <location file="gui\test\data\files\dir1\dir11\foo11.cpp" line="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: file . " verbose="syntax error: file . " file0="gui/test/data/files/dir2/foo1.cpp" sinceDate="12/3/2021">
            <location file="gui\test\data\files\dir2\foo1.cpp" line="1"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::char_bit&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::char_bit&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::short_bit&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::short_bit&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::int_bit&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::int_bit&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::long_bit&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::long_bit&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::long_long_bit&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::long_long_bit&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_bool&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_bool&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_short&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_short&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_int&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_int&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_long&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_long&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_long_long&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_long_long&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_float&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_float&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_double&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_double&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_long_double&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_long_double&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_wchar_t&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_wchar_t&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_size_t&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_size_t&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::sizeof_pointer&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::sizeof_pointer&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::defaultSign&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::defaultSign&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Platform::platformType&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Platform::platformType&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="31"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;ImportProject::projectType&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;ImportProject::projectType&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="33"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Library::bugHunting&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Library::bugHunting&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="32"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Library::mAllocId&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Library::mAllocId&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="32"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::bugHunting&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::bugHunting&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::bugHuntingCheckFunctionMaxTime&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::bugHuntingCheckFunctionMaxTime&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::checkAllConfigurations&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::checkAllConfigurations&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::checkConfiguration&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::checkConfiguration&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::checkHeaders&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::checkHeaders&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::checkLibrary&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::checkLibrary&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::checkUnusedTemplates&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::checkUnusedTemplates&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::clang&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::clang&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::clangTidy&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::clangTidy&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::daca&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::daca&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::debugBugHunting&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::debugBugHunting&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::debugnormal&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::debugnormal&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::debugSimplified&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::debugSimplified&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::debugtemplate&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::debugtemplate&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::debugwarnings&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::debugwarnings&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::dump&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::dump&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::enforcedLang&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::enforcedLang&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::exceptionHandling&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::exceptionHandling&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::exitCode&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::exitCode&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::force&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::force&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::inlineSuppressions&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::inlineSuppressions&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::jobs&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::jobs&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::jointSuppressionReport&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::jointSuppressionReport&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::loadAverage&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::loadAverage&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::maxConfigs&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::maxConfigs&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::preprocessOnly&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::preprocessOnly&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::quiet&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::quiet&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::relativePaths&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::relativePaths&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::reportProgress&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::reportProgress&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::showtime&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::showtime&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::verbose&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::verbose&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::xml&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::xml&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Settings::xml_version&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Settings::xml_version&amp;#039; is not initialized in the constructor." cwe="398" file0="gui/test/projectfile/testprojectfile.cpp" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="30"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;loadInexisting&amp;#039; is never used." verbose="The function &amp;#039;loadInexisting&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="35"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;loadSimple&amp;#039; is never used." verbose="The function &amp;#039;loadSimple&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="42"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;loadSimpleNoroot&amp;#039; is never used." verbose="The function &amp;#039;loadSimpleNoroot&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="87"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;loadSimpleWithIgnore&amp;#039; is never used." verbose="The function &amp;#039;loadSimpleWithIgnore&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\projectfile\testprojectfile.cpp" line="65"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;bughuntingReport&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;bughuntingReport&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/test64bit.cpp" sinceDate="12/3/2021">
            <location file="test\testsuite.h" line="106" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="286" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportOut&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportOut&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/test64bit.cpp" sinceDate="12/3/2021">
            <location file="test\testsuite.h" line="107" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="256" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportErr&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportErr&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/test64bit.cpp" sinceDate="12/3/2021">
            <location file="test\testsuite.h" line="108" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="264" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/test64bit.cpp" sinceDate="12/3/2021">
            <location file="test\test64bit.cpp" line="33" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testassert.cpp" sinceDate="12/3/2021">
            <location file="test\testassert.cpp" line="48" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testastutils.cpp" sinceDate="12/3/2021">
            <location file="test\testastutils.cpp" line="35" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testautovariables.cpp" sinceDate="12/3/2021">
            <location file="test\testautovariables.cpp" line="49" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testbool.cpp" sinceDate="12/3/2021">
            <location file="test\testbool.cpp" line="33" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testboost.cpp" sinceDate="12/3/2021">
            <location file="test\testboost.cpp" line="33" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testbufferoverrun.cpp" sinceDate="12/3/2021">
            <location file="test\testbufferoverrun.cpp" line="111" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::checkAssignment&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::checkAssignment&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="76"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds1&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds1&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="85"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds2&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds2&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="95"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds3&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds3&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="118"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds4&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds4&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="130"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds5&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds5&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="145"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds6&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBounds6&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="162"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBoundsDim1&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::arrayIndexOutOfBoundsDim1&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="171"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::bufferOverflowMemCmp1&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::bufferOverflowMemCmp1&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="179"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::bufferOverflowMemCmp2&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::bufferOverflowMemCmp2&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="187"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::bufferOverflowStrcpy1&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::bufferOverflowStrcpy1&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="194"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::bufferOverflowStrcpy2&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::bufferOverflowStrcpy2&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="201"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::divisionByZeroNoReturn&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::divisionByZeroNoReturn&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="209"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::uninit&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::uninit&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="220"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::uninit_array&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::uninit_array&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="231"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::uninit_function_par&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::uninit_function_par&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="240"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::uninit_malloc&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::uninit_malloc&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="271"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::uninit_struct&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::uninit_struct&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="276"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::uninit_bailout&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::uninit_bailout&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="287"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::ctu&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::ctu&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="303"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::uninit_fp_smartptr&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::uninit_fp_smartptr&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="342"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::uninit_fp_struct&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::uninit_fp_struct&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="351"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::uninit_fp_struct_member_init_2&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::uninit_fp_struct_member_init_2&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="365"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestBughuntingChecks::uninit_fp_template_var&amp;#039;" verbose="Unused private function: &amp;#039;TestBughuntingChecks::uninit_fp_template_var&amp;#039;" cwe="398" file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="375"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testbughuntingchecks.cpp" sinceDate="12/3/2021">
            <location file="test\testbughuntingchecks.cpp" line="34" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testcharvar.cpp" sinceDate="12/3/2021">
            <location file="test\testcharvar.cpp" line="34" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testclangimport.cpp" sinceDate="12/3/2021">
            <location file="test\testclangimport.cpp" line="31" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testclass.cpp" sinceDate="12/3/2021">
            <location file="test\testclass.cpp" line="36" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestCmdlineParser::ignorepaths4&amp;#039;" verbose="Unused private function: &amp;#039;TestCmdlineParser::ignorepaths4&amp;#039;" cwe="398" file0="test/testcmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="test\testcmdlineparser.cpp" line="978"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestCmdlineParser::ignorefilepaths2&amp;#039;" verbose="Unused private function: &amp;#039;TestCmdlineParser::ignorefilepaths2&amp;#039;" cwe="398" file0="test/testcmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="test\testcmdlineparser.cpp" line="997"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testcmdlineparser.cpp" sinceDate="12/3/2021">
            <location file="test\testcmdlineparser.cpp" line="43" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignorefilepaths2&amp;#039; is never used." verbose="The function &amp;#039;ignorefilepaths2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testcmdlineparser.cpp" line="997"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignorepaths4&amp;#039; is never used." verbose="The function &amp;#039;ignorepaths4&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testcmdlineparser.cpp" line="978"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testcondition.cpp" sinceDate="12/3/2021">
            <location file="test\testcondition.cpp" line="39" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testconstructors.cpp" sinceDate="12/3/2021">
            <location file="test\testconstructors.cpp" line="64" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testcppcheck.cpp" sinceDate="12/3/2021">
            <location file="test\testcppcheck.cpp" line="48" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testerrorlogger.cpp" sinceDate="12/3/2021">
            <location file="test\testerrorlogger.cpp" line="38" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testexceptionsafety.cpp" sinceDate="12/3/2021">
            <location file="test\testexceptionsafety.cpp" line="33" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::annotation1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::annotation1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="264"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::annotation2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::annotation2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="277"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::expr1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::expr1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="291"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::expr2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::expr2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="295"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::expr3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::expr3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="299"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::expr4&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::expr4&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="303"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::expr5&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::expr5&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="307"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::expr6&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::expr6&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="311"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::expr7&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::expr7&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="325"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::expr8&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::expr8&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="346"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::expr9&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::expr9&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="355"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::exprAssign1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::exprAssign1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="373"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::exprAssign2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::exprAssign2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="377"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::exprNot&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::exprNot&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="381"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::getValueConst1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::getValueConst1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="385"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::inc1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::inc1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="390"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::inc2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::inc2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="402"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::if1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::if1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="408"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::if2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::if2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="417"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::if3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::if3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="429"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::if4&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::if4&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="441"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::if5&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::if5&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="454"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ifAlwaysTrue1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ifAlwaysTrue1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="462"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ifAlwaysTrue2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ifAlwaysTrue2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="475"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ifAlwaysTrue3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ifAlwaysTrue3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="488"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ifAlwaysFalse1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ifAlwaysFalse1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="502"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ifAlwaysFalse2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ifAlwaysFalse2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="515"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ifelse1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ifelse1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="528"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ifif&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ifif&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="537"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ifreturn&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ifreturn&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="556"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ifIntRangeAlwaysFalse&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ifIntRangeAlwaysFalse&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="569"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ifIntRangeAlwaysTrue&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ifIntRangeAlwaysTrue&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="585"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::istream&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::istream&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="601"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::switch1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::switch1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="615"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::switch2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::switch2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="630"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::for1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::for1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="655"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::forAlwaysFalse1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::forAlwaysFalse1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="666"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::while1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::while1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="683"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::while2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::while2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="700"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::while3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::while3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="717"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::while4&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::while4&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="730"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::while5&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::while5&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="746"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::array1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::array1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="756"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::array2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::array2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="761"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::array3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::array3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="768"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::array4&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::array4&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="777"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::array5&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::array5&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="787"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::array6&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::array6&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="801"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::array7&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::array7&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="811"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::arrayInit1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::arrayInit1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="824"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::arrayInit2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::arrayInit2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="828"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::arrayInit3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::arrayInit3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="832"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::arrayUninit&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::arrayUninit&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="836"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::arrayInLoop&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::arrayInLoop&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="840"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::floatValue1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::floatValue1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="850"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::floatValue2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::floatValue2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="854"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::floatValue3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::floatValue3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="858"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::floatValue4&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::floatValue4&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="865"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::floatValue5&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::floatValue5&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="872"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::functionCall1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::functionCall1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="879"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::functionCall2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::functionCall2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="883"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::functionCall3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::functionCall3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="894"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::functionCall4&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::functionCall4&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="898"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::functionCall5&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::functionCall5&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="902"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::functionCallContract1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::functionCallContract1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="910"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::functionCallContract2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::functionCallContract2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="926"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::int1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::int1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="940"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::pointer1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::pointer1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="948"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::pointer2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::pointer2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="957"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::pointer3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::pointer3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="965"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::pointerAlias1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::pointerAlias1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="974"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::pointerAlias2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::pointerAlias2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="978"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::pointerAlias3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::pointerAlias3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="982"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::pointerAlias4&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::pointerAlias4&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="991"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::pointerNull1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::pointerNull1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="995"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::structMember1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::structMember1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="1000"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::structMember2&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::structMember2&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="1012"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::structMember3&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::structMember3&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="1023"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::pointerToStructInLoop&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::pointerToStructInLoop&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="1037"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestExprEngine::ternaryOperator1&amp;#039;" verbose="Unused private function: &amp;#039;TestExprEngine::ternaryOperator1&amp;#039;" cwe="398" file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="1052"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testexprengine.cpp" sinceDate="12/3/2021">
            <location file="test\testexprengine.cpp" line="35" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testfilelister.cpp" sinceDate="12/3/2021">
            <location file="test\testfilelister.cpp" line="34" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testfunctions.cpp" sinceDate="12/3/2021">
            <location file="test\testfunctions.cpp" line="36" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testgarbage.cpp" sinceDate="12/3/2021">
            <location file="test\testgarbage.cpp" line="35" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testimportproject.cpp" sinceDate="12/3/2021">
            <location file="test\testimportproject.cpp" line="40" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testincompletestatement.cpp" sinceDate="12/3/2021">
            <location file="test\testincompletestatement.cpp" line="61" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testinternal.cpp" sinceDate="12/3/2021">
            <location file="test\testinternal.cpp" line="33" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testio.cpp" sinceDate="12/3/2021">
            <location file="test\testio.cpp" line="34" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testleakautovar.cpp" sinceDate="12/3/2021">
            <location file="test\testleakautovar.cpp" line="37" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testleakautovar.cpp" sinceDate="12/3/2021">
            <location file="test\testleakautovar.cpp" line="2282" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testleakautovar.cpp" sinceDate="12/3/2021">
            <location file="test\testleakautovar.cpp" line="2333" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testleakautovar.cpp" sinceDate="12/3/2021">
            <location file="test\testleakautovar.cpp" line="2381" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testlibrary.cpp" sinceDate="12/3/2021">
            <location file="test\testlibrary.cpp" line="41" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testmathlib.cpp" sinceDate="12/3/2021">
            <location file="test\testmathlib.cpp" line="34" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testmemleak.cpp" sinceDate="12/3/2021">
            <location file="test\testmemleak.cpp" line="37" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testmemleak.cpp" sinceDate="12/3/2021">
            <location file="test\testmemleak.cpp" line="144" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testmemleak.cpp" sinceDate="12/3/2021">
            <location file="test\testmemleak.cpp" line="486" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testmemleak.cpp" sinceDate="12/3/2021">
            <location file="test\testmemleak.cpp" line="1662" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testmemleak.cpp" sinceDate="12/3/2021">
            <location file="test\testmemleak.cpp" line="2160" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testnullpointer.cpp" sinceDate="12/3/2021">
            <location file="test\testnullpointer.cpp" line="42" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testoptions.cpp" sinceDate="12/3/2021">
            <location file="test\testoptions.cpp" line="28" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testother.cpp" sinceDate="12/3/2021">
            <location file="test\testother.cpp" line="41" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testpath.cpp" sinceDate="12/3/2021">
            <location file="test\testpath.cpp" line="31" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testpathmatch.cpp" sinceDate="12/3/2021">
            <location file="test\testpathmatch.cpp" line="41" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testplatform.cpp" sinceDate="12/3/2021">
            <location file="test\testplatform.cpp" line="31" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testpostfixoperator.cpp" sinceDate="12/3/2021">
            <location file="test\testpostfixoperator.cpp" line="48" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testpreprocessor.cpp" sinceDate="12/3/2021">
            <location file="test\testpreprocessor.cpp" line="72" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="test/testpreprocessor.cpp" sinceDate="12/3/2021">
            <location file="test\testpreprocessor.cpp" line="287"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testsimplifytemplate.cpp" sinceDate="12/3/2021">
            <location file="test\testsimplifytemplate.cpp" line="40" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testsimplifytokens.cpp" sinceDate="12/3/2021">
            <location file="test\testsimplifytokens.cpp" line="40" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testsimplifytypedef.cpp" sinceDate="12/3/2021">
            <location file="test\testsimplifytypedef.cpp" line="44" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testsimplifyusing.cpp" sinceDate="12/3/2021">
            <location file="test\testsimplifyusing.cpp" line="40" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testsizeof.cpp" sinceDate="12/3/2021">
            <location file="test\testsizeof.cpp" line="35" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/teststl.cpp" sinceDate="12/3/2021">
            <location file="test\teststl.cpp" line="36" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/teststring.cpp" sinceDate="12/3/2021">
            <location file="test\teststring.cpp" line="33" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testsummaries.cpp" sinceDate="12/3/2021">
            <location file="test\testsummaries.cpp" line="32" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testsuppressions.cpp" sinceDate="12/3/2021">
            <location file="test\testsuppressions.cpp" line="38" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reportErr&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reportErr&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testsymboldatabase.cpp" sinceDate="12/3/2021">
            <location file="test\testutils.h" line="57" info="Function in derived class"/>
            <location file="lib\errorlogger.h" line="264" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testsymboldatabase.cpp" sinceDate="12/3/2021">
            <location file="test\testsymboldatabase.cpp" line="118" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="test/testsymboldatabase.cpp" sinceDate="12/3/2021">
            <location file="test\testsymboldatabase.cpp" line="110"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="test/testsymboldatabase.cpp" sinceDate="12/3/2021">
            <location file="test\testsymboldatabase.cpp" line="2563"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::find_if algorithm instead of a raw loop." verbose="Consider using std::find_if algorithm instead of a raw loop." cwe="398" file0="test/testsymboldatabase.cpp" sinceDate="12/3/2021">
            <location file="test\testsymboldatabase.cpp" line="2597"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::accumulate algorithm instead of a raw loop." verbose="Consider using std::accumulate algorithm instead of a raw loop." cwe="398" file0="test/testsymboldatabase.cpp" sinceDate="12/3/2021">
            <location file="test\testsymboldatabase.cpp" line="2887"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="test/testsymboldatabase.cpp" sinceDate="12/3/2021">
            <location file="test\testsymboldatabase.cpp" line="4860"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testthreadexecutor.cpp" sinceDate="12/3/2021">
            <location file="test\testthreadexecutor.cpp" line="61" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testtimer.cpp" sinceDate="12/3/2021">
            <location file="test\testtimer.cpp" line="31" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testtoken.cpp" sinceDate="12/3/2021">
            <location file="test\testtoken.cpp" line="44" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestTokenizer::platformWin&amp;#039;" verbose="Unused private function: &amp;#039;TestTokenizer::platformWin&amp;#039;" cwe="398" file0="test/testtokenize.cpp" sinceDate="12/3/2021">
            <location file="test\testtokenize.cpp" line="5223"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testtokenize.cpp" sinceDate="12/3/2021">
            <location file="test\testtokenize.cpp" line="46" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;platformWin&amp;#039; is never used." verbose="The function &amp;#039;platformWin&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testtokenize.cpp" line="5223"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testtokenlist.cpp" sinceDate="12/3/2021">
            <location file="test\testtokenlist.cpp" line="33" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testtokenrange.cpp" sinceDate="12/3/2021">
            <location file="test\testtokenrange.cpp" line="39" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testtype.cpp" sinceDate="12/3/2021">
            <location file="test\testtype.cpp" line="34" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;CPPCHECKLIB_EXPORT;_WIN32&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;CPPCHECKLIB_EXPORT;_WIN32&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;CPPCHECKLIB_IMPORT;_WIN32&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;CPPCHECKLIB_IMPORT;_WIN32&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;MAXTIME&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;MAXTIME&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;NONNEG&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;NONNEG&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;_DEBUG;_MSC_VER&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;_DEBUG;_MSC_VER&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;_MSC_VER;__CPPCHECK__;__GNUC__;__clang__&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;_MSC_VER;__CPPCHECK__;__GNUC__;__clang__&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;_WIN32&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;_WIN32&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__CPPCHECK__&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__CPPCHECK__&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__CPPCHECK__;__GNUC__;__clang__&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__CPPCHECK__;__GNUC__;__clang__&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__GNUC__&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__GNUC__&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__SANITIZE_ADDRESS__&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__SANITIZE_ADDRESS__&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__clang__&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__clang__&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="syntaxError" severity="error" msg="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__has_feature&amp;#039;." verbose="Unmatched &amp;#039;{&amp;#039;. Configuration: &amp;#039;__has_feature&amp;#039;." file0="test/testuncommentedmethods.cpp" sinceDate="12/3/2021">
            <location file="test\testuncommentedmethods.cpp" line="27"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testuninitvar.cpp" sinceDate="12/3/2021">
            <location file="test\testuninitvar.cpp" line="38" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testunusedfunctions.cpp" sinceDate="12/3/2021">
            <location file="test\testunusedfunctions.cpp" line="34" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testunusedprivfunc.cpp" sinceDate="12/3/2021">
            <location file="test\testunusedprivfunc.cpp" line="36" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testunusedvar.cpp" sinceDate="12/3/2021">
            <location file="test\testunusedvar.cpp" line="34" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testutils.cpp" sinceDate="12/3/2021">
            <location file="test\testutils.cpp" line="30" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testvaarg.cpp" sinceDate="12/3/2021">
            <location file="test\testvaarg.cpp" line="48" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestValueFlow::isNotLifetimeValue&amp;#039;" verbose="Unused private function: &amp;#039;TestValueFlow::isNotLifetimeValue&amp;#039;" cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="157"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;TestValueFlow::removeImpossible&amp;#039;" verbose="Unused private function: &amp;#039;TestValueFlow::removeImpossible&amp;#039;" cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="530"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="46" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="295"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="315"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="334"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="377"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="396"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="414"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="432"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="451"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="test/testvalueflow.cpp" sinceDate="12/3/2021">
            <location file="test\testvalueflow.cpp" line="4151"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;run&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/testvarid.cpp" sinceDate="12/3/2021">
            <location file="test\testvarid.cpp" line="36" info="Function in derived class"/>
            <location file="test\testsuite.h" line="51" info="Virtual function in base class"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;digit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;digit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-19872/qppmhandler.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-19872\qppmhandler.cpp" line="70"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-19872/qppmhandler.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-19872\qppmhandler.cpp" line="170"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-19872/qppmhandler.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-19872\qppmhandler.cpp" line="228"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-19872/qppmhandler.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-19872\qppmhandler.cpp" line="229"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;b&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;b&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-19872/qppmhandler.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-19872\qppmhandler.cpp" line="235"/>
        </error>
        <error id="redundantCondition" severity="style" msg="Redundant condition: !cp-&amp;gt;cinema. &amp;#039;cp-&amp;gt;cinema || (!cp-&amp;gt;cinema &amp;amp;&amp;amp; t2_mode==FINAL_PASS)&amp;#039; is equivalent to &amp;#039;cp-&amp;gt;cinema || t2_mode==FINAL_PASS&amp;#039;" verbose="The condition &amp;#039;cp-&amp;gt;cinema || !cp-&amp;gt;cinema &amp;amp;&amp;amp; t2_mode==FINAL_PASS&amp;#039; is equivalent to &amp;#039;cp-&amp;gt;cinema || t2_mode==FINAL_PASS&amp;#039;." cwe="398" file0="test/bug-hunting/cve/CVE-2018-20845/pi.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="730"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-20845/pi.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="475"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-20845/pi.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="475"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-20845/pi.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="613"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-20845/pi.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="613"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;compno&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;compno&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-20845/pi.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="766"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pino&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pino&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2018-20845/pi.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="766"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tccp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tccp&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2018-20845/pi.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="565"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;tccp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;tccp&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2018-20845/pi.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="700"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pi_create_decode&amp;#039; is never used." verbose="The function &amp;#039;pi_create_decode&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="472"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pi_create_encode&amp;#039; is never used." verbose="The function &amp;#039;pi_create_encode&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="807"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pi_initialise_encode&amp;#039; is never used." verbose="The function &amp;#039;pi_initialise_encode&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="610"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pi_next&amp;#039; is never used." verbose="The function &amp;#039;pi_next&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2018-20845\pi.c" line="787"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::m&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::m&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::n&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::n&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::domain&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::domain&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::range&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::range&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="38"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="215"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="504"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="630"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="907"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;PostScriptFunction&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;PostScriptFunction&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="926"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;PostScriptFunction&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;PostScriptFunction&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="926"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="965"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="1126"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="1139"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="1153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="978"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.cc" line="1028"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SampledFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SampledFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="160"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ExponentialFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ExponentialFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="211"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StitchingFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StitchingFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="257"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PostScriptFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PostScriptFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="293"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="105" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="108" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="111" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="112" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="128" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="131" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="134" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="135" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="188" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="191" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="194" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="195" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="228" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="231" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="234" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="235" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="276" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="279" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="282" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10018/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="283" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10018\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;DeviceNRecoder::buf&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;DeviceNRecoder::buf&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="1006"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;fontID&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;fontID&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="858"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;type&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;type&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="895"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PSFontInfo&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PSFontInfo&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="857"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5438"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5444"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5450"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5456"/>
        </error>
        <error id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." verbose="Suspicious condition (assignment + comparison); Clarify expression with parentheses." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5462"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="1015"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="1017"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="1056"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="1433"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="1627"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2077"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2152"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2272"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2368"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4776"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4842"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5734"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6279"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6423"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6478"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6479"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6480"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6528"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6541"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6543"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6590"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6630"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6631"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6632"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6661"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6674"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6676"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6703"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7094"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7169"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7173"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7177"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7181"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7185"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7189"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7193"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7197"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7201"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7206"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7209"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7373"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7375"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7376"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7380"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;useLZW&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;useLZW&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7017" info="useLZW is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6748" info="useLZW is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;useRLE&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;useRLE&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7017" info="useRLE is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6748" info="useRLE is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;useASCII&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;useASCII&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7019" info="useASCII is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6748" info="useASCII is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;useCompressed&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;useCompressed&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7018" info="useCompressed is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6748" info="useCompressed is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;maskUseCompressed&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;maskUseCompressed&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6782" info="maskUseCompressed is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6771" info="maskUseCompressed is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;size&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;size&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="1586"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="1588"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;font&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;font&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2037"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2038"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;uMap&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;uMap&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2068"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;code&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;code&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2071"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;w1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;w1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2072"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;w2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;w2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2072"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2073"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hexChar&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hexChar&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2364"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ffT1C&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ffT1C&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2461"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ffTT&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ffTT&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2509"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ffT1C&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ffT1C&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2681"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ffTT&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ffTT&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2741"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmapPlatform&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmapPlatform&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2822"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmapEncoding&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmapEncoding&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2822"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ffTT&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ffTT&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="2938"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmapPlatform&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmapPlatform&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3012"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cmapEncoding&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cmapEncoding&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3012"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;gfx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;gfx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3119"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3122"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3123"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lastSpace&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lastSpace&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3301"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3411"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3504"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;len&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;len&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3608"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3677"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3677"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;colorSpace&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;colorSpace&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3737"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;maskColors&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;maskColors&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3739"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3742"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="3987"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4358"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;s&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;s&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4361"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;colorPtr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;colorPtr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4736"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sepCS&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sepCS&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4739"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4741"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;colorPtr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;colorPtr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4802"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sepCS&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sepCS&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4805"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4807"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4956"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5245"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mul&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mul&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5285"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5286"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5287"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xa&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xa&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5382"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ya&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ya&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5382"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ra&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ra&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5382"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ta&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ta&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5383"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sLeft&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sLeft&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sRight&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sRight&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sTop&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sTop&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sBottom&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sBottom&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sZero&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sZero&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;sDiag&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;sDiag&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5384"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;alpha&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;alpha&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5387"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5389"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x3&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x3&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y3&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y3&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x4&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x4&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y4&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y4&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5646"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5647"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5647"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5714"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;imgStr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;imgStr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5982"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;col&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;col&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5985"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5985"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5985"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5985"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5985"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6467"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;line&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;line&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6620"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6744"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;col&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;col&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6745"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;labCS&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;labCS&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7354"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7355"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7356"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7356"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;func&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;func&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7360"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;numAltComps&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;numAltComps&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7361"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7362"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7506"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="8265"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="8360"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fileTypeA&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fileTypeA&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="1312"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rects1Len&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rects1Len&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6476"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rects1Len&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rects1Len&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6585"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rects1Len&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rects1Len&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6628"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;rects1Len&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;rects1Len&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6698"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;maskUseLZW&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;maskUseLZW&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6749"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;maskUseRLE&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;maskUseRLE&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6749"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;maskUseASCII&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;maskUseASCII&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6749"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;maskUseCompressed&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;maskUseCompressed&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="6750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;width&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;width&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7628"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;height&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;height&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7628"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;left&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;left&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7628"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;right&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;right&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7628"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;top&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;top&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7628"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bottom&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bottom&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7628"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;w&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;w&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7629"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;h&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;h&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7629"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;left&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;left&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;right&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;right&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;top&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;top&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bottom&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bottom&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;samples&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;samples&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;width&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;width&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;height&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;height&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7740"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7741"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7741"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7741"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7741"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;llx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;llx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7742"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lly&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lly&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7742"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;urx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;urx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7742"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ury&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ury&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7742"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;horiz&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;horiz&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7744"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;vert&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;vert&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7744"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7745"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;j&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;j&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10019/PSOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7745"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;checkPageSlice&amp;#039; is never used." verbose="The function &amp;#039;checkPageSlice&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4098"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;drawForm&amp;#039; is never used." verbose="The function &amp;#039;drawForm&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="8062"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;drawString&amp;#039; is never used." verbose="The function &amp;#039;drawString&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5701"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;opiBegin&amp;#039; is never used." verbose="The function &amp;#039;opiBegin&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7607"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;opiEnd&amp;#039; is never used." verbose="The function &amp;#039;opiEnd&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="7980"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;psXObject&amp;#039; is never used." verbose="The function &amp;#039;psXObject&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="8067"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;restoreTextPos&amp;#039; is never used." verbose="The function &amp;#039;restoreTextPos&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5067"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;saveTextPos&amp;#039; is never used." verbose="The function &amp;#039;saveTextPos&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5062"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateCharSpace&amp;#039; is never used." verbose="The function &amp;#039;updateCharSpace&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5010"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateHorizScaling&amp;#039; is never used." verbose="The function &amp;#039;updateHorizScaling&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5037"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateRender&amp;#039; is never used." verbose="The function &amp;#039;updateRender&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5015"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateRise&amp;#039; is never used." verbose="The function &amp;#039;updateRise&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5027"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateTextMat&amp;#039; is never used." verbose="The function &amp;#039;updateTextMat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="4996"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateTextPos&amp;#039; is never used." verbose="The function &amp;#039;updateTextPos&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5048"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateTextShift&amp;#039; is never used." verbose="The function &amp;#039;updateTextShift&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5053"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateWordSpace&amp;#039; is never used." verbose="The function &amp;#039;updateWordSpace&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10019\PSOutputDev.cc" line="5032"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Splash::groupBackX&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Splash::groupBackX&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2006"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Splash::groupBackY&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Splash::groupBackY&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2006"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Splash::groupBackX&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Splash::groupBackX&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2026"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Splash::groupBackY&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Splash::groupBackY&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2026"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;vectorAntialias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;vectorAntialias&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2010"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;inShading&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;inShading&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2011"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;vectorAntialias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;vectorAntialias&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2030"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;inShading&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;inShading&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2031"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;Splash&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;Splash&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2032"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;Splash&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;Splash&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2032"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2386"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lineDashIdx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lineDashIdx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2769"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;subpathStart&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;subpathStart&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2769"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nDashes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nDashes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2769"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2942"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="2942"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3246"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3482"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3950"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3950"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3950"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3950"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4031"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4031"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;destPtr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;destPtr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;srcPtr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;srcPtr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4183"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ySrc0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ySrc0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4256"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ySrc1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ySrc1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4256"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;alphaPtr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;alphaPtr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4566"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4571"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="5910"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mono1Ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mono1Ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="6051"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;mat&amp;#039; can be declared with const" verbose="Parameter &amp;#039;mat&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4562"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;matrix&amp;#039; can be declared with const" verbose="Parameter &amp;#039;matrix&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="1992"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;mat&amp;#039; can be declared with const" verbose="Parameter &amp;#039;mat&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3474"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="3264"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ySrc0&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ySrc0&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.cc" line="4306"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;Splash::dumpXPath&amp;#039;" verbose="Unused private function: &amp;#039;Splash::dumpXPath&amp;#039;" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.h" line="425"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;Splash::upscaleMask&amp;#039;" verbose="Unused private function: &amp;#039;Splash::upscaleMask&amp;#039;" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10020/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10020\Splash.h" line="342"/>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &amp;#039;Splash&amp;#039;" verbose="The one definition rule is violated, different classes/structs have the same name &amp;#039;Splash&amp;#039;" cwe="758" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.h" line="71"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;ASCII85Stream::c&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;ASCII85Stream::c&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1120"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;ASCII85Stream::b&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;ASCII85Stream::b&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1120"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWStream::inputBuf&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWStream::inputBuf&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1205"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWStream::table&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWStream::table&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1205"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWStream::prevCode&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWStream::prevCode&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1205"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWStream::newChar&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWStream::newChar&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1205"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::index&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::index&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::remain&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::remain&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::codeBuf&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::codeBuf&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::codeSize&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::codeSize&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::codeLengths&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::codeLengths&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::blockLen&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::blockLen&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWEncoder::table&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWEncoder::table&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5698"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWEncoder::nextSeq&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWEncoder::nextSeq&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5698"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWEncoder::codeLen&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWEncoder::codeLen&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5698"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWEncoder::outBuf&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWEncoder::outBuf&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5698"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;dict&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;dict&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="319"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="471"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;start&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;start&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="867"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;length&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;length&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="868"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;needFree&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;needFree&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="871"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;limited&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;limited&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="961"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;length&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;length&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="962"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1027"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1123"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1439"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;endOfLine&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;endOfLine&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1529"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;byteAlign&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;byteAlign&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1530"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5443"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5495"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5591"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;FileStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;FileStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="756"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;FileStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;FileStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="756"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;LZWStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;LZWStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1209"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;LZWStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;LZWStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1209"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;FlateStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;FlateStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4839"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;FlateStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;FlateStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4839"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SharedFile&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SharedFile&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="664"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;(code&amp;gt;&amp;gt;7)!=0&amp;#039; is always true" verbose="Condition &amp;#039;(code&amp;gt;&amp;gt;7)!=0&amp;#039; is always true" cwe="571" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2179" info="Condition &amp;#039;(code&amp;gt;&amp;gt;7)!=0&amp;#039; is always true"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2177" info="Assuming that condition &amp;#039;(code&amp;gt;&amp;gt;7)==0&amp;#039; is not redundant"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;imgLineSize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;imgLineSize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="350"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="411"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="518"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;inBits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;inBits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="544"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;outBits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;outBits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="544"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="545"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;kk&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;kk&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="545"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="797"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1141"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1283"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1397"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1457"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitsNeeded&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitsNeeded&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1598"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitsUsed&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitsUsed&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1598"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitsNeeded&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitsNeeded&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitsUsed&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitsUsed&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitsAvail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitsAvail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1678"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1678"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;code2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;code2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1765"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;b1i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;b1i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1766"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2075"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2110"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2169"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2244"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2582"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nAvail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nAvail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2821"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2821"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pY&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pY&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pCb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pCb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pCr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pCr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pR&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pR&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pG&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pG&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pB&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pB&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;run&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;run&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3151"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3152"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;scale&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;scale&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3493"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3494"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3690"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3718"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3734"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3734"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3759"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3859"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3898"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3936"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prec&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prec&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3999"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3999"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4032"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4088"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4089"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="4090"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5294"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5519"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5779"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;lengths&amp;#039; can be declared with const" verbose="Parameter &amp;#039;lengths&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5244"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;dictA&amp;#039; can be declared with const" verbose="Parameter &amp;#039;dictA&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="318"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="96"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;bitsAvail&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;bitsAvail&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="1694"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="3759"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;n&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;n&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5531"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;t&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;t&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5532"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="5649"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2461"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2475"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2482"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2512"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nAvail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nAvail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2424"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2424"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2483"/>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &amp;#039;SharedFile&amp;#039;" verbose="The one definition rule is violated, different classes/structs have the same name &amp;#039;SharedFile&amp;#039;" cwe="758" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="661"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &amp;#039;close&amp;#039; is called from destructor &amp;#039;~DCTStream()&amp;#039; at line 2642. Dynamic binding is not used." verbose="Virtual function &amp;#039;close&amp;#039; is called from destructor &amp;#039;~DCTStream()&amp;#039; at line 2642. Dynamic binding is not used." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="733" info="close is a virtual function"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.cc" line="2642" info="Calling close"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;FilterStream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;FilterStream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="208"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ASCIIHexStream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ASCIIHexStream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="479"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ASCII85Stream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ASCII85Stream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="507"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RunLengthStream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RunLengthStream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="585"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;EOFStream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;EOFStream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="923"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ASCIIHexEncoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ASCIIHexEncoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1016"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ASCII85Encoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ASCII85Encoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1060"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RunLengthEncoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RunLengthEncoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1104"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;LZWEncoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;LZWEncoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1154"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="173" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="119" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="174" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBaseStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBaseStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="177" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="128" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getUndecodedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getUndecodedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="180" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="132" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getDict&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getDict&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="183" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="135" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="210" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="89" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="211" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="214" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="119" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBaseStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBaseStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="215" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="128" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getUndecodedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getUndecodedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="218" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="132" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getDict&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getDict&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="221" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="135" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getNextStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getNextStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="224" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="147" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="344" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="345" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="171" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="347" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="350" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="351" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="355" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="359" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="360" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="363" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="173" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="364" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="191" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="367" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="192" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="394" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="395" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="171" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="397" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="400" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="401" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="89" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="402" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="406" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="410" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="411" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="414" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="173" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="415" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="191" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="418" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="192" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="445" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="446" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="171" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="448" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEmbedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEmbedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="451" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="81" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="454" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="455" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="456" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="457" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="458" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="461" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="173" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="462" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="191" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="463" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="192" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="481" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="482" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="485" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="486" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="490" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="491" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="492" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="509" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="510" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="513" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="514" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="518" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="519" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="520" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="540" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="541" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="544" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="545" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="546" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getRawChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getRawChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="547" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="99" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="548" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="549" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="550" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="587" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="588" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="591" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="592" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="596" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="600" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="601" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="602" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="627" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="628" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="631" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="632" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="633" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="634" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="635" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="636" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="728" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="729" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="732" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="733" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="210" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="734" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="735" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="736" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="737" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="738" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="867" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="868" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="871" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="872" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="873" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getRawChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getRawChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="874" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="99" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="875" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="876" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="877" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="925" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="926" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="929" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="930" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="933" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="936" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="939" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="943" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="957" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="958" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="961" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="962" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="963" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="964" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="968" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="987" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="988" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="991" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="992" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="993" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="994" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="998" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="999" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="138" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1018" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1019" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1022" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1023" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1027" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1031" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1035" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1038" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="138" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1062" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1063" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1066" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1067" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1071" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1075" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1079" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1082" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="138" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1106" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1107" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1110" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1111" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1115" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1119" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1123" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1126" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="138" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1156" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1157" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1160" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1161" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1162" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1163" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1167" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10021/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="1170" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10021\Stream.h" line="138" info="Virtual function in base class"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::m&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::m&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::n&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::n&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::domain&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::domain&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::range&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::range&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="38"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="215"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="504"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="630"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="907"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;PostScriptFunction&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;PostScriptFunction&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="926"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;PostScriptFunction&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;PostScriptFunction&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="926"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="965"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="1126"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="1139"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="1153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="978"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.cc" line="1028"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SampledFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SampledFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="160"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ExponentialFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ExponentialFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="211"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StitchingFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StitchingFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="257"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PostScriptFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PostScriptFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="293"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="105" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="108" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="111" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="112" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="128" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="131" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="134" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="135" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="188" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="191" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="194" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="195" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="228" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="231" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="234" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="235" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="276" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="279" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="282" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10023/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="283" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10023\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Splash::groupBackX&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Splash::groupBackX&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2006"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Splash::groupBackY&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Splash::groupBackY&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2006"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Splash::groupBackX&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Splash::groupBackX&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2026"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Splash::groupBackY&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Splash::groupBackY&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2026"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;vectorAntialias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;vectorAntialias&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2010"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;inShading&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;inShading&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2011"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;vectorAntialias&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;vectorAntialias&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2030"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;inShading&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;inShading&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2031"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;Splash&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;Splash&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2032"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;Splash&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;Splash&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2032"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2386"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;lineDashIdx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;lineDashIdx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2769"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;subpathStart&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;subpathStart&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2769"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nDashes&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nDashes&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2769"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2942"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2942"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3246"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3248"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3482"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3950"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3950"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3950"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3950"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4031"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4031"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;destPtr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;destPtr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4105"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xx&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xx&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;d1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;d1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4106"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;srcPtr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;srcPtr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4182"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4183"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ySrc0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ySrc0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4256"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ySrc1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ySrc1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4256"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y0&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y0&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;t&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;t&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4359"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;alphaPtr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;alphaPtr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4566"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;tt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;tt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4571"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;y&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;y&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="5910"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;mono1Ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;mono1Ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="6051"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;matrix&amp;#039; can be declared with const" verbose="Parameter &amp;#039;matrix&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="1992"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;mat&amp;#039; can be declared with const" verbose="Parameter &amp;#039;mat&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3474"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;mat&amp;#039; can be declared with const" verbose="Parameter &amp;#039;mat&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4562"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;p&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="3264"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ySrc0&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ySrc0&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="4306"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;blitCorrectedAlpha&amp;#039; is never used." verbose="The function &amp;#039;blitCorrectedAlpha&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="6522"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;dumpXPath&amp;#039; is never used." verbose="The function &amp;#039;dumpXPath&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="7174"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getBlendFunc&amp;#039; is never used." verbose="The function &amp;#039;getBlendFunc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2075"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getClip&amp;#039; is never used." verbose="The function &amp;#039;getClip&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2123"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getFillAlpha&amp;#039; is never used." verbose="The function &amp;#039;getFillAlpha&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getInKnockoutGroup&amp;#039; is never used." verbose="The function &amp;#039;getInKnockoutGroup&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2135"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getInNonIsolatedGroup&amp;#039; is never used." verbose="The function &amp;#039;getInNonIsolatedGroup&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2131"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getLineDashLength&amp;#039; is never used." verbose="The function &amp;#039;getLineDashLength&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2111"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getLineDashPhase&amp;#039; is never used." verbose="The function &amp;#039;getLineDashPhase&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2115"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getStrokeAlpha&amp;#039; is never used." verbose="The function &amp;#039;getStrokeAlpha&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2079"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;limitRectToClipRect&amp;#039; is never used." verbose="The function &amp;#039;limitRectToClipRect&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="7129"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;setEnablePathSimplification&amp;#039; is never used." verbose="The function &amp;#039;setEnablePathSimplification&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2250"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;setInTransparencyGroup&amp;#039; is never used." verbose="The function &amp;#039;setInTransparencyGroup&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.cc" line="2230"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;Splash::dumpXPath&amp;#039;" verbose="Unused private function: &amp;#039;Splash::dumpXPath&amp;#039;" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.h" line="425"/>
        </error>
        <error id="unusedPrivateFunction" severity="style" msg="Unused private function: &amp;#039;Splash::upscaleMask&amp;#039;" verbose="Unused private function: &amp;#039;Splash::upscaleMask&amp;#039;" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10024/Splash.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10024\Splash.h" line="342"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;ASCII85Stream::c&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;ASCII85Stream::c&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1120"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;ASCII85Stream::b&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;ASCII85Stream::b&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1120"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWStream::inputBuf&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWStream::inputBuf&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1205"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWStream::table&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWStream::table&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1205"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWStream::prevCode&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWStream::prevCode&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1205"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWStream::newChar&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWStream::newChar&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1205"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::index&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::index&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::remain&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::remain&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::codeBuf&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::codeBuf&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::codeSize&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::codeSize&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::codeLengths&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::codeLengths&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;FlateStream::blockLen&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;FlateStream::blockLen&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4835"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWEncoder::table&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWEncoder::table&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5698"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWEncoder::nextSeq&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWEncoder::nextSeq&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5698"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWEncoder::codeLen&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWEncoder::codeLen&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5698"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;LZWEncoder::outBuf&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;LZWEncoder::outBuf&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5698"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;dict&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;dict&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="319"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="471"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;start&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;start&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="867"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;length&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;length&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="868"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;needFree&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;needFree&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="871"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;limited&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;limited&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="961"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;length&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;length&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="962"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1027"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1123"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1439"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;endOfLine&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;endOfLine&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1529"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;byteAlign&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;byteAlign&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1530"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5443"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5495"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;eof&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;eof&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5591"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;FileStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;FileStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="756"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;FileStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;FileStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="756"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;LZWStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;LZWStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1209"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;LZWStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;LZWStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1209"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;FlateStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;FlateStream&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4839"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;FlateStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;FlateStream&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4839"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SharedFile&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SharedFile&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="664"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;(code&amp;gt;&amp;gt;7)!=0&amp;#039; is always true" verbose="Condition &amp;#039;(code&amp;gt;&amp;gt;7)!=0&amp;#039; is always true" cwe="571" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2179" info="Condition &amp;#039;(code&amp;gt;&amp;gt;7)!=0&amp;#039; is always true"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2177" info="Assuming that condition &amp;#039;(code&amp;gt;&amp;gt;7)==0&amp;#039; is not redundant"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5257"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="73"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="87"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;imgLineSize&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;imgLineSize&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="350"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="411"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="518"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;inBits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;inBits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="544"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;outBits&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;outBits&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="544"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="545"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;kk&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;kk&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="545"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="797"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;k&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;k&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1141"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1283"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1397"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;m&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;m&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1457"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitsNeeded&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitsNeeded&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1598"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitsUsed&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitsUsed&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1598"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitsNeeded&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitsNeeded&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitsUsed&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitsUsed&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1638"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bitsAvail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bitsAvail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1678"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;byte&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;byte&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1678"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;code2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;code2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1765"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;b1i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;b1i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1766"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2075"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2110"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2169"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2244"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2582"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nAvail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nAvail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2821"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2821"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pY&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pY&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pCb&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pCb&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pCr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pCr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pR&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pR&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pG&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pG&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;pB&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;pB&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2880"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;run&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;run&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3151"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3152"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3201"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;scale&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;scale&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3493"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3494"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3690"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3718"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3734"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3734"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3759"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3859"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3898"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;id&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;id&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3936"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;prec&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;prec&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3999"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3999"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;index&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;index&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4032"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4088"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4089"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4090"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5294"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5519"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5779"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;dictA&amp;#039; can be declared with const" verbose="Parameter &amp;#039;dictA&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="318"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;lengths&amp;#039; can be declared with const" verbose="Parameter &amp;#039;lengths&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5244"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="96"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;bitsAvail&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;bitsAvail&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1694"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="3759"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;n&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;n&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5531"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;t&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;t&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5532"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;c&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="5649"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2461"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2475"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2482"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2512"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;nAvail&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;nAvail&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2424"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2424"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;c&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;c&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2483"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;n&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;n&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2483"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;addFilters&amp;#039; is never used." verbose="The function &amp;#039;addFilters&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="128"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getStart&amp;#039; is never used." verbose="The function &amp;#039;getStart&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1011"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;makeSubStream&amp;#039; is never used." verbose="The function &amp;#039;makeSubStream&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="975"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;moveStart&amp;#039; is never used." verbose="The function &amp;#039;moveStart&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1016"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;readTrailer&amp;#039; is never used." verbose="The function &amp;#039;readTrailer&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="4148"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;setPos&amp;#039; is never used." verbose="The function &amp;#039;setPos&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="1007"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;skipLine&amp;#039; is never used." verbose="The function &amp;#039;skipLine&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="454"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &amp;#039;close&amp;#039; is called from destructor &amp;#039;~DCTStream()&amp;#039; at line 2642. Dynamic binding is not used." verbose="Virtual function &amp;#039;close&amp;#039; is called from destructor &amp;#039;~DCTStream()&amp;#039; at line 2642. Dynamic binding is not used." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="733" info="close is a virtual function"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.cc" line="2642" info="Calling close"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;FilterStream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;FilterStream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="208"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ASCIIHexStream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ASCIIHexStream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="479"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ASCII85Stream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ASCII85Stream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="507"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RunLengthStream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RunLengthStream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="585"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;EOFStream&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;EOFStream&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="923"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ASCIIHexEncoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ASCIIHexEncoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1016"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ASCII85Encoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ASCII85Encoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1060"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;RunLengthEncoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;RunLengthEncoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1104"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;LZWEncoder&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;LZWEncoder&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1154"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="173" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="119" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="174" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBaseStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBaseStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="177" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="128" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getUndecodedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getUndecodedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="180" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="132" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getDict&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getDict&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="183" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="135" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="210" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="89" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="211" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="214" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="119" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBaseStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBaseStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="215" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="128" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getUndecodedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getUndecodedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="218" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="132" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getDict&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getDict&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="221" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="135" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getNextStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getNextStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="224" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="147" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="344" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="345" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="171" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="347" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="350" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="351" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="355" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="359" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="360" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="363" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="173" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="364" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="191" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="367" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="192" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="394" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="395" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="171" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="397" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="400" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="401" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="89" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="402" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="406" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="410" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="411" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="414" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="173" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="415" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="191" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="418" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="192" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="445" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;makeSubStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="446" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="171" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="448" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEmbedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEmbedStream&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="451" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="81" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="454" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="455" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="456" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="457" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="458" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="114" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;setPos&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="461" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="173" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="462" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="191" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;moveStart&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="463" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="192" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="481" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="482" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="485" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="486" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="490" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="491" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="492" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="509" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="510" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="513" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="514" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="518" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="519" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="520" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="540" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="541" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="544" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="545" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="546" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getRawChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getRawChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="547" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="99" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="548" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="549" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="550" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="587" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="588" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="591" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="592" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="596" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="600" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="601" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="602" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="627" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="628" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="631" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="632" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="633" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="634" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="635" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="636" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="728" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="729" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="732" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;close&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="733" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="210" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="734" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="735" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="736" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="737" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="738" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="867" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="868" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="871" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="872" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="873" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getRawChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getRawChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="874" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="99" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="875" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="876" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="877" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="925" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="926" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="929" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="930" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="933" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getBlock&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="936" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="103" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="939" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="943" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="957" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="958" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="961" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="962" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="963" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="964" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="968" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="987" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="988" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="991" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="992" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="993" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="994" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="998" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="999" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="138" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1018" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1019" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1022" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1023" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1027" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1031" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1035" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1038" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="138" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1062" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1063" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1066" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1067" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1071" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1075" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1079" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1082" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="138" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1106" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1107" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1110" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1111" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1115" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1119" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1123" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1126" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="138" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1156" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="76" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getKind&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1157" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="79" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;reset&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1160" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="86" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1161" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="92" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;lookChar&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1162" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="95" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getPSFilter&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1163" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="122" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isBinary&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1167" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="125" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isEncoder&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10025/Stream.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="1170" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10025\Stream.h" line="138" info="Virtual function in base class"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::m&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::m&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::n&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::n&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::domain&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::domain&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="38"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Function::range&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Function::range&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="38"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="215"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="504"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="630"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;ok&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;ok&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="907"/>
        </error>
        <error id="noCopyConstructor" severity="warning" msg="Class &amp;#039;PostScriptFunction&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;PostScriptFunction&amp;#039; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="926"/>
        </error>
        <error id="noOperatorEq" severity="warning" msg="Class &amp;#039;PostScriptFunction&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &amp;#039;PostScriptFunction&amp;#039; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="926"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="965"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="1126"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="1139"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="1153"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="420"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="750"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="978"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.cc" line="1028"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SampledFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SampledFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="160"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;ExponentialFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;ExponentialFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="211"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;StitchingFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;StitchingFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="257"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;PostScriptFunction&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;PostScriptFunction&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="293"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="105" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="108" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="111" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="112" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="128" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="131" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="134" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="135" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="188" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="191" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="194" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="195" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="228" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="231" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="234" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="235" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;copy&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="276" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="47" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;getType&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="279" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="55" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;transform&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="282" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="82" info="Virtual function in base class"/>
        </error>
        <error id="missingOverride" severity="style" msg="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." verbose="The function &amp;#039;isOk&amp;#039; overrides a function in a base class but is not marked with a &amp;#039;override&amp;#039; specifier." file0="test/bug-hunting/cve/CVE-2019-10026/Function.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="283" info="Function in derived class"/>
            <location file="test\bug-hunting\cve\CVE-2019-10026\Function.h" line="84" info="Virtual function in base class"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" verbose="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" cwe="570" file0="test/bug-hunting/cve/CVE-2019-12977/jp2.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="573" info="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false"/>
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="568" info="Assignment &amp;#039;*version=&amp;#039;\0&amp;#039;&amp;#039;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" verbose="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" cwe="570" file0="test/bug-hunting/cve/CVE-2019-12977/jp2.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="586" info="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false"/>
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="568" info="Assignment &amp;#039;*version=&amp;#039;\0&amp;#039;&amp;#039;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" verbose="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" cwe="570" file0="test/bug-hunting/cve/CVE-2019-12977/jp2.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="599" info="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false"/>
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="568" info="Assignment &amp;#039;*version=&amp;#039;\0&amp;#039;&amp;#039;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" verbose="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" cwe="570" file0="test/bug-hunting/cve/CVE-2019-12977/jp2.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="612" info="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false"/>
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="568" info="Assignment &amp;#039;*version=&amp;#039;\0&amp;#039;&amp;#039;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" verbose="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" cwe="570" file0="test/bug-hunting/cve/CVE-2019-12977/jp2.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="625" info="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false"/>
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="568" info="Assignment &amp;#039;*version=&amp;#039;\0&amp;#039;&amp;#039;, assigned value is 0"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" verbose="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false" cwe="570" file0="test/bug-hunting/cve/CVE-2019-12977/jp2.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="638" info="Condition &amp;#039;*version!=&amp;#039;\0&amp;#039;&amp;#039; is always false"/>
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="568" info="Assignment &amp;#039;*version=&amp;#039;\0&amp;#039;&amp;#039;, assigned value is 0"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;RegisterJP2Image&amp;#039; is never used." verbose="The function &amp;#039;RegisterJP2Image&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="560"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;UnregisterJP2Image&amp;#039; is never used." verbose="The function &amp;#039;UnregisterJP2Image&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-12977\jp2.c" line="672"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;page.x&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;page.x&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-13454/layer.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1994" info="page.x is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1984" info="page.x is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;page.y&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;page.y&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-13454/layer.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1995" info="page.y is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1985" info="page.y is assigned"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;p&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;p&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-13454/layer.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="169"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;q&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;q&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-13454/layer.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="170"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;cleared&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;cleared&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-13454/layer.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1240"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;CoalesceImages&amp;#039; is never used." verbose="The function &amp;#039;CoalesceImages&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="229"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;CompareImagesLayers&amp;#039; is never used." verbose="The function &amp;#039;CompareImagesLayers&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="743"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;CompositeLayers&amp;#039; is never used." verbose="The function &amp;#039;CompositeLayers&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1773"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;DisposeImages&amp;#039; is never used." verbose="The function &amp;#039;DisposeImages&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="377"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;MergeImageLayers&amp;#039; is never used." verbose="The function &amp;#039;MergeImageLayers&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1901"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;OptimizeImageLayers&amp;#039; is never used." verbose="The function &amp;#039;OptimizeImageLayers&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1389"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;OptimizeImageTransparency&amp;#039; is never used." verbose="The function &amp;#039;OptimizeImageTransparency&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1459"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;OptimizePlusImageLayers&amp;#039; is never used." verbose="The function &amp;#039;OptimizePlusImageLayers&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1422"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;RemoveDuplicateLayers&amp;#039; is never used." verbose="The function &amp;#039;RemoveDuplicateLayers&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1587"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;RemoveZeroDelayLayers&amp;#039; is never used." verbose="The function &amp;#039;RemoveZeroDelayLayers&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-13454\layer.c" line="1668"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="test/bug-hunting/cve/CVE-2019-14249/dwarf_elf_load_headers.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="1204"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="test/bug-hunting/cve/CVE-2019-14249/dwarf_elf_load_headers.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="1407"/>
        </error>
        <error id="strdupCalled" severity="style" msg="Obsolete function &amp;#039;strdup&amp;#039; called. It is recommended to use &amp;#039;_strdup&amp;#039; instead." verbose="Obsolete function &amp;#039;strdup&amp;#039; called. It is recommended to use &amp;#039;_strdup&amp;#039; instead." cwe="477" file0="test/bug-hunting/cve/CVE-2019-14249/dwarf_elf_load_headers.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="191"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;res&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;res&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14249/dwarf_elf_load_headers.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="1816"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;count_out&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;count_out&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-14249/dwarf_elf_load_headers.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="1204"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;count_out&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;count_out&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-14249/dwarf_elf_load_headers.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="1407"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-14249/dwarf_elf_load_headers.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="1815"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;res&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;res&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-14249/dwarf_elf_load_headers.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="1816"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;_dwarf_load_elf_header&amp;#039; is never used." verbose="The function &amp;#039;_dwarf_load_elf_header&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="1717"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;_dwarf_load_elf_rela&amp;#039; is never used." verbose="The function &amp;#039;_dwarf_load_elf_rela&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="1447"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;_dwarf_load_elf_sectheaders&amp;#039; is never used." verbose="The function &amp;#039;_dwarf_load_elf_sectheaders&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="2080"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;_dwarf_load_elf_symstr&amp;#039; is never used." verbose="The function &amp;#039;_dwarf_load_elf_symstr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="991"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;_dwarf_load_elf_symtab_symbols&amp;#039; is never used." verbose="The function &amp;#039;_dwarf_load_elf_symtab_symbols&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="757"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;dwarf_construct_elf_access&amp;#039; is never used." verbose="The function &amp;#039;dwarf_construct_elf_access&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="158"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;dwarf_destruct_elf_access&amp;#039; is never used." verbose="The function &amp;#039;dwarf_destruct_elf_access&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14249\dwarf_elf_load_headers.c" line="201"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="2474"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." verbose="%d in format string (no. 1) requires &amp;#039;int&amp;#039; but the argument type is &amp;#039;unsigned int&amp;#039;." cwe="686" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="3922"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;unit&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;unit&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="797"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;drive&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;drive&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="798"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;delta&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;delta&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="921"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;drive&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;drive&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="949"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ready_date&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ready_date&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="1464"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;function&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;function&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="1465"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="1668"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;block&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;block&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="2233"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;buffer&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="2405"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;hard_sectors&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;hard_sectors&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="2488"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;end_sector&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;end_sector&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="2489"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="2957"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="3011"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ret&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ret&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="3063"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cnt&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cnt&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="3229"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;cf&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;cf&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="4161"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;param&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;param&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="4394"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="2475"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;fdc&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;fdc&amp;#039; shadows outer variable" cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="741" info="Shadow variable"/>
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="596" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;fdc&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;fdc&amp;#039; shadows outer variable" cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="922" info="Shadow variable"/>
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="596" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &amp;#039;cmd&amp;#039; shadows outer argument" verbose="Local variable &amp;#039;cmd&amp;#039; shadows outer argument" cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="3066" info="Shadow variable"/>
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="3060" info="Shadowed declaration"/>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &amp;#039;bdev&amp;#039; shadows outer argument" verbose="Local variable &amp;#039;bdev&amp;#039; shadows outer argument" cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="3253" info="Shadow variable"/>
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="3227" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;current_drive&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;current_drive&amp;#039; shadows outer variable" cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="4335" info="Shadow variable"/>
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="601" info="Shadowed declaration"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;fdc&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;fdc&amp;#039; shadows outer variable" cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="4456" info="Shadow variable"/>
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="596" info="Shadowed declaration"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;t&amp;#039; can be declared with const" verbose="Parameter &amp;#039;t&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="907"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;param&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;param&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1." cwe="467" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="3072"/>
        </error>
        <error id="arithOperationsOnVoidPointer" severity="portability" msg="&amp;#039;param&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined." verbose="&amp;#039;param&amp;#039; is of type &amp;#039;void *&amp;#039;. When using void pointers in calculations, the behaviour is undefined. Arithmetic operations on &amp;#039;void *&amp;#039; is a GNU C extension, which defines the &amp;#039;sizeof(void)&amp;#039; to be 1." cwe="467" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="3128"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;ptr&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="4894"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;floppy&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;floppy&amp;#039; shadows outer variable" cwe="398" file0="test/bug-hunting/cve/CVE-2019-14284/floppy.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="2992" info="Shadow variable"/>
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="4890" info="Shadowed declaration"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;fd_chose_dma_mode&amp;#039; since the value of &amp;#039;fd_chose_dma_mode&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;fd_chose_dma_mode&amp;#039; since the value of &amp;#039;fd_chose_dma_mode&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="1909"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &amp;#039;fd_dma_setup&amp;#039; since the value of &amp;#039;fd_dma_setup&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &amp;#039;fd_dma_setup&amp;#039; since the value of &amp;#039;fd_dma_setup&amp;#039; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="1074"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;floppy_interrupt&amp;#039; is never used." verbose="The function &amp;#039;floppy_interrupt&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14284\floppy.c" line="1678"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;SplashOutputDev::t3FontCache&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;SplashOutputDev::t3FontCache&amp;#039; is not initialized in the constructor." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1310"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;gfxMode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;gfxMode&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="198"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;colorMode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;colorMode&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="285"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;r&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;r&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1154"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;fontID&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;fontID&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1208"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;colorMode&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;colorMode&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1317"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SplashOutFontFileID&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SplashOutFontFileID&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1154"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1159"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1245"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2029"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2041"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2053"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2068"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2194"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2200"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2202"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2790"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2976"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="3231"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="3350"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="3593"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;w1&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;w1&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2190"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;w2&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;w2&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2190"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;w3&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;w3&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2190"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;name&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;name&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2192"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;subpath&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;subpath&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2289"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;horiz&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;horiz&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2332"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;bbox&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;bbox&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2440"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;validBBox&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;validBBox&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2443"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;horiz&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;horiz&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2445"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xMin&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xMin&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2446"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;yMin&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;yMin&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2446"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;xMax&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;xMax&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2446"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;yMax&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;yMax&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2446"/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;T3FontCache&amp;#039; argument order different: declaration &amp;#039;fontID, m11A, m12A, m21A, m22A, glyphXA, glyphYA, glyphWA, glyphHA, aa, validBBoxA&amp;#039; definition &amp;#039;fontIDA, m11A, m12A, m21A, m22A, glyphXA, glyphYA, glyphWA, glyphHA, validBBoxA, aa&amp;#039;" verbose="Function &amp;#039;T3FontCache&amp;#039; argument order different: declaration &amp;#039;fontID, m11A, m12A, m21A, m22A, glyphXA, glyphYA, glyphWA, glyphHA, aa, validBBoxA&amp;#039; definition &amp;#039;fontIDA, m11A, m12A, m21A, m22A, glyphXA, glyphYA, glyphWA, glyphHA, validBBoxA, aa&amp;#039;" cwe="683" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1203" info=""/>
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1179" info=""/>
        </error>
        <error id="funcArgOrderDifferent" severity="warning" msg="Function &amp;#039;getMatteColor&amp;#039; argument order different: declaration &amp;#039;colorMode, colorMap, matteColor, splashMatteColor&amp;#039; definition &amp;#039;colorMode, colorMap, matteColorIn, matteColor&amp;#039;" verbose="Function &amp;#039;getMatteColor&amp;#039; argument order different: declaration &amp;#039;colorMode, colorMap, matteColor, splashMatteColor&amp;#039; definition &amp;#039;colorMode, colorMap, matteColorIn, matteColor&amp;#039;" cwe="683" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1743" info=""/>
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.h" line="472" info=""/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dest[i]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dest[i]&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="3408"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;i&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;i&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1797"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;dest[i]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;dest[i]&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="3405"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2936"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="3134"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/bug-hunting/cve/CVE-2019-14494/SplashOutputDev.cc" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="3176"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;axialShadedFill&amp;#039; is never used." verbose="The function &amp;#039;axialShadedFill&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4851"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;beginTextObject&amp;#039; is never used." verbose="The function &amp;#039;beginTextObject&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2772"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;beginType3Char&amp;#039; is never used." verbose="The function &amp;#039;beginType3Char&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2435"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;checkTransparencyGroup&amp;#039; is never used." verbose="The function &amp;#039;checkTransparencyGroup&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4079"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;clearPatternOpacity&amp;#039; is never used." verbose="The function &amp;#039;clearPatternOpacity&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1874"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;clearSoftMask&amp;#039; is never used." verbose="The function &amp;#039;clearSoftMask&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4439"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;clipToStrokePath&amp;#039; is never used." verbose="The function &amp;#039;clipToStrokePath&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2277"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;drawChar&amp;#039; is never used." verbose="The function &amp;#039;drawChar&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2323"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;drawImageMask&amp;#039; is never used." verbose="The function &amp;#039;drawImageMask&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2808"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;drawMaskedImage&amp;#039; is never used." verbose="The function &amp;#039;drawMaskedImage&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="3702"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;endTextObject&amp;#039; is never used." verbose="The function &amp;#039;endTextObject&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2775"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;endType3Char&amp;#039; is never used." verbose="The function &amp;#039;endType3Char&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2591"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;eoClip&amp;#039; is never used." verbose="The function &amp;#039;eoClip&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2272"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;eoFill&amp;#039; is never used." verbose="The function &amp;#039;eoFill&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2257"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;functionShadedFill&amp;#039; is never used." verbose="The function &amp;#039;functionShadedFill&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4786"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getBitmapHeight&amp;#039; is never used." verbose="The function &amp;#039;getBitmapHeight&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4451"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getBitmapWidth&amp;#039; is never used." verbose="The function &amp;#039;getBitmapWidth&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4447"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;radialShadedFill&amp;#039; is never used." verbose="The function &amp;#039;radialShadedFill&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4860"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;setFreeTypeHinting&amp;#039; is never used." verbose="The function &amp;#039;setFreeTypeHinting&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4485"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;setPaperColor&amp;#039; is never used." verbose="The function &amp;#039;setPaperColor&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4443"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;setSoftMaskFromImageMask&amp;#039; is never used." verbose="The function &amp;#039;setSoftMaskFromImageMask&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2850"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;takeBitmap&amp;#039; is never used." verbose="The function &amp;#039;takeBitmap&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4455"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;testPosition&amp;#039; is never used." verbose="The function &amp;#039;testPosition&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="320"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;tilingPatternFill&amp;#039; is never used." verbose="The function &amp;#039;tilingPatternFill&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="4491"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;type3D0&amp;#039; is never used." verbose="The function &amp;#039;type3D0&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2614"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;type3D1&amp;#039; is never used." verbose="The function &amp;#039;type3D1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2622"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;unsetSoftMaskFromImageMask&amp;#039; is never used." verbose="The function &amp;#039;unsetSoftMaskFromImageMask&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="2901"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateAll&amp;#039; is never used." verbose="The function &amp;#039;updateAll&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1533"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateBlendMode&amp;#039; is never used." verbose="The function &amp;#039;updateBlendMode&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1852"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateFillOpacity&amp;#039; is never used." verbose="The function &amp;#039;updateFillOpacity&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1856"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateFillOverprint&amp;#039; is never used." verbose="The function &amp;#039;updateFillOverprint&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1878"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateFont&amp;#039; is never used." verbose="The function &amp;#039;updateFont&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1935"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateOverprintMode&amp;#039; is never used." verbose="The function &amp;#039;updateOverprintMode&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1886"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updatePatternOpacity&amp;#039; is never used." verbose="The function &amp;#039;updatePatternOpacity&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1870"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateStrokeOpacity&amp;#039; is never used." verbose="The function &amp;#039;updateStrokeOpacity&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1863"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateStrokeOverprint&amp;#039; is never used." verbose="The function &amp;#039;updateStrokeOverprint&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1882"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;updateTransfer&amp;#039; is never used." verbose="The function &amp;#039;updateTransfer&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14494\SplashOutputDev.cc" line="1890"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid sqrt() argument nr 1. The value is -1 but the valid values are &amp;#039;0.0:&amp;#039;." verbose="Invalid sqrt() argument nr 1. The value is -1 but the valid values are &amp;#039;0.0:&amp;#039;." cwe="628" file0="test/bug-hunting/cve/CVE-2019-14981/feature.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14981\feature.c" line="1685"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid sqrt() argument nr 1. The value is -1 but the valid values are &amp;#039;0.0:&amp;#039;." verbose="Invalid sqrt() argument nr 1. The value is -1 but the valid values are &amp;#039;0.0:&amp;#039;." cwe="628" file0="test/bug-hunting/cve/CVE-2019-14981/feature.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14981\feature.c" line="1687"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid sqrt() argument nr 1. The value is -1 but the valid values are &amp;#039;0.0:&amp;#039;." verbose="Invalid sqrt() argument nr 1. The value is -1 but the valid values are &amp;#039;0.0:&amp;#039;." cwe="628" file0="test/bug-hunting/cve/CVE-2019-14981/feature.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14981\feature.c" line="1689"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid sqrt() argument nr 1. The value is -1 but the valid values are &amp;#039;0.0:&amp;#039;." verbose="Invalid sqrt() argument nr 1. The value is -1 but the valid values are &amp;#039;0.0:&amp;#039;." cwe="628" file0="test/bug-hunting/cve/CVE-2019-14981/feature.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14981\feature.c" line="1692"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid sqrt() argument nr 1. The value is -1 but the valid values are &amp;#039;0.0:&amp;#039;." verbose="Invalid sqrt() argument nr 1. The value is -1 but the valid values are &amp;#039;0.0:&amp;#039;." cwe="628" file0="test/bug-hunting/cve/CVE-2019-14981/feature.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14981\feature.c" line="1695"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;CannyEdgeImage&amp;#039; is never used." verbose="The function &amp;#039;CannyEdgeImage&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14981\feature.c" line="237"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetImageFeatures&amp;#039; is never used." verbose="The function &amp;#039;GetImageFeatures&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14981\feature.c" line="622"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;HoughLineImage&amp;#039; is never used." verbose="The function &amp;#039;HoughLineImage&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14981\feature.c" line="1827"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;MeanShiftImage&amp;#039; is never used." verbose="The function &amp;#039;MeanShiftImage&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-14981\feature.c" line="2154"/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;blockData&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;blockData&amp;#039; might be accessed at non-zero index." cwe="758" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="1434" info=""/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="1406" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;blockData&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;blockData&amp;#039; might be accessed at non-zero index." cwe="758" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="1505" info=""/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="1471" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="warning" msg="The address of local variable &amp;#039;blockData&amp;#039; might be accessed at non-zero index." verbose="The address of local variable &amp;#039;blockData&amp;#039; might be accessed at non-zero index." cwe="758" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3380" info=""/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3367" info="Assuming condition is false"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3349" info="Address of variable taken here."/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;img&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;img&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="1561"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;winStride&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;winStride&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="1563"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;padding&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;padding&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="1564"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;img&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;img&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3272"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;padding&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;padding&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3274"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &amp;#039;init&amp;#039; is called from constructor &amp;#039;HOGCache(const HOGDescriptor*descriptor,const Mat&amp;amp;img,const Size&amp;amp;paddingTL,const Size&amp;amp;paddingBR,bool useCache,const Size&amp;amp;cacheStride)&amp;#039; at line 545. Dynamic binding is not used." verbose="Virtual function &amp;#039;init&amp;#039; is called from constructor &amp;#039;HOGCache(const HOGDescriptor*descriptor,const Mat&amp;amp;img,const Size&amp;amp;paddingTL,const Size&amp;amp;paddingBR,bool useCache,const Size&amp;amp;cacheStride)&amp;#039; at line 545. Dynamic binding is not used." file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="506" info="init is a virtual function"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="545" info="Calling init"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &amp;#039;cacheRow&amp;#039;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &amp;#039;cacheRow&amp;#039;. The initialized value is overwritten before it is read." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="787" info="cacheRow is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="786" info="cacheRow is initialized"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3486" info="nread is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3482" info="nread is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3489" info="nread is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3486" info="nread is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3491" info="nread is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3489" info="nread is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3493" info="nread is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3491" info="nread is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3495" info="nread is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3493" info="nread is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3498" info="nread is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3495" info="nread is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3502" info="nread is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3498" info="nread is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3505" info="nread is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3502" info="nread is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3507" info="nread is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3505" info="nread is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;nread&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3511" info="nread is overwritten"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3507" info="nread is assigned"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;nread&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;nread&amp;#039; is assigned a value that is never used." cwe="563" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="3511"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getDaimlerPeopleDetector&amp;#039; is never used." verbose="The function &amp;#039;getDaimlerPeopleDetector&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="2760"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getDefaultPeopleDetector&amp;#039; is never used." verbose="The function &amp;#039;getDefaultPeopleDetector&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\hog.cpp" line="1947"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &amp;#039;load&amp;#039; is called from constructor &amp;#039;HOGDescriptor(const String&amp;amp;filename)&amp;#039; at line 421. Dynamic binding is not used." verbose="Virtual function &amp;#039;load&amp;#039; is called from constructor &amp;#039;HOGDescriptor(const String&amp;amp;filename)&amp;#039; at line 421. Dynamic binding is not used." file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\opencv2\objdetect.hpp" line="470" info="load is a virtual function"/>
            <location file="test\bug-hunting\cve\CVE-2019-15939\opencv2\objdetect.hpp" line="421" info="Calling load"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;SimilarRects&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;SimilarRects&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\opencv2\objdetect.hpp" line="124"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;CascadeClassifier&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;CascadeClassifier&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\opencv2\objdetect.hpp" line="232"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Struct &amp;#039;HOGDescriptor&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Struct &amp;#039;HOGDescriptor&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="test/bug-hunting/cve/CVE-2019-15939/hog.cpp" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-15939\opencv2\objdetect.hpp" line="419"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;sCur.n==0&amp;#039; is always true" verbose="Condition &amp;#039;sCur.n==0&amp;#039; is always true" cwe="571" file0="test/bug-hunting/cve/CVE-2019-16168/where.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="3490" info="Condition &amp;#039;sCur.n==0&amp;#039; is always true"/>
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="3470" info="Assignment &amp;#039;sCur.n=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;iCur&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;iCur&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-16168/where.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="232"/>
        </error>
        <error id="integerOverflowCond" severity="warning" msg="Either the condition &amp;#039;nTabList==0&amp;#039; is redundant or there is signed integer overflow for expression &amp;#039;nTabList-1&amp;#039;." verbose="Either the condition &amp;#039;nTabList==0&amp;#039; is redundant or there is signed integer overflow for expression &amp;#039;nTabList-1&amp;#039;." cwe="190" file0="test/bug-hunting/cve/CVE-2019-16168/where.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="4654" info="Integer overflow"/>
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="4695" info="Assuming that condition &amp;#039;nTabList==0&amp;#039; is not redundant"/>
        </error>
        <error id="signConversionCond" severity="warning" msg="Expression &amp;#039;nTabList-1&amp;#039; can have a negative value. That is converted to an unsigned value and used in an unsigned calculation." verbose="Expression &amp;#039;nTabList-1&amp;#039; can have a negative value. That is converted to an unsigned value and used in an unsigned calculation." cwe="195" file0="test/bug-hunting/cve/CVE-2019-16168/where.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="4654" info="Negative value is converted to an unsigned value"/>
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="4695" info="Assuming that condition &amp;#039;nTabList==0&amp;#039; is not redundant"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;jj&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;jj&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/bug-hunting/cve/CVE-2019-16168/where.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="5071"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &amp;#039;ii&amp;#039; shadows outer variable" verbose="Local variable &amp;#039;ii&amp;#039; shadows outer variable" cwe="398" file0="test/bug-hunting/cve/CVE-2019-16168/where.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="5071" info="Shadow variable"/>
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="4602" info="Shadowed declaration"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3WhereBegin&amp;#039; is never used." verbose="The function &amp;#039;sqlite3WhereBegin&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="4583"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3WhereBreakLabel&amp;#039; is never used." verbose="The function &amp;#039;sqlite3WhereBreakLabel&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="117"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3WhereContinueLabel&amp;#039; is never used." verbose="The function &amp;#039;sqlite3WhereContinueLabel&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="108"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3WhereEnd&amp;#039; is never used." verbose="The function &amp;#039;sqlite3WhereEnd&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="5154"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3WhereIsDistinct&amp;#039; is never used." verbose="The function &amp;#039;sqlite3WhereIsDistinct&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="57"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3WhereIsOrdered&amp;#039; is never used." verbose="The function &amp;#039;sqlite3WhereIsOrdered&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="65"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3WhereIsSorted&amp;#039; is never used." verbose="The function &amp;#039;sqlite3WhereIsSorted&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="3935"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3WhereOkOnePass&amp;#039; is never used." verbose="The function &amp;#039;sqlite3WhereOkOnePass&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="138"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3WhereOrderByLimitOptLabel&amp;#039; is never used." verbose="The function &amp;#039;sqlite3WhereOrderByLimitOptLabel&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="92"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3WhereOutputRowCount&amp;#039; is never used." verbose="The function &amp;#039;sqlite3WhereOutputRowCount&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="49"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sqlite3_vtab_collation&amp;#039; is never used." verbose="The function &amp;#039;sqlite3_vtab_collation&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-16168\where.c" line="3256"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If ; is a macro then please configure it." file0="test/bug-hunting/cve/CVE-2019-19334/parser.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-19334\parser.c" line="894"/>
        </error>
        <error id="syntaxError" severity="error" msg="Code &amp;#039;std::ostream&amp;#039; is invalid C code. Use --std or --language to configure the language." verbose="Code &amp;#039;std::ostream&amp;#039; is invalid C code. Use --std or --language to configure the language." file0="test/bug-hunting/cve/CVE-2019-19888/jfif.c" sinceDate="12/3/2021">
            <location file="lib\color.h" line="41"/>
        </error>
        <error id="syntaxError" severity="error" msg="Code &amp;#039;std::string&amp;#039; is invalid C code. Use --std or --language to configure the language." verbose="Code &amp;#039;std::string&amp;#039; is invalid C code. Use --std or --language to configure the language." file0="test/bug-hunting/cve/CVE-2019-19888/jfif.c" sinceDate="12/3/2021">
            <location file="lib\color.h" line="43"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: newfile" verbose="Resource leak: newfile" cwe="775" file0="test/bug-hunting/cve/CVE-2019-7156/ole.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-7156\ole.c" line="64"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;oleBuf&amp;#039; can be declared with const" verbose="Parameter &amp;#039;oleBuf&amp;#039; can be declared with const" cwe="398" file0="test/bug-hunting/cve/CVE-2019-7156/ole.c" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-7156\ole.c" line="262"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ole_init&amp;#039; is never used." verbose="The function &amp;#039;ole_init&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-7156\ole.c" line="41"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ole_open&amp;#039; is never used." verbose="The function &amp;#039;ole_open&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-7156\ole.c" line="375"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;set_ole_func&amp;#039; is never used." verbose="The function &amp;#039;set_ole_func&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-7156\ole.c" line="582"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;set_std_func&amp;#039; is never used." verbose="The function &amp;#039;set_std_func&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\bug-hunting\cve\CVE-2019-7156\ole.c" line="600"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;!buf&amp;#039; is redundant or there is possible null pointer dereference: buf." verbose="Either the condition &amp;#039;!buf&amp;#039; is redundant or there is possible null pointer dereference: buf." cwe="476" file0="test/cfg/boost.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\boost.cpp" line="70" info="Null pointer dereference"/>
            <location file="test\cfg\boost.cpp" line="68" info="Assuming that condition &amp;#039;!buf&amp;#039; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &amp;#039;!buf&amp;#039; is redundant or there is possible null pointer dereference: buf." verbose="Either the condition &amp;#039;!buf&amp;#039; is redundant or there is possible null pointer dereference: buf." cwe="476" file0="test/cfg/boost.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\boost.cpp" line="77" info="Null pointer dereference"/>
            <location file="test\cfg\boost.cpp" line="75" info="Assuming that condition &amp;#039;!buf&amp;#039; is not redundant"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;boost_forceinline_test&amp;#039; is never used." verbose="The function &amp;#039;boost_forceinline_test&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\boost.cpp" line="17"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;boost_noinline_test&amp;#039; is never used." verbose="The function &amp;#039;boost_noinline_test&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\boost.cpp" line="20"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;boost_noreturn_test&amp;#039; is never used." verbose="The function &amp;#039;boost_noreturn_test&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\boost.cpp" line="23"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;macros&amp;#039; is never used." verbose="The function &amp;#039;macros&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\boost.cpp" line="80"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;throwexception&amp;#039; is never used." verbose="The function &amp;#039;throwexception&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\boost.cpp" line="66"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;throwexception2&amp;#039; is never used." verbose="The function &amp;#039;throwexception2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\boost.cpp" line="73"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &amp;lt;)" verbose="syntax error: &amp;lt;)" file0="test/cfg/bsd.c" sinceDate="12/3/2021">
            <location file="test\cfg\bsd.c" line="17"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error: &amp;lt;)" verbose="syntax error: &amp;lt;)" file0="test/cfg/gnu.c" sinceDate="12/3/2021">
            <location file="test\cfg\gnu.c" line="24"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="test/cfg/googletest.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\googletest.cpp" line="18"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="test/cfg/gtk.c" sinceDate="12/3/2021">
            <location file="test\cfg\gtk.c" line="21"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;arr[i]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;arr[i]&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/openmp.c" sinceDate="12/3/2021">
            <location file="test\cfg\openmp.c" line="19"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_omp_target_alloc&amp;#039; is never used." verbose="The function &amp;#039;memleak_omp_target_alloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\openmp.c" line="27"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="174"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="180"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="183"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: s" verbose="Resource leak: s" cwe="775" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="315"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="231"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &amp;#039;lib&amp;#039;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &amp;#039;lib&amp;#039;. The initialized value is overwritten before it is read." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="515" info="lib is overwritten"/>
            <location file="test\cfg\posix.c" line="512" info="lib is initialized"/>
        </error>
        <error id="constStatement" severity="warning" msg="Redundant code: Found a statement that begins with numeric constant." verbose="Redundant code: Found a statement that begins with numeric constant." cwe="398" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="185"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: strtok_arg1" verbose="Uninitialized variable: strtok_arg1" cwe="457" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="451"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: b" verbose="Uninitialized variable: b" cwe="457" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="480"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ret&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="224"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;addr&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;addr&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="259"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;f&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;f&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="274"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fp&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="281"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;leak1&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;leak1&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="299"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;leak1&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;leak1&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="306"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;s&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;s&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="313"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fd&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fd&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="320"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fd&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fd&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="327"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;buffer&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;buffer&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="424"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;access_ret&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;access_ret&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="441"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;b&amp;#039; is not assigned a value." verbose="Variable &amp;#039;b&amp;#039; is not assigned a value." cwe="665" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="478"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;sym&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;sym&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/posix.c" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="519"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;asctime_r_test&amp;#039; is never used." verbose="The function &amp;#039;asctime_r_test&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="528"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ctime_r_test&amp;#039; is never used." verbose="The function &amp;#039;ctime_r_test&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="559"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;dl&amp;#039; is never used." verbose="The function &amp;#039;dl&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="510"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_isascii&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_isascii&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="87"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArg_close&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArg_close&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="384"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_getaddrinfo&amp;#039; is never used." verbose="The function &amp;#039;memleak_getaddrinfo&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="247"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_mmap&amp;#039; is never used." verbose="The function &amp;#039;memleak_mmap&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="255"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_mmap2&amp;#039; is never used." verbose="The function &amp;#039;memleak_mmap2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="263"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_scandir&amp;#039; is never used." verbose="The function &amp;#039;memleak_scandir&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="115"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;no_memleak_scandir&amp;#039; is never used." verbose="The function &amp;#039;no_memleak_scandir&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="134"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;no_resourceLeak_mkstemp_01&amp;#039; is never used." verbose="The function &amp;#039;no_resourceLeak_mkstemp_01&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="285"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;no_resourceLeak_mkstemp_02&amp;#039; is never used." verbose="The function &amp;#039;no_resourceLeak_mkstemp_02&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="291"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;noleak&amp;#039; is never used." verbose="The function &amp;#039;noleak&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="331"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_putenv&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_putenv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="105"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_bcopy&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_bcopy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="40"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_memccpy&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_memccpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="52"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_stpcpy&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_stpcpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="32"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_stpncpy&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_stpncpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="63"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_swab&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_swab&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="79"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_wcpncpy&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_wcpncpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="71"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_fdopen&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_fdopen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="271"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_fdopendir&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_fdopendir&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="296"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_mkstemp&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_mkstemp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="278"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_open1&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_open1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="317"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_open2&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_open2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="324"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_opendir&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_opendir&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="303"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;timet_h&amp;#039; is never used." verbose="The function &amp;#039;timet_h&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="487"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_getcwd&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_getcwd&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="466"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_putenv&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_putenv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="95"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_types&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_types&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\posix.c" line="475"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;arr[10]&amp;#039; accessed at index 65, which is out of bounds." verbose="Array &amp;#039;arr[10]&amp;#039; accessed at index 65, which is out of bounds." cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="142" info="Array index out of bounds"/>
            <location file="test\cfg\std.c" line="138" info="Assignment &amp;#039;c=&amp;#039;A&amp;#039;&amp;#039;, assigned value is 65"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;pAlloc1[16]&amp;#039; accessed at index 16, which is out of bounds." verbose="Array &amp;#039;pAlloc1[16]&amp;#039; accessed at index 16, which is out of bounds." cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="150"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;pAlloc2[9]&amp;#039; accessed at index 9, which is out of bounds." verbose="Array &amp;#039;pAlloc2[9]&amp;#039; accessed at index 9, which is out of bounds." cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="156"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;pAlloc2[8]&amp;#039; accessed at index 8, which is out of bounds." verbose="Array &amp;#039;pAlloc2[8]&amp;#039; accessed at index 8, which is out of bounds." cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="163"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;pAlloc2[20]&amp;#039; accessed at index 20, which is out of bounds." verbose="Array &amp;#039;pAlloc2[20]&amp;#039; accessed at index 20, which is out of bounds." cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="168"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;pAlloc3[6]&amp;#039; accessed at index 6, which is out of bounds." verbose="Array &amp;#039;pAlloc3[6]&amp;#039; accessed at index 6, which is out of bounds." cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="174"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;pAlloc3[9]&amp;#039; accessed at index 9, which is out of bounds." verbose="Array &amp;#039;pAlloc3[9]&amp;#039; accessed at index 9, which is out of bounds." cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="179"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="33"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="37"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="42"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="47"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="49"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="55"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="58"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="71"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="76"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="79"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: pAlloc1" verbose="Buffer is accessed out of bounds: pAlloc1" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="84" info="Buffer overrun"/>
            <location file="test\cfg\std.c" line="81" info="Assign pAlloc1, buffer with size 16"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: dest" verbose="Buffer is accessed out of bounds: dest" inconclusive="true" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3566"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: dest" verbose="Buffer is accessed out of bounds: dest" inconclusive="true" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3568"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: dest" verbose="Buffer is accessed out of bounds: dest" inconclusive="true" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3577"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: dest" verbose="Buffer is accessed out of bounds: dest" inconclusive="true" cwe="788" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3579"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function aligned_alloc() is not used." verbose="Return value of function aligned_alloc() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="117"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function feof() is not used." verbose="Return value of function feof() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="212"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function ferror() is not used." verbose="Return value of function ferror() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="221"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function strchr() is not used." verbose="Return value of function strchr() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="251"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function wcschr() is not used." verbose="Return value of function wcschr() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="254"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function strlen() is not used." verbose="Return value of function strlen() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="257"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function wcslen() is not used." verbose="Return value of function wcslen() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="260"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function strspn() is not used." verbose="Return value of function strspn() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="267"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function wcsspn() is not used." verbose="Return value of function wcsspn() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="270"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function strcspn() is not used." verbose="Return value of function strcspn() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="273"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function wcscspn() is not used." verbose="Return value of function wcscspn() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="276"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function strcoll() is not used." verbose="Return value of function strcoll() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="279"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function wcscoll() is not used." verbose="Return value of function wcscoll() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="282"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function strcmp() is not used." verbose="Return value of function strcmp() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="289"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function wcscmp() is not used." verbose="Return value of function wcscmp() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="292"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function strncmp() is not used." verbose="Return value of function strncmp() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="315"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function wcsncmp() is not used." verbose="Return value of function wcsncmp() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="318"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function strstr() is not used." verbose="Return value of function strstr() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="321"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function wcsstr() is not used." verbose="Return value of function wcsstr() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="324"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function feof() is not used." verbose="Return value of function feof() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="456"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function ferror() is not used." verbose="Return value of function ferror() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="467"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function abs() is not used." verbose="Return value of function abs() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4395"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function abs() is not used." verbose="Return value of function abs() is not used." cwe="252" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4397"/>
        </error>
        <error id="asctimeCalled" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." cwe="477" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="705"/>
        </error>
        <error id="asctime_sCalled" severity="style" msg="Obsolete function &amp;#039;asctime_s&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime_s&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." cwe="477" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="714"/>
        </error>
        <error id="getsCalled" severity="warning" msg="Obsolete function &amp;#039;gets&amp;#039; called. It is recommended to use &amp;#039;fgets&amp;#039; or &amp;#039;gets_s&amp;#039; instead." verbose="The obsolete function &amp;#039;gets&amp;#039; is called. With &amp;#039;gets&amp;#039; you&amp;#039;ll get a buffer overrun if the input data exceeds the size of the buffer. It is recommended to use the functions &amp;#039;fgets&amp;#039; or &amp;#039;gets_s&amp;#039; instead." cwe="477" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1855"/>
        </error>
        <error id="allocaCalled" severity="warning" msg="Obsolete function &amp;#039;alloca&amp;#039; called. In C99 and later it is recommended to use a variable length array instead." verbose="The obsolete function &amp;#039;alloca&amp;#039; is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function &amp;#039;alloca&amp;#039; is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2614"/>
        </error>
        <error id="asctime_sCalled" severity="style" msg="Obsolete function &amp;#039;asctime_s&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime_s&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." cwe="477" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4242"/>
        </error>
        <error id="asctimeCalled" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." cwe="477" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4405"/>
        </error>
        <error id="asctimeCalled" severity="style" msg="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." cwe="477" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4408"/>
        </error>
        <error id="asctime_sCalled" severity="style" msg="Obsolete function &amp;#039;asctime_s&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime_s&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." cwe="477" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4417"/>
        </error>
        <error id="asctime_sCalled" severity="style" msg="Obsolete function &amp;#039;asctime_s&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;asctime_s&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." cwe="477" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4420"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid acoshf() argument nr 1. The value is 0.999 but the valid values are &amp;#039;1.0:&amp;#039;." verbose="Invalid acoshf() argument nr 1. The value is 0.999 but the valid values are &amp;#039;1.0:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="647" info="Invalid argument"/>
            <location file="test\cfg\std.c" line="645" info="Assignment &amp;#039;f=0.999f&amp;#039;, assigned value is 0.999"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid acosh() argument nr 1. The value is 0.999 but the valid values are &amp;#039;1.0:&amp;#039;." verbose="Invalid acosh() argument nr 1. The value is 0.999 but the valid values are &amp;#039;1.0:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="653" info="Invalid argument"/>
            <location file="test\cfg\std.c" line="651" info="Assignment &amp;#039;d=0.999&amp;#039;, assigned value is 0.999"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid acoshl() argument nr 1. The value is 0.999 but the valid values are &amp;#039;1.0:&amp;#039;." verbose="Invalid acoshl() argument nr 1. The value is 0.999 but the valid values are &amp;#039;1.0:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="659" info="Invalid argument"/>
            <location file="test\cfg\std.c" line="657" info="Assignment &amp;#039;ld=0.999L&amp;#039;, assigned value is 0.999"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid atanhf() argument nr 1. The value is 1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." verbose="Invalid atanhf() argument nr 1. The value is 1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="668" info="Invalid argument"/>
            <location file="test\cfg\std.c" line="666" info="Assignment &amp;#039;f=1.00001f&amp;#039;, assigned value is 1.00001"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid atanhf() argument nr 1. The value is -1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." verbose="Invalid atanhf() argument nr 1. The value is -1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="675" info="Invalid argument"/>
            <location file="test\cfg\std.c" line="673" info="Assignment &amp;#039;f=-1.00001f&amp;#039;, assigned value is -1.00001"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid atanh() argument nr 1. The value is 1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." verbose="Invalid atanh() argument nr 1. The value is 1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="679" info="Invalid argument"/>
            <location file="test\cfg\std.c" line="677" info="Assignment &amp;#039;d=1.00001&amp;#039;, assigned value is 1.00001"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid atanh() argument nr 1. The value is -1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." verbose="Invalid atanh() argument nr 1. The value is -1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="686" info="Invalid argument"/>
            <location file="test\cfg\std.c" line="684" info="Assignment &amp;#039;d=-1.00001&amp;#039;, assigned value is -1.00001"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid atanhl() argument nr 1. The value is 1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." verbose="Invalid atanhl() argument nr 1. The value is 1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="690" info="Invalid argument"/>
            <location file="test\cfg\std.c" line="688" info="Assignment &amp;#039;ld=1.00001L&amp;#039;, assigned value is 1.00001"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid atanhl() argument nr 1. The value is -1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." verbose="Invalid atanhl() argument nr 1. The value is -1.00001 but the valid values are &amp;#039;-1.0:1.0&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="697" info="Invalid argument"/>
            <location file="test\cfg\std.c" line="695" info="Assignment &amp;#039;ld=-1.00001L&amp;#039;, assigned value is -1.00001"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid strchr() argument nr 2. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid strchr() argument nr 2. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3134"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid strchr() argument nr 2. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid strchr() argument nr 2. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3141"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid log10f() argument nr 1. The value is 0 but the valid values are &amp;#039;1.4013e-45:&amp;#039;." verbose="Invalid log10f() argument nr 1. The value is 0 but the valid values are &amp;#039;1.4013e-45:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3148"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid log10() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." verbose="Invalid log10() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3155"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid log10l() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." verbose="Invalid log10l() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3162"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid logf() argument nr 1. The value is 0 but the valid values are &amp;#039;1.4013e-45:&amp;#039;." verbose="Invalid logf() argument nr 1. The value is 0 but the valid values are &amp;#039;1.4013e-45:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3172"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid log() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." verbose="Invalid log() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3179"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid logl() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." verbose="Invalid logl() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3186"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid log2f() argument nr 1. The value is 0 but the valid values are &amp;#039;1.4013e-45:&amp;#039;." verbose="Invalid log2f() argument nr 1. The value is 0 but the valid values are &amp;#039;1.4013e-45:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3196"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid log2() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." verbose="Invalid log2() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3203"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid log2l() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." verbose="Invalid log2l() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3210"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid abs() argument nr 1. A non-boolean value is required." verbose="Invalid abs() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4111"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid abs() argument nr 1. A non-boolean value is required." verbose="Invalid abs() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4113"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid abs() argument nr 1. A non-boolean value is required." verbose="Invalid abs() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4115"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid tolower() argument nr 1. A non-boolean value is required." verbose="Invalid tolower() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4121"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid tolower() argument nr 1. A non-boolean value is required." verbose="Invalid tolower() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4123"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid toupper() argument nr 1. A non-boolean value is required." verbose="Invalid toupper() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4129"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid toupper() argument nr 1. A non-boolean value is required." verbose="Invalid toupper() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4131"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid iscntrl() argument nr 1. A non-boolean value is required." verbose="Invalid iscntrl() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4137"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid iscntrl() argument nr 1. A non-boolean value is required." verbose="Invalid iscntrl() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4139"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isalpha() argument nr 1. A non-boolean value is required." verbose="Invalid isalpha() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4145"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isalpha() argument nr 1. A non-boolean value is required." verbose="Invalid isalpha() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4147"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isalnum() argument nr 1. A non-boolean value is required." verbose="Invalid isalnum() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4153"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isalnum() argument nr 1. A non-boolean value is required." verbose="Invalid isalnum() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4155"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isspace() argument nr 1. A non-boolean value is required." verbose="Invalid isspace() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4161"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isspace() argument nr 1. A non-boolean value is required." verbose="Invalid isspace() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4163"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isdigit() argument nr 1. A non-boolean value is required." verbose="Invalid isdigit() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4169"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isdigit() argument nr 1. A non-boolean value is required." verbose="Invalid isdigit() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4171"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isgraph() argument nr 1. A non-boolean value is required." verbose="Invalid isgraph() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4177"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isgraph() argument nr 1. A non-boolean value is required." verbose="Invalid isgraph() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4179"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid islower() argument nr 1. A non-boolean value is required." verbose="Invalid islower() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4185"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid islower() argument nr 1. A non-boolean value is required." verbose="Invalid islower() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4187"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid iswcntrl() argument nr 1. A non-boolean value is required." verbose="Invalid iswcntrl() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4193"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid iswcntrl() argument nr 1. A non-boolean value is required." verbose="Invalid iswcntrl() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4195"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isprint() argument nr 1. A non-boolean value is required." verbose="Invalid isprint() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4201"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isprint() argument nr 1. A non-boolean value is required." verbose="Invalid isprint() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4203"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isblank() argument nr 1. A non-boolean value is required." verbose="Invalid isblank() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4209"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isblank() argument nr 1. A non-boolean value is required." verbose="Invalid isblank() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4211"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid ispunct() argument nr 1. A non-boolean value is required." verbose="Invalid ispunct() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4217"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid ispunct() argument nr 1. A non-boolean value is required." verbose="Invalid ispunct() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4219"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isupper() argument nr 1. A non-boolean value is required." verbose="Invalid isupper() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4225"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isupper() argument nr 1. A non-boolean value is required." verbose="Invalid isupper() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4227"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isxdigit() argument nr 1. A non-boolean value is required." verbose="Invalid isxdigit() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4233"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid isxdigit() argument nr 1. A non-boolean value is required." verbose="Invalid isxdigit() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4235"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid asctime_s() argument nr 2. The value is 24 but the valid values are &amp;#039;26:&amp;#039;." verbose="Invalid asctime_s() argument nr 2. The value is 24 but the valid values are &amp;#039;26:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4242"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isalnum() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isalnum() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4245"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isalnum() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isalnum() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4247"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isalpha() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isalpha() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4254"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isalpha() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isalpha() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4256"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isblank() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isblank() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4263"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isblank() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isblank() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4265"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid iscntrl() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid iscntrl() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4272"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid iscntrl() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid iscntrl() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4274"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isdigit() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isdigit() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4281"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isdigit() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isdigit() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4283"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isgraph() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isgraph() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4290"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isgraph() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isgraph() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4292"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid islower() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid islower() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4299"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid islower() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid islower() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4301"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isupper() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isupper() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4308"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isupper() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isupper() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4310"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isprint() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isprint() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4317"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isprint() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isprint() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4319"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid ispunct() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid ispunct() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4326"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid ispunct() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid ispunct() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4328"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isspace() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isspace() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4335"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isspace() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isspace() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4337"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isxdigit() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isxdigit() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4344"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid isxdigit() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid isxdigit() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4346"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid tolower() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid tolower() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4353"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid tolower() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid tolower() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4355"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid toupper() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid toupper() argument nr 1. The value is 256 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4362"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid toupper() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." verbose="Invalid toupper() argument nr 1. The value is -1 but the valid values are &amp;#039;0:255&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4364"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid strcpy_s() argument nr 2. The value is 0 but the valid values are &amp;#039;1:&amp;#039;." verbose="Invalid strcpy_s() argument nr 2. The value is 0 but the valid values are &amp;#039;1:&amp;#039;." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4371"/>
        </error>
        <error id="invalidFunctionArgStr" severity="error" msg="Invalid atoi() argument nr 1. A nul-terminated string is required." verbose="Invalid atoi() argument nr 1. A nul-terminated string is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4377"/>
        </error>
        <error id="invalidFunctionArgStr" severity="error" msg="Invalid strlen() argument nr 1. A nul-terminated string is required." verbose="Invalid strlen() argument nr 1. A nul-terminated string is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4380"/>
        </error>
        <error id="invalidFunctionArgStr" severity="error" msg="Invalid strcat() argument nr 2. A nul-terminated string is required." verbose="Invalid strcat() argument nr 2. A nul-terminated string is required." cwe="628" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4389"/>
        </error>
        <error id="wrongmathcall" severity="warning" msg="Passing value 0.0f to log10f() leads to implementation-defined result." verbose="Passing value 0.0f to log10f() leads to implementation-defined result." cwe="758" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3148"/>
        </error>
        <error id="wrongmathcall" severity="warning" msg="Passing value 0.0 to log10() leads to implementation-defined result." verbose="Passing value 0.0 to log10() leads to implementation-defined result." cwe="758" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3155"/>
        </error>
        <error id="wrongmathcall" severity="warning" msg="Passing value 0.0L to log10l() leads to implementation-defined result." verbose="Passing value 0.0L to log10l() leads to implementation-defined result." cwe="758" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3162"/>
        </error>
        <error id="wrongmathcall" severity="warning" msg="Passing value 0.0f to logf() leads to implementation-defined result." verbose="Passing value 0.0f to logf() leads to implementation-defined result." cwe="758" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3172"/>
        </error>
        <error id="wrongmathcall" severity="warning" msg="Passing value 0.0 to log() leads to implementation-defined result." verbose="Passing value 0.0 to log() leads to implementation-defined result." cwe="758" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3179"/>
        </error>
        <error id="wrongmathcall" severity="warning" msg="Passing value 0.0L to logl() leads to implementation-defined result." verbose="Passing value 0.0L to logl() leads to implementation-defined result." cwe="758" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3186"/>
        </error>
        <error id="wrongmathcall" severity="warning" msg="Passing value 0.0f to log2f() leads to implementation-defined result." verbose="Passing value 0.0f to log2f() leads to implementation-defined result." cwe="758" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3196"/>
        </error>
        <error id="wrongmathcall" severity="warning" msg="Passing value 0.0 to log2() leads to implementation-defined result." verbose="Passing value 0.0 to log2() leads to implementation-defined result." cwe="758" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3203"/>
        </error>
        <error id="wrongmathcall" severity="warning" msg="Passing value 0.0L to log2l() leads to implementation-defined result." verbose="Passing value 0.0L to log2l() leads to implementation-defined result." cwe="758" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3210"/>
        </error>
        <error id="invalidPrintfArgType_float" severity="warning" msg="%f in format string (no. 1) requires &amp;#039;double&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%f in format string (no. 1) requires &amp;#039;double&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." cwe="686" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4507"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: alignedBuf" verbose="Memory leak: alignedBuf" cwe="401" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="94"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: fp" verbose="Resource leak: fp" cwe="775" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="188"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: p" verbose="Memory leak: p" cwe="401" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="197"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;aligned_alloc&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;aligned_alloc&amp;#039; is not stored." cwe="771" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="117"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;pAlloc2&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;pAlloc2&amp;#039; nulled but not freed upon failure" cwe="401" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="160"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;pAlloc2&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;pAlloc2&amp;#039; nulled but not freed upon failure" cwe="401" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="165"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common reallocarray mistake: &amp;#039;pAlloc3&amp;#039; nulled but not freed upon failure" verbose="Common reallocarray mistake: &amp;#039;pAlloc3&amp;#039; nulled but not freed upon failure" cwe="401" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="176"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: s" verbose="Null pointer dereference: s" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="380" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="378" info="Assignment &amp;#039;s=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: tm" verbose="Null pointer dereference: tm" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4405" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4402" info="Assignment &amp;#039;tm=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: buf" verbose="Null pointer dereference: buf" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4417" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4414" info="Assignment &amp;#039;buf=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: tm" verbose="Null pointer dereference: tm" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4420" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4413" info="Assignment &amp;#039;tm=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: ptr" verbose="Null pointer dereference: ptr" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4429" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4425" info="Assignment &amp;#039;ptr=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: format" verbose="Null pointer dereference: format" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4429" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4426" info="Assignment &amp;#039;format=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: timeptr" verbose="Null pointer dereference: timeptr" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4429" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4427" info="Assignment &amp;#039;timeptr=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: envp" verbose="Null pointer dereference: envp" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4438" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4436" info="Assignment &amp;#039;envp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: flagp" verbose="Null pointer dereference: flagp" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4447" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4445" info="Assignment &amp;#039;flagp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: envp" verbose="Null pointer dereference: envp" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4456" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4454" info="Assignment &amp;#039;envp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: envp" verbose="Null pointer dereference: envp" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4465" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4463" info="Assignment &amp;#039;envp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: flagp" verbose="Null pointer dereference: flagp" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4474" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4472" info="Assignment &amp;#039;flagp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: envp" verbose="Null pointer dereference: envp" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4483" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4481" info="Assignment &amp;#039;envp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: c" verbose="Null pointer dereference: c" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4498" info="Null pointer dereference"/>
            <location file="test\cfg\std.c" line="4496" info="Assignment &amp;#039;c=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="209"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="212"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="215"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="217"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="221"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="224"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="226"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="228"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="237"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="239"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="241"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="243"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="245"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="247"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="251"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="254"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="257"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="260"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="262"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="264"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="267"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="270"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="273"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="276"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="279"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="282"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="284"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="286"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="289"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="292"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="294"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="296"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="298"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="300"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="302"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="304"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="306"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="308"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="310"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="312"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="315"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="318"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="321"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="324"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="326"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="328"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="330"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="332"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="334"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="336"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="354"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="358"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="361"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="380"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="387"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="393"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1732"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4405"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4408"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4417"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4420"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4429"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4431"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4438"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4440"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4447"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4449"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4456"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4458"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4465"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4467"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4474"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4476"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4483"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4485"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4491"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4498"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4500"/>
        </error>
        <error id="pointerLessThanZero" severity="style" msg="A pointer can not be negative so it is either pointless or an error to check if it is." verbose="A pointer can not be negative so it is either pointless or an error to check if it is." cwe="570" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="100"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninitVar1" verbose="Uninitialized variable: uninitVar1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="124"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninitVar2" verbose="Uninitialized variable: uninitVar2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="126"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninitVar3" verbose="Uninitialized variable: uninitVar3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="128"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="422"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp" verbose="Uninitialized variable: fp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="429"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp" verbose="Uninitialized variable: fp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="436"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: filename" verbose="Uninitialized variable: filename" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="444"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: mode" verbose="Uninitialized variable: mode" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="447"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp1" verbose="Uninitialized variable: fp1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="456"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp2" verbose="Uninitialized variable: fp2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="459"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp1" verbose="Uninitialized variable: fp1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="467"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp2" verbose="Uninitialized variable: fp2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="470"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp" verbose="Uninitialized variable: fp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="477"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp" verbose="Uninitialized variable: fp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="484"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp" verbose="Uninitialized variable: fp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="493"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ppos" verbose="Uninitialized variable: ppos" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="497"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp" verbose="Uninitialized variable: fp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="507"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pos" verbose="Uninitialized variable: pos" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="507"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ppos" verbose="Uninitialized variable: ppos" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="511"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp" verbose="Uninitialized variable: fp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="528"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str" verbose="Uninitialized variable: str" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="525"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="531"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="542"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp" verbose="Uninitialized variable: fp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="545"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="556"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp" verbose="Uninitialized variable: fp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="559"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fp" verbose="Uninitialized variable: fp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="566"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="573"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="580"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fc" verbose="Uninitialized variable: fc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="587"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="591"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="595"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fc" verbose="Uninitialized variable: fc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="602"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="606"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="610"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="617"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="621"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="625"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="632"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="636"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="640"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tm" verbose="Uninitialized variable: tm" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="705"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tm" verbose="Uninitialized variable: tm" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="714"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="722"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="729"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="733"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="737"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fc" verbose="Uninitialized variable: fc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="744"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="748"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="752"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="759"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="763"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="767"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="774"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="778"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="782"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="789"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="793"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="797"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="804"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="808"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="812"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="819"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="823"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="827"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="834"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="838"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="842"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="849"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="853"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="857"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="864"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="868"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="872"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: maxsize" verbose="Uninitialized variable: maxsize" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="881"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="881"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: timeptr" verbose="Uninitialized variable: timeptr" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="881"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="888"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="892"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="896"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="903"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="907"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="911"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="918"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="922"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="926"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="933"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="937"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="941"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="948"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: excepts" verbose="Uninitialized variable: excepts" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="955"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: excepts" verbose="Uninitialized variable: excepts" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="962"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: envp" verbose="Uninitialized variable: envp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="969"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="976"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="983"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: envp" verbose="Uninitialized variable: envp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="990"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="997"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1001"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1005"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1012"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1016"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1020"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1027"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1031"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1035"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1042"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1046"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1050"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1057"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1061"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1065"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1072"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1076"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1080"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1087"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1087"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1091"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1091"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1095"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1095"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1102"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c1" verbose="Uninitialized variable: c1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1109"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c2" verbose="Uninitialized variable: c2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1112"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c3" verbose="Uninitialized variable: c3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1115"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: nitems" verbose="Uninitialized variable: nitems" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1124"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1124"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1132"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1136"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1140"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1147"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1147"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1151"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1151"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1155"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1155"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1162"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1166"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1170"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1177"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1181"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1185"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1192"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1196"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1200"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1207"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1211"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1215"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1222"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1226"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1230"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1237"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: t1" verbose="Uninitialized variable: t1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1244"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: t2" verbose="Uninitialized variable: t2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1244"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: num" verbose="Uninitialized variable: num" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1252"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: denom" verbose="Uninitialized variable: denom" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1252"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1259"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1266"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1270"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1274"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1281"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1285"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1289"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1296"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1300"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1304"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1311"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1315"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1319"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1326"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1330"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1334"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1341"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1345"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1349"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1356"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1360"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1364"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1371"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1375"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1379"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1386"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1390"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1394"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1401"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1401"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1405"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1405"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1409"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1409"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1416"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1423"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1427"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1431"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1438"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1438"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f3" verbose="Uninitialized variable: f3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1438"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1442"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1442"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d3" verbose="Uninitialized variable: d3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1442"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1446"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1446"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld3" verbose="Uninitialized variable: ld3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1446"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1453"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1453"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1457"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1457"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1461"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1461"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1468"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1468"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1472"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1472"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1476"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1476"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1483"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1483"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1487"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1487"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1491"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1491"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream1" verbose="Uninitialized variable: stream1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1500"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream2" verbose="Uninitialized variable: stream2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1502"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1500"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1504"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument1" verbose="Uninitialized variable: argument1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1500"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument2" verbose="Uninitialized variable: argument2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1506"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream1" verbose="Uninitialized variable: stream1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1519"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream2" verbose="Uninitialized variable: stream2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1521"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1519"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1523"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream1" verbose="Uninitialized variable: stream1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1538"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream2" verbose="Uninitialized variable: stream2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1540"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1538"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1542"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1555"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1555"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string" verbose="Uninitialized variable: string" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1563"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1563"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ptr" verbose="Uninitialized variable: ptr" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1573"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1573"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: nobj" verbose="Uninitialized variable: nobj" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1573"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1573"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: block" verbose="Uninitialized variable: block" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1581"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: filename" verbose="Uninitialized variable: filename" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1590"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: mode" verbose="Uninitialized variable: mode" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1590"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1590"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1599"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1599"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1604"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1604"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1609"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i3" verbose="Uninitialized variable: i3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1609"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1616"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1616"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1620"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1620"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1624"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1624"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1633"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1633"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1643"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1643"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1653"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1653"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1662"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: offset" verbose="Uninitialized variable: offset" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1662"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: origin" verbose="Uninitialized variable: origin" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1662"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buffer" verbose="Uninitialized variable: buffer" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1671"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1671"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1671"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1679"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: mode" verbose="Uninitialized variable: mode" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1679"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ptr" verbose="Uninitialized variable: ptr" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1689"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1689"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: nobj" verbose="Uninitialized variable: nobj" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1689"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1689"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string" verbose="Uninitialized variable: string" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1697"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1697"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pmb" verbose="Uninitialized variable: pmb" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1706"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1706"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pmb1" verbose="Uninitialized variable: pmb1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1715"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pmb2" verbose="Uninitialized variable: pmb2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1717"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max1" verbose="Uninitialized variable: max1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1715"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max2" verbose="Uninitialized variable: max2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1719"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps1" verbose="Uninitialized variable: ps1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1715"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps2" verbose="Uninitialized variable: ps2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1721"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1739"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1746"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dest" verbose="Uninitialized variable: dest" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1756"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: src" verbose="Uninitialized variable: src" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1758"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1760"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dest" verbose="Uninitialized variable: dest" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1777"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: src" verbose="Uninitialized variable: src" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1779"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1781"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1783"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wc" verbose="Uninitialized variable: wc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1793"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1801"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wc" verbose="Uninitialized variable: wc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1801"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wcstr" verbose="Uninitialized variable: wcstr" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1810"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1810"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1817"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1824"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1832"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1832"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1840"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1840"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: name" verbose="Uninitialized variable: name" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1847"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buffer" verbose="Uninitialized variable: buffer" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1855"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1862"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1869"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1876"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1883"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1890"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1897"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1904"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1911"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1918"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1926"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: desc" verbose="Uninitialized variable: desc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1926"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1933"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1940"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1947"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1954"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1961"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1968"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1975"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1982"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1989"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1996"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2003"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2010"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2017"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2024"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2031"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2038"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2046"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: desc" verbose="Uninitialized variable: desc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2046"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2053"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2060"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: property" verbose="Uninitialized variable: property" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2067"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: property" verbose="Uninitialized variable: property" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2074"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2088"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2092"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2096"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2103"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2107"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2111"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2118"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2122"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2126"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: li" verbose="Uninitialized variable: li" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2133"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: lli" verbose="Uninitialized variable: lli" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2137"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2145"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: e1" verbose="Uninitialized variable: e1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2145"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2150"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: e2" verbose="Uninitialized variable: e2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2150"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2155"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: e3" verbose="Uninitialized variable: e3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2155"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2162"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2166"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2170"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2177"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2181"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2185"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2192"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2196"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2200"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2207"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2211"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2215"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2222"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2226"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2230"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2237"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2241"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2245"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: seed" verbose="Uninitialized variable: seed" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2252"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: l1" verbose="Uninitialized variable: l1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2260"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: l2" verbose="Uninitialized variable: l2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2260"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ll1" verbose="Uninitialized variable: ll1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2265"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ll2" verbose="Uninitialized variable: ll2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2265"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2272"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2279"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2283"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2287"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fc" verbose="Uninitialized variable: fc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2294"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2298"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2302"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fc" verbose="Uninitialized variable: fc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2309"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2313"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2317"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2324"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2328"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2332"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2339"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2343"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2347"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2354"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2354"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2358"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2358"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2362"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2362"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2369"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2369"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2373"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2373"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2377"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2377"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2384"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2388"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2392"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2399"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2403"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2407"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2414"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2414"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2418"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2418"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2422"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2422"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2429"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2429"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2433"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2433"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2437"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2437"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2444"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2444"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2448"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2448"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2452"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2452"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tagp1" verbose="Uninitialized variable: tagp1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2459"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tagp2" verbose="Uninitialized variable: tagp2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2461"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tagp3" verbose="Uninitialized variable: tagp3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2463"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2470"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2477"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2484"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2484"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2491"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2495"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2499"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2506"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2510"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2514"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2521"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2525"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2529"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2536"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2540"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2544"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2551"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2555"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2559"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2566"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2566"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2570"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2570"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2574"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2574"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2581"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2581"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2585"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2585"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2589"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2589"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: env" verbose="Uninitialized variable: env" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2597"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: val" verbose="Uninitialized variable: val" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2597"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2605"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2614"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2623"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2623"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2623"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2632"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2632"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2632"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2641"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2641"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2641"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2650"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2650"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2650"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2659"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2659"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2659"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2668"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2668"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2668"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2677"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2677"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2677"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2686"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2686"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2686"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2695"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2695"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2695"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2704"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2704"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2704"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2711"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tpx" verbose="Uninitialized variable: tpx" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2715"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2723"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2723"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2728"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2728"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2733"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2733"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string" verbose="Uninitialized variable: string" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2740"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2747"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2747"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2751"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2751"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2755"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2755"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2762"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2762"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2766"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2766"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2770"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2770"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2777"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2777"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2781"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2781"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2785"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2785"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2793"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2793"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2793"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2798"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2798"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2798"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2803"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2803"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i3" verbose="Uninitialized variable: i3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2803"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format_1" verbose="Uninitialized variable: format_1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2813"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format_2" verbose="Uninitialized variable: format_2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2817"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format_3" verbose="Uninitialized variable: format_3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2819"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument1" verbose="Uninitialized variable: argument1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2813"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument2" verbose="Uninitialized variable: argument2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2815"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2831"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2833"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2847"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2849"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: key" verbose="Uninitialized variable: key" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2864"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base" verbose="Uninitialized variable: base" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2864"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: num" verbose="Uninitialized variable: num" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2864"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2864"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base" verbose="Uninitialized variable: base" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2873"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2873"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2873"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2881"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2881"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2889"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2889"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2896"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: block" verbose="Uninitialized variable: block" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2904"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: newsize" verbose="Uninitialized variable: newsize" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2904"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2912"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2920"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2920"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2927"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2934"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2938"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2942"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2950"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2950"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2955"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2955"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2960"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i3" verbose="Uninitialized variable: i3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2960"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2968"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2968"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2973"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2973"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2978"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i3" verbose="Uninitialized variable: i3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2978"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2985"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2992"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2999"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3007"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3021"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3021"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3031"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3031"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3040"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3049"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3057"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3067"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buf" verbose="Uninitialized variable: buf" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3067"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: mode" verbose="Uninitialized variable: mode" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3067"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3067"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: deststr1" verbose="Uninitialized variable: deststr1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3075"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: deststr2" verbose="Uninitialized variable: deststr2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3079"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: srcstr1" verbose="Uninitialized variable: srcstr1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3075"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: srcstr2" verbose="Uninitialized variable: srcstr2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3077"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: deststr_1" verbose="Uninitialized variable: deststr_1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3104"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: deststr_2" verbose="Uninitialized variable: deststr_2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3108"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: srcstr_1" verbose="Uninitialized variable: srcstr_1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3104"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: srcstr_2" verbose="Uninitialized variable: srcstr_2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3106"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wc" verbose="Uninitialized variable: wc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3120"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3128"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3128"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3221"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3221"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str1" verbose="Uninitialized variable: str1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3232"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str2" verbose="Uninitialized variable: str2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3234"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str3" verbose="Uninitialized variable: str3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3236"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str4" verbose="Uninitialized variable: str4" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3236"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str1" verbose="Uninitialized variable: str1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3250"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str2" verbose="Uninitialized variable: str2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3252"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str3" verbose="Uninitialized variable: str3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3254"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str4" verbose="Uninitialized variable: str4" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3254"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dest1" verbose="Uninitialized variable: dest1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3266"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dest2" verbose="Uninitialized variable: dest2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3270"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: src1" verbose="Uninitialized variable: src1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3268"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: src2" verbose="Uninitialized variable: src2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3270"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: strUninit1" verbose="Uninitialized variable: strUninit1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3283"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: strUninit2" verbose="Uninitialized variable: strUninit2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3285"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3287"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dest1" verbose="Uninitialized variable: dest1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3299"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dest2" verbose="Uninitialized variable: dest2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3303"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: src1" verbose="Uninitialized variable: src1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3301"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: src2" verbose="Uninitialized variable: src2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3303"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3316"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3316"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fmt" verbose="Uninitialized variable: fmt" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3316"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: p" verbose="Uninitialized variable: p" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3316"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: px" verbose="Uninitialized variable: px" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3320"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3327"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3342"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3353"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3355"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3357"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3373"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3377"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3373"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3373"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n3" verbose="Uninitialized variable: n3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3375"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n4" verbose="Uninitialized variable: n4" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3379"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3391"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3391"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dest" verbose="Uninitialized variable: dest" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3402"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: src" verbose="Uninitialized variable: src" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3404"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: num" verbose="Uninitialized variable: num" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3406"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_1" verbose="Uninitialized variable: ct_1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3419"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_2" verbose="Uninitialized variable: ct_2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3421"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3419"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3423"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3419"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3425"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_1" verbose="Uninitialized variable: ct_1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3438"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_2" verbose="Uninitialized variable: ct_2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3440"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3438"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3442"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3438"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3444"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_1" verbose="Uninitialized variable: ct_1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3460"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_2" verbose="Uninitialized variable: ct_2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3462"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3460"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3466"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3460"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3460"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n3" verbose="Uninitialized variable: n3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3464"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n4" verbose="Uninitialized variable: n4" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3468"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_1" verbose="Uninitialized variable: ct_1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3480"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_2" verbose="Uninitialized variable: ct_2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3482"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3480"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3484"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3480"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3486"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3499"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3501"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3503"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct1" verbose="Uninitialized variable: ct1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3515"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct2" verbose="Uninitialized variable: ct2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3517"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3515"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3519"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3515"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3521"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3532"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3532"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3540"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3540"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3548"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3548"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ss" verbose="Uninitialized variable: ss" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3557"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3557"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ss" verbose="Uninitialized variable: ss" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3588"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3588"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ds" verbose="Uninitialized variable: ds" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3596"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ss" verbose="Uninitialized variable: ss" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3596"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: category" verbose="Uninitialized variable: category" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3604"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: locale" verbose="Uninitialized variable: locale" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3604"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3611"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3619"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3619"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3627"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3627"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3635"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3635"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3644"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3644"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3644"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3652"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3652"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3660"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3660"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str" verbose="Uninitialized variable: str" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3671"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: character" verbose="Uninitialized variable: character" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3673"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ws" verbose="Uninitialized variable: ws" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3684"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wc" verbose="Uninitialized variable: wc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3684"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: p" verbose="Uninitialized variable: p" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3694"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: len" verbose="Uninitialized variable: len" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3694"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3694"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3702"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3702"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3711"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3713"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base1" verbose="Uninitialized variable: base1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3711"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base2" verbose="Uninitialized variable: base2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3713"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3721"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3723"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s3" verbose="Uninitialized variable: s3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3725"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3734"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3736"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s3" verbose="Uninitialized variable: s3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3738"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s4" verbose="Uninitialized variable: s4" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3740"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base1" verbose="Uninitialized variable: base1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3734"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base2" verbose="Uninitialized variable: base2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3736"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base3" verbose="Uninitialized variable: base3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3738"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base4" verbose="Uninitialized variable: base4" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3740"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3747"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3754"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c1" verbose="Uninitialized variable: c1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3761"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c1" verbose="Uninitialized variable: c1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3781"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3802"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3804"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s3" verbose="Uninitialized variable: s3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3806"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pmb" verbose="Uninitialized variable: pmb" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3816"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3816"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3816"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3825"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3825"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ptr" verbose="Uninitialized variable: ptr" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3825"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3834"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3836"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base1" verbose="Uninitialized variable: base1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3834"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base2" verbose="Uninitialized variable: base2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3836"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3845"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3847"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s3" verbose="Uninitialized variable: s3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3849"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s4" verbose="Uninitialized variable: s4" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3851"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base1" verbose="Uninitialized variable: base1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3845"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base2" verbose="Uninitialized variable: base2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3847"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base3" verbose="Uninitialized variable: base3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3849"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base4" verbose="Uninitialized variable: base4" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3851"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3859"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3861"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format3" verbose="Uninitialized variable: format3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3865"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument1" verbose="Uninitialized variable: argument1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3859"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument2" verbose="Uninitialized variable: argument2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3863"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3877"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3879"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3877"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3881"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument1" verbose="Uninitialized variable: argument1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3877"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument2" verbose="Uninitialized variable: argument2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3883"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3895"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3895"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3895"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3905"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3905"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3933"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3933"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3933"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3942"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3942"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3942"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3952"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3954"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3952"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3956"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3952"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3958"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3952"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3960"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3974"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3976"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3974"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3978"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3974"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3980"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3993"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3995"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string1" verbose="Uninitialized variable: string1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4005"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string2" verbose="Uninitialized variable: string2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4007"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string3" verbose="Uninitialized variable: string3" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4009"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4011"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pInteger" verbose="Uninitialized variable: pInteger" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4013"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4026"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4026"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4028"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4037"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4037"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4039"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4046"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4054"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: zone" verbose="Uninitialized variable: zone" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4054"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: value" verbose="Uninitialized variable: value" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4063"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str" verbose="Uninitialized variable: str" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4063"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base" verbose="Uninitialized variable: base" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4063"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3320"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fmt" verbose="Uninitialized variable: fmt" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3320"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: xPtr" verbose="Uninitialized variable: xPtr" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3332" info=""/>
            <location file="test\cfg\std.c" line="3330" info="Assignment &amp;#039;xPtr=&amp;amp;x&amp;#039;, assigned value is &amp;lt;Uninit&amp;gt;"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: *pc" verbose="Uninitialized variable: *pc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3767" info=""/>
            <location file="test\cfg\std.c" line="3765" info="Address of variable taken here."/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: *pc" verbose="Uninitialized variable: *pc" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3787" info=""/>
            <location file="test\cfg\std.c" line="3785" info="Address of variable taken here."/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4039"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;alignedBuf&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;alignedBuf&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="92"/>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &amp;#039;alignedBuf&amp;#039; is allocated memory that is never used." verbose="Variable &amp;#039;alignedBuf&amp;#039; is allocated memory that is never used." cwe="563" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="92"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;arr[c]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;arr[c]&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="142"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fp&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="186"/>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &amp;#039;p&amp;#039; is allocated memory that is never used." verbose="Variable &amp;#039;p&amp;#039; is allocated memory that is never used." cwe="563" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1124"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;block&amp;#039; is not assigned a value." verbose="Variable &amp;#039;block&amp;#039; is not assigned a value." cwe="665" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1579"/>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &amp;#039;p&amp;#039; is allocated memory that is never used." verbose="Variable &amp;#039;p&amp;#039; is allocated memory that is never used." cwe="563" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2605"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;c2&amp;#039; is not assigned a value." verbose="Variable &amp;#039;c2&amp;#039; is not assigned a value." cwe="665" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3764"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;c2&amp;#039; is not assigned a value." verbose="Variable &amp;#039;c2&amp;#039; is not assigned a value." cwe="665" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3784"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1519"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1528"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1538"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1547"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1643"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1653"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg1&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg1&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2831"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg2&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg2&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2838"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2847"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2854"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3021"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3031"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3040"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3049"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3905"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3933"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3974"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3985"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c16" verbose="Uninitialized variable: c16" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4073"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4073"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pmb" verbose="Uninitialized variable: pmb" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4083"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4083"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4083"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c32" verbose="Uninitialized variable: c32" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4094"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4094"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pmb" verbose="Uninitialized variable: pmb" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4104"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4104"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.c" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4104"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;arrayIndexOutOfBounds&amp;#039; is never used." verbose="The function &amp;#039;arrayIndexOutOfBounds&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="145"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;bufferAccessOutOfBounds_libraryDirectionConfiguration&amp;#039; is never used." verbose="The function &amp;#039;bufferAccessOutOfBounds_libraryDirectionConfiguration&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="133"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;bufferAccessOutOfBounds_strcat&amp;#039; is never used." verbose="The function &amp;#039;bufferAccessOutOfBounds_strcat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3085"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;bufferAccessOutOfBounds_strncmp&amp;#039; is never used." verbose="The function &amp;#039;bufferAccessOutOfBounds_strncmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3571"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;bufferAccessOutOfBounds_strxfrm&amp;#039; is never used." verbose="The function &amp;#039;bufferAccessOutOfBounds_strxfrm&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3560"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignoreleak&amp;#039; is never used." verbose="The function &amp;#039;ignoreleak&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="192"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignorereturn&amp;#039; is never used." verbose="The function &amp;#039;ignorereturn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2077"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_isalnum&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_isalnum&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4150"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_isalpha&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_isalpha&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4142"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_isblank&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_isblank&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4206"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_iscntrl&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_iscntrl&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4134"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_isdigit&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_isdigit&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4166"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_isgraph&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_isgraph&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4174"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_islower&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_islower&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4182"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_isprint&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_isprint&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4198"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_ispunct&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_ispunct&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4214"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_isspace&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_isspace&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4158"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_isupper&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_isupper&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4222"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_iswcntrl&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_iswcntrl&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4190"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_isxdigit&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_isxdigit&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4230"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_tolower&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_tolower&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4118"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_toupper&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_toupper&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4126"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgString&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgString&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4374"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArg_acosh&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArg_acosh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="643"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArg_atanh&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArg_atanh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="664"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArg_log&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArg_log&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3168"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArg_log2&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArg_log2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3192"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArg_strchr&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArg_strchr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3131"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidPrintfArgType_printf&amp;#039; is never used." verbose="The function &amp;#039;invalidPrintfArgType_printf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4503"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_aligned_alloc&amp;#039; is never used." verbose="The function &amp;#039;memleak_aligned_alloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="88"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_asctime_s&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_asctime_s&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4411"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_memchr&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_memchr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="376"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_vsnprintf&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_vsnprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="396"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullpointer&amp;#039; is never used." verbose="The function &amp;#039;nullpointer&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="201"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullpointerMemchr1&amp;#039; is never used." verbose="The function &amp;#039;nullpointerMemchr1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="364"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullpointerMemchr2&amp;#039; is never used." verbose="The function &amp;#039;nullpointerMemchr2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="370"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pointerLessThanZero_aligned_alloc&amp;#039; is never used." verbose="The function &amp;#039;pointerLessThanZero_aligned_alloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="96"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_tmpfile&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_tmpfile&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="183"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_aligned_alloc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_aligned_alloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="120"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_alloca&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_alloca&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2609"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_asctime_s&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_asctime_s&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="708"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_assert&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_assert&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="717"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_bsearch&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_bsearch&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2857"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_c16rtomb&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_c16rtomb&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4067"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_c32rtomb&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_c32rtomb&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4088"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_cabs&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_cabs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2084"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_cacos&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_cacos&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2099"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_cacosh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_cacosh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2114"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_calloc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_calloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1118"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_carg&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_carg&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1292"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_casin&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_casin&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="830"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_casinh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_casinh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="860"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_catan&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_catan&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1008"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_catanh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_catanh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1068"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ccos&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ccos&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1188"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ccosh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ccosh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1218"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_cexp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_cexp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1322"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_cimag&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_cimag&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1337"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_clog&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_clog&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2290"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_conj&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_conj&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2305"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_cpow&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_cpow&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2758"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_cproj&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_cproj&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="583"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_creal&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_creal&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="598"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_csin&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_csin&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="785"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_csinh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_csinh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="800"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_csqrt&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_csqrt&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="740"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ctan&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ctan&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="899"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ctanh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ctanh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="929"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fegetexceptflag&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fegetexceptflag&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="951"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fopen&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fopen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="439"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1494"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fwprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fwprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3936"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fwscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fwscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4020"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_gets&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_gets&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1850"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_itoa&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_itoa&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4057"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mbrtoc16&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mbrtoc16&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4076"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mbrtoc32&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mbrtoc32&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4097"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mbrtowc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mbrtowc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3809"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_modf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_modf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2718"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_perror&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_perror&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2736"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_printf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_printf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2806"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_raise&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_raise&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2995"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_scalbln&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_scalbln&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2963"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_scalbn&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_scalbn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2945"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_scanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_scanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3002"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_setbuf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_setbuf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3052"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_setlocale&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_setlocale&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3599"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_setvbuf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_setvbuf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3060"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_signal&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_signal&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2988"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_snprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_snprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3945"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_sscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_sscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3998"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strcat_s&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strcat_s&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3413"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strchr&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strchr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3123"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strcmp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strcmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3224"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strcoll&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strcoll&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3647"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strcpy&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strcpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3260"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strcpy_s&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strcpy_s&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3276"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strcspn&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strcspn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3614"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strerror&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strerror&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3607"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strftime&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strftime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3309"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strlen&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strlen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3323"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strncat&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strncat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3395"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strncat_s&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strncat_s&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3450"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strncmp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strncmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3492"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strncpy_s&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strncpy_s&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3363"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strpbrk&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strpbrk&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3386"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strrchr&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strrchr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3665"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strspn&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strspn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3543"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strstr&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strstr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3527"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strtof&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strtof&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3716"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strtoimax&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strtoimax&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3705"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strtok&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strtok&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3697"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strtol&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strtol&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3728"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strxfrm&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strxfrm&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3551"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_swscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_swscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4031"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vfprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vfprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1512"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vfwprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vfwprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="1531"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2825"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3034"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vsnprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vsnprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3966"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vsscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vsscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3014"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vswscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vswscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3024"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vwprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vwprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="2841"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vwscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vwscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3043"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcrtomb&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcrtomb&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3114"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcscat_s&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcscat_s&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3432"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcschr&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcschr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3216"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcscmp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcscmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3242"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcscoll&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcscoll&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3655"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcscpy&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcscpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3293"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcscspn&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcscspn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3622"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcslen&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcslen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3338"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcsncat&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcsncat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3474"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcsncmp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcsncmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3509"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcsncpy&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcsncpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3638"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcspbrk&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcspbrk&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3630"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcsrchr&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcsrchr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3679"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcsrtombs&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcsrtombs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3687"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcsspn&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcsspn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3591"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcsstr&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcsstr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3535"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcstof&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcstof&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3797"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcstoimax&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcstoimax&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3828"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcstok&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcstok&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3819"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcstol&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcstol&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3839"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcsxfrm&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcsxfrm&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3582"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3988"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_zonetime&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_zonetime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4049"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;unusedRetVal_aligned_alloc&amp;#039; is never used." verbose="The function &amp;#039;unusedRetVal_aligned_alloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="113"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;valid_vsprintf&amp;#039; is never used." verbose="The function &amp;#039;valid_vsprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="3918"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;valueFlow&amp;#039; is never used." verbose="The function &amp;#039;valueFlow&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.c" line="4518"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="268"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: a" verbose="Buffer is accessed out of bounds: a" cwe="788" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="274"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: cBuf" verbose="Buffer is accessed out of bounds: cBuf" cwe="788" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3555"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: cBuf" verbose="Buffer is accessed out of bounds: cBuf" cwe="788" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3557"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: cBuf" verbose="Buffer is accessed out of bounds: cBuf" cwe="788" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3559"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: cBuf" verbose="Buffer is accessed out of bounds: cBuf" cwe="788" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3561"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: cBuf" verbose="Buffer is accessed out of bounds: cBuf" cwe="788" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3563"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: cBuf" verbose="Buffer is accessed out of bounds: cBuf" cwe="788" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3565"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function b1.test() is not used." verbose="Return value of function b1.test() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="167"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function b1.all() is not used." verbose="Return value of function b1.all() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="175"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function b1.none() is not used." verbose="Return value of function b1.none() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="183"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function b1.any() is not used." verbose="Return value of function b1.any() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="191"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function b1.size() is not used." verbose="Return value of function b1.size() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="199"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function b1.count() is not used." verbose="Return value of function b1.count() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="207"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::abs() is not used." verbose="Return value of function std::abs() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3339"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::abs() is not used." verbose="Return value of function std::abs() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3341"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function teststr.compare() is not used." verbose="Return value of function teststr.compare() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3347"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function testwstr.compare() is not used." verbose="Return value of function testwstr.compare() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3349"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::make_pair() is not used." verbose="Return value of function std::make_pair() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3361"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::find() is not used." verbose="Return value of function std::find() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3494"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::find_if() is not used." verbose="Return value of function std::find_if() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3507"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::find_if_not() is not used." verbose="Return value of function std::find_if_not() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3514"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::all_of() is not used." verbose="Return value of function std::all_of() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3521"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::any_of() is not used." verbose="Return value of function std::any_of() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3526"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::none_of() is not used." verbose="Return value of function std::none_of() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3531"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::count() is not used." verbose="Return value of function std::count() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3536"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function std::count_if() is not used." verbose="Return value of function std::count_if() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3541"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function s.size() is not used." verbose="Return value of function s.size() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3574"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function v.size() is not used." verbose="Return value of function v.size() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3585"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function v.capacity() is not used." verbose="Return value of function v.capacity() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3587"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function v.empty() is not used." verbose="Return value of function v.empty() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3590"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function v.max_size() is not used." verbose="Return value of function v.max_size() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3592"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function v.back() is not used." verbose="Return value of function v.back() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3615"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function v.front() is not used." verbose="Return value of function v.front() is not used." cwe="252" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3617"/>
        </error>
        <error id="asctimeCalled" severity="style" msg="Obsolete function &amp;#039;std::asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;std::asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." cwe="477" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="406"/>
        </error>
        <error id="asctimeCalled" severity="style" msg="Obsolete function &amp;#039;std::asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;std::asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." cwe="477" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3381"/>
        </error>
        <error id="asctimeCalled" severity="style" msg="Obsolete function &amp;#039;std::asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." verbose="Obsolete function &amp;#039;std::asctime&amp;#039; called. It is recommended to use &amp;#039;strftime&amp;#039; instead." cwe="477" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3384"/>
        </error>
        <error id="invalidFunctionArg" severity="warning" msg="Invalid log10() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." verbose="Invalid log10() argument nr 1. The value is 0 but the valid values are &amp;#039;4.94066e-324:&amp;#039;." cwe="628" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="36"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid abs() argument nr 1. A non-boolean value is required." verbose="Invalid abs() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3329"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid abs() argument nr 1. A non-boolean value is required." verbose="Invalid abs() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3331"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid abs() argument nr 1. A non-boolean value is required." verbose="Invalid abs() argument nr 1. A non-boolean value is required." cwe="628" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3333"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid v.reserve() argument nr 1. The value is -1 but the valid values are &amp;#039;0:&amp;#039;." verbose="Invalid v.reserve() argument nr 1. The value is -1 but the valid values are &amp;#039;0:&amp;#039;." cwe="628" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3598"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid v.resize() argument nr 1. The value is -1 but the valid values are &amp;#039;0:&amp;#039;." verbose="Invalid v.resize() argument nr 1. The value is -1 but the valid values are &amp;#039;0:&amp;#039;." cwe="628" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3604"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;std::isgreater(4,2)==0&amp;#039; is always false" verbose="Condition &amp;#039;std::isgreater(4,2)==0&amp;#039; is always false" cwe="570" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="222"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;std::isgreaterequal(4,2)==0&amp;#039; is always false" verbose="Condition &amp;#039;std::isgreaterequal(4,2)==0&amp;#039; is always false" cwe="570" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="230"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;std::isless(4,2)==0&amp;#039; is always true" verbose="Condition &amp;#039;std::isless(4,2)==0&amp;#039; is always true" cwe="571" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="238"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;std::islessequal(4,2)==0&amp;#039; is always true" verbose="Condition &amp;#039;std::islessequal(4,2)==0&amp;#039; is always true" cwe="571" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="246"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;std::islessgreater(4,2)==0&amp;#039; is always false" verbose="Condition &amp;#039;std::islessgreater(4,2)==0&amp;#039; is always false" cwe="570" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="254"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;std::islessgreater(2,4)==0&amp;#039; is always false" verbose="Condition &amp;#039;std::islessgreater(2,4)==0&amp;#039; is always false" cwe="570" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="256"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: tm" verbose="Null pointer dereference: tm" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3381" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3378" info="Assignment &amp;#039;tm=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: ptr" verbose="Null pointer dereference: ptr" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3393" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3389" info="Assignment &amp;#039;ptr=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: format" verbose="Null pointer dereference: format" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3393" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3390" info="Assignment &amp;#039;format=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: timeptr" verbose="Null pointer dereference: timeptr" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3393" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3391" info="Assignment &amp;#039;timeptr=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: envp" verbose="Null pointer dereference: envp" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3402" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3400" info="Assignment &amp;#039;envp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: flagp" verbose="Null pointer dereference: flagp" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3411" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3409" info="Assignment &amp;#039;flagp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: envp" verbose="Null pointer dereference: envp" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3420" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3418" info="Assignment &amp;#039;envp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: envp" verbose="Null pointer dereference: envp" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3429" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3427" info="Assignment &amp;#039;envp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: flagp" verbose="Null pointer dereference: flagp" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3438" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3436" info="Assignment &amp;#039;flagp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: envp" verbose="Null pointer dereference: envp" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3447" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3445" info="Assignment &amp;#039;envp=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: c" verbose="Null pointer dereference: c" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3462" info="Null pointer dereference"/>
            <location file="test\cfg\std.cpp" line="3460" info="Assignment &amp;#039;c=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1305"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3102"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3367"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3373"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3381"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3384"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3393"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3395"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3402"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3404"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3411"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3413"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3420"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3422"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3429"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3431"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3438"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3440"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3447"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3449"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3455"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3462"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3464"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3470"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3476"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in wcscat() is undefined behavior" verbose="Overlapping read/write in wcscat() is undefined behavior" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="90"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in strcat() is undefined behavior" verbose="Overlapping read/write in strcat() is undefined behavior" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="98"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in strncat() is undefined behavior" verbose="Overlapping read/write in strncat() is undefined behavior" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="108"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in strncat() is undefined behavior" verbose="Overlapping read/write in strncat() is undefined behavior" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="111"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in wcsncat() is undefined behavior" verbose="Overlapping read/write in wcsncat() is undefined behavior" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="121"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in wcsncat() is undefined behavior" verbose="Overlapping read/write in wcsncat() is undefined behavior" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="124"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in wcscpy() is undefined behavior" verbose="Overlapping read/write in wcscpy() is undefined behavior" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="135"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in wcsncpy() is undefined behavior" verbose="Overlapping read/write in wcsncpy() is undefined behavior" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="144"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in strncpy() is undefined behavior" verbose="Overlapping read/write in strncpy() is undefined behavior" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="153"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3494"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3496"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3507"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3509"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3514"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3516"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3521"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3526"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3531"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3536"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3541"/>
        </error>
        <error id="mismatchingContainers" severity="error" msg="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." verbose="Iterators of different containers &amp;#039;ints1&amp;#039; and &amp;#039;ints2&amp;#039; are used together." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3545"/>
        </error>
        <error id="uselessCallsEmpty" severity="warning" msg="Ineffective call of function &amp;#039;empty()&amp;#039;. Did you intend to call &amp;#039;clear()&amp;#039; instead?" verbose="Ineffective call of function &amp;#039;empty()&amp;#039;. Did you intend to call &amp;#039;clear()&amp;#039; instead?" cwe="398" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3590"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="281"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="288"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="290"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="297"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="304"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="311"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="318"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="325"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="332"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="339"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="346"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="353"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="360"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="375"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="379"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="383"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="390"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="394"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="398"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tm" verbose="Uninitialized variable: tm" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="406"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="413"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="417"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="421"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="428"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="432"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="436"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="443"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="447"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="451"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="458"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="462"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="466"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="473"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="477"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="481"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: maxsize" verbose="Uninitialized variable: maxsize" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="490"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="490"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: timeptr" verbose="Uninitialized variable: timeptr" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="490"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="497"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="501"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="505"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="512"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="516"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="520"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="527"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="531"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="535"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="542"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="546"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="550"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="557"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="561"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="565"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="572"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="576"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="580"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="587"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="587"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="591"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="591"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="595"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="595"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="602"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c1" verbose="Uninitialized variable: c1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="609"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c2" verbose="Uninitialized variable: c2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="612"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c3" verbose="Uninitialized variable: c3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="615"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="622"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="626"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="630"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="637"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="637"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="641"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="641"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="645"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="645"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="652"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="656"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="660"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="667"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="671"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="675"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="682"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="689"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="693"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="697"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: expects" verbose="Uninitialized variable: expects" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="704"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: expects" verbose="Uninitialized variable: expects" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="711"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="718"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: envp" verbose="Uninitialized variable: envp" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="725"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="732"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="739"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: envp" verbose="Uninitialized variable: envp" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="746"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="753"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: t1" verbose="Uninitialized variable: t1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="760"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: t2" verbose="Uninitialized variable: t2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="760"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: num" verbose="Uninitialized variable: num" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="768"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: denom" verbose="Uninitialized variable: denom" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="768"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: numer1" verbose="Uninitialized variable: numer1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="776"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: numer2" verbose="Uninitialized variable: numer2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="778"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: denom1" verbose="Uninitialized variable: denom1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="776"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: denom2" verbose="Uninitialized variable: denom2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="778"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="785"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="792"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="796"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="800"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="807"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="811"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="815"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="822"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="826"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="830"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="837"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="841"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="845"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="852"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="856"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="860"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="867"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="871"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="875"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="882"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="882"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="886"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="886"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="890"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="890"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="897"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="904"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="911"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="918"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="925"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="932"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="940"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ptr" verbose="Uninitialized variable: ptr" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="940"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="947"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="951"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="955"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="962"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="962"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f3" verbose="Uninitialized variable: f3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="962"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="966"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="966"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d3" verbose="Uninitialized variable: d3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="966"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="970"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="970"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld3" verbose="Uninitialized variable: ld3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="970"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="977"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="977"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="981"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="981"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="985"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="985"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="992"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="992"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="996"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="996"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1000"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1000"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1007"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1007"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1011"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1011"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1015"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1015"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: filename" verbose="Uninitialized variable: filename" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1023"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: mode" verbose="Uninitialized variable: mode" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1023"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream1" verbose="Uninitialized variable: stream1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1033"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream2" verbose="Uninitialized variable: stream2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1035"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1033"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1037"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument1" verbose="Uninitialized variable: argument1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1033"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument2" verbose="Uninitialized variable: argument2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1039"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream1" verbose="Uninitialized variable: stream1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1052"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream2" verbose="Uninitialized variable: stream2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1054"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1052"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1056"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream1" verbose="Uninitialized variable: stream1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1071"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream2" verbose="Uninitialized variable: stream2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1073"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1071"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1075"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1088"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1088"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1096"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1096"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string" verbose="Uninitialized variable: string" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1104"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1104"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string" verbose="Uninitialized variable: string" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1112"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1112"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ptr" verbose="Uninitialized variable: ptr" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1122"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1122"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: nobj" verbose="Uninitialized variable: nobj" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1122"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1122"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: block" verbose="Uninitialized variable: block" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1130"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: filename" verbose="Uninitialized variable: filename" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1139"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: mode" verbose="Uninitialized variable: mode" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1139"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1139"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1148"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1148"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1153"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1153"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1158"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i3" verbose="Uninitialized variable: i3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1158"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1165"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1165"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1169"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1169"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1173"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1173"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1182"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1182"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1192"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1192"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1202"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1202"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1211"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: offset" verbose="Uninitialized variable: offset" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1211"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: origin" verbose="Uninitialized variable: origin" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1211"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1219"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ptr" verbose="Uninitialized variable: ptr" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1219"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buffer" verbose="Uninitialized variable: buffer" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1228"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1228"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1228"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buffer" verbose="Uninitialized variable: buffer" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1237"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1237"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1237"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1244"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1252"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: mode" verbose="Uninitialized variable: mode" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1252"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ptr" verbose="Uninitialized variable: ptr" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1262"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1262"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: nobj" verbose="Uninitialized variable: nobj" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1262"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1262"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string" verbose="Uninitialized variable: string" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1270"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1270"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pmb" verbose="Uninitialized variable: pmb" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1279"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1279"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pmb1" verbose="Uninitialized variable: pmb1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1288"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pmb2" verbose="Uninitialized variable: pmb2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1290"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max1" verbose="Uninitialized variable: max1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1288"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max2" verbose="Uninitialized variable: max2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1292"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps1" verbose="Uninitialized variable: ps1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1288"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps2" verbose="Uninitialized variable: ps2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1294"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1312"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1319"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ws" verbose="Uninitialized variable: ws" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1328"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1328"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1328"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dest" verbose="Uninitialized variable: dest" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1338"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: src" verbose="Uninitialized variable: src" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1338"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1338"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1338"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wc" verbose="Uninitialized variable: wc" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1345"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1353"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wc" verbose="Uninitialized variable: wc" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1353"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wcstr" verbose="Uninitialized variable: wcstr" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1362"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1362"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1369"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1376"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1384"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1384"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1392"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1392"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: name" verbose="Uninitialized variable: name" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1399"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1406"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1413"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1420"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1427"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1434"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1441"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1449"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1456"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1463"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1470"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1477"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1484"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1491"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1498"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1505"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1512"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1520"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1527"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1534"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: property" verbose="Uninitialized variable: property" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1541"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: property" verbose="Uninitialized variable: property" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1548"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: li" verbose="Uninitialized variable: li" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1555"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: lli" verbose="Uninitialized variable: lli" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1559"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fd" verbose="Uninitialized variable: fd" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1567"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: e1" verbose="Uninitialized variable: e1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1567"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dc" verbose="Uninitialized variable: dc" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1572"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: e2" verbose="Uninitialized variable: e2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1572"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ldc" verbose="Uninitialized variable: ldc" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1577"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: e3" verbose="Uninitialized variable: e3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1577"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1584"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1588"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1592"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1599"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1603"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1607"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1614"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1618"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1622"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1629"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1633"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1637"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1644"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1648"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1652"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1659"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1663"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1667"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: seed" verbose="Uninitialized variable: seed" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1674"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: l1" verbose="Uninitialized variable: l1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1682"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: l2" verbose="Uninitialized variable: l2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1682"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ll1" verbose="Uninitialized variable: ll1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1687"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ll2" verbose="Uninitialized variable: ll2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1687"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1694"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1701"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1705"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1709"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1716"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1720"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1724"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1731"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1735"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1739"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1746"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1746"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1750"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1750"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1754"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1754"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1761"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1761"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1765"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1765"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1769"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1769"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1776"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1783"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1787"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1791"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1798"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1798"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1802"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1802"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1806"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1806"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1813"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1813"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1817"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1817"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1821"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1821"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1828"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1828"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1832"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1832"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1836"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1836"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tagp1" verbose="Uninitialized variable: tagp1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1843"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tagp2" verbose="Uninitialized variable: tagp2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1845"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tagp3" verbose="Uninitialized variable: tagp3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1847"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1854"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1861"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1868"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1868"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1875"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1879"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1883"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1890"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1894"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1898"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1905"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1909"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1913"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1920"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1924"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1928"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1935"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1939"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1943"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1950"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1950"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1954"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1954"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1958"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1958"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1965"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1965"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1969"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1969"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1973"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1973"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: env" verbose="Uninitialized variable: env" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1981"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: val" verbose="Uninitialized variable: val" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1981"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1988"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1998"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1998"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1998"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2007"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2007"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2007"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2016"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2016"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2016"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2025"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2025"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2025"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2034"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2034"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2034"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2043"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2043"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2043"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2052"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2052"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2052"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2061"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2061"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2061"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2070"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2070"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2070"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2079"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2079"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2079"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2086"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2094"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2094"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2099"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2099"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2104"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2104"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string" verbose="Uninitialized variable: string" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2111"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2118"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2118"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2122"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2122"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2126"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2126"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2133"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2133"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2137"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2137"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2141"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2141"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f1" verbose="Uninitialized variable: f1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2149"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f2" verbose="Uninitialized variable: f2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2149"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2149"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d1" verbose="Uninitialized variable: d1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2154"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d2" verbose="Uninitialized variable: d2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2154"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2154"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld1" verbose="Uninitialized variable: ld1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2159"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld2" verbose="Uninitialized variable: ld2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2159"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i3" verbose="Uninitialized variable: i3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2159"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format_1" verbose="Uninitialized variable: format_1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2169"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format_2" verbose="Uninitialized variable: format_2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2173"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format_3" verbose="Uninitialized variable: format_3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2175"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument1" verbose="Uninitialized variable: argument1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2169"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument2" verbose="Uninitialized variable: argument2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2171"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2187"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2189"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2203"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2205"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: key" verbose="Uninitialized variable: key" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2220"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base" verbose="Uninitialized variable: base" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2220"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: num" verbose="Uninitialized variable: num" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2220"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2220"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base" verbose="Uninitialized variable: base" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2242"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2242"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2242"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2250"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2250"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2258"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2258"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2265"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2272"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2279"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: block" verbose="Uninitialized variable: block" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2287"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: newsize" verbose="Uninitialized variable: newsize" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2287"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2295"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2303"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2303"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2310"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2317"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2321"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2325"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2333"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2333"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2338"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2338"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2343"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i3" verbose="Uninitialized variable: i3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2343"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2351"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2351"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2356"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2356"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2361"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i3" verbose="Uninitialized variable: i3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2361"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2368"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2375"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2382"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2390"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2400"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2400"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2410"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2410"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2419"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2428"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2436"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2446"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buf" verbose="Uninitialized variable: buf" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2446"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: mode" verbose="Uninitialized variable: mode" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2446"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2446"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: deststr1" verbose="Uninitialized variable: deststr1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2454"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: deststr2" verbose="Uninitialized variable: deststr2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2458"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: srcstr1" verbose="Uninitialized variable: srcstr1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2454"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: srcstr2" verbose="Uninitialized variable: srcstr2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2456"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: deststr_1" verbose="Uninitialized variable: deststr_1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2469"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: deststr_2" verbose="Uninitialized variable: deststr_2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2473"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: srcstr1" verbose="Uninitialized variable: srcstr1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2469"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: srcstr2" verbose="Uninitialized variable: srcstr2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2471"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wc" verbose="Uninitialized variable: wc" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2485"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2493"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2493"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2501"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2501"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str1" verbose="Uninitialized variable: str1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2509"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str2" verbose="Uninitialized variable: str2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2509"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str1" verbose="Uninitialized variable: str1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2517"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str2" verbose="Uninitialized variable: str2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2517"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str1" verbose="Uninitialized variable: str1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2525"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str2" verbose="Uninitialized variable: str2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2525"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str1" verbose="Uninitialized variable: str1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2533"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str2" verbose="Uninitialized variable: str2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2533"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2543"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2543"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: fmt" verbose="Uninitialized variable: fmt" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2543"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: p" verbose="Uninitialized variable: p" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2543"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2550"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2557"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2566"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2566"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2566"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2574"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2574"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_1" verbose="Uninitialized variable: ct_1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2583"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_2" verbose="Uninitialized variable: ct_2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2585"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2583"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2587"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2583"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2589"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_1" verbose="Uninitialized variable: ct_1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2601"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct_2" verbose="Uninitialized variable: ct_2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2603"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2601"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2605"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2601"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2607"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct1" verbose="Uninitialized variable: ct1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2619"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct2" verbose="Uninitialized variable: ct2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2621"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2619"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2623"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2619"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2625"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct1" verbose="Uninitialized variable: ct1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2637"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct2" verbose="Uninitialized variable: ct2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2639"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2637"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2641"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2637"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2643"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2654"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2654"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2662"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2662"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2670"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2670"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ss" verbose="Uninitialized variable: ss" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2679"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2679"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ss" verbose="Uninitialized variable: ss" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2688"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2688"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ds" verbose="Uninitialized variable: ds" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2696"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ss" verbose="Uninitialized variable: ss" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2696"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: category" verbose="Uninitialized variable: category" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2704"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: locale" verbose="Uninitialized variable: locale" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2704"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2710"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2718"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2718"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2726"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2726"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2734"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2734"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2743"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2743"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2743"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2751"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2751"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: cs" verbose="Uninitialized variable: cs" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2759"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2759"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: str" verbose="Uninitialized variable: str" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2767"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2767"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ws" verbose="Uninitialized variable: ws" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2775"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wc" verbose="Uninitialized variable: wc" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2775"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: p" verbose="Uninitialized variable: p" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2785"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: len" verbose="Uninitialized variable: len" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2785"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2785"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2793"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2793"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2802"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2804"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base1" verbose="Uninitialized variable: base1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2802"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base2" verbose="Uninitialized variable: base2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2804"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2812"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2814"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s3" verbose="Uninitialized variable: s3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2816"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2826"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2828"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s3" verbose="Uninitialized variable: s3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2830"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s4" verbose="Uninitialized variable: s4" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2832"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s5" verbose="Uninitialized variable: s5" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2834"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s6" verbose="Uninitialized variable: s6" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2836"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s7" verbose="Uninitialized variable: s7" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2838"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s8" verbose="Uninitialized variable: s8" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2840"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base1" verbose="Uninitialized variable: base1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2826"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base2" verbose="Uninitialized variable: base2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2828"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base3" verbose="Uninitialized variable: base3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2830"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base4" verbose="Uninitialized variable: base4" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2832"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base5" verbose="Uninitialized variable: base5" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2834"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base6" verbose="Uninitialized variable: base6" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2836"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base7" verbose="Uninitialized variable: base7" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2838"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base8" verbose="Uninitialized variable: base8" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2840"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: tp" verbose="Uninitialized variable: tp" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2847"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2854"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2861"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2868"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2876"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2878"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s3" verbose="Uninitialized variable: s3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2880"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx1" verbose="Uninitialized variable: idx1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2904"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx2" verbose="Uninitialized variable: idx2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2906"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx3" verbose="Uninitialized variable: idx3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2908"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx4" verbose="Uninitialized variable: idx4" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2910"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx5" verbose="Uninitialized variable: idx5" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2912"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx6" verbose="Uninitialized variable: idx6" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2914"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx7" verbose="Uninitialized variable: idx7" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2916"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx8" verbose="Uninitialized variable: idx8" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2918"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx9" verbose="Uninitialized variable: idx9" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2920"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx10" verbose="Uninitialized variable: idx10" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2922"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx11" verbose="Uninitialized variable: idx11" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2924"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx12" verbose="Uninitialized variable: idx12" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2926"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx13" verbose="Uninitialized variable: idx13" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2928"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx14" verbose="Uninitialized variable: idx14" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2930"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx15" verbose="Uninitialized variable: idx15" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2932"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: idx16" verbose="Uninitialized variable: idx16" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2934"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2949"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: l" verbose="Uninitialized variable: l" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2951"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ll" verbose="Uninitialized variable: ll" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2953"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: u" verbose="Uninitialized variable: u" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2955"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ul" verbose="Uninitialized variable: ul" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2957"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ull" verbose="Uninitialized variable: ull" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2959"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2961"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2963"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2965"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2980"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: l" verbose="Uninitialized variable: l" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2982"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ll" verbose="Uninitialized variable: ll" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2984"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: u" verbose="Uninitialized variable: u" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2986"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ul" verbose="Uninitialized variable: ul" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2988"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ull" verbose="Uninitialized variable: ull" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2990"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: f" verbose="Uninitialized variable: f" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2992"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: d" verbose="Uninitialized variable: d" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2994"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ld" verbose="Uninitialized variable: ld" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2996"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pmb" verbose="Uninitialized variable: pmb" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3006"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: max" verbose="Uninitialized variable: max" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3006"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ps" verbose="Uninitialized variable: ps" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3006"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3015"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ct" verbose="Uninitialized variable: ct" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3015"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: ptr" verbose="Uninitialized variable: ptr" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3015"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3024"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3026"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base1" verbose="Uninitialized variable: base1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3024"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base2" verbose="Uninitialized variable: base2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3026"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3035"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3037"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s3" verbose="Uninitialized variable: s3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3039"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s4" verbose="Uninitialized variable: s4" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3041"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s5" verbose="Uninitialized variable: s5" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3043"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s6" verbose="Uninitialized variable: s6" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3045"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s7" verbose="Uninitialized variable: s7" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3047"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s8" verbose="Uninitialized variable: s8" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3049"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base1" verbose="Uninitialized variable: base1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3035"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base2" verbose="Uninitialized variable: base2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3037"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base3" verbose="Uninitialized variable: base3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3039"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base4" verbose="Uninitialized variable: base4" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3041"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base5" verbose="Uninitialized variable: base5" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3043"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base6" verbose="Uninitialized variable: base6" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3045"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base7" verbose="Uninitialized variable: base7" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3047"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: base8" verbose="Uninitialized variable: base8" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3049"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3057"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3059"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format3" verbose="Uninitialized variable: format3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3063"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument1" verbose="Uninitialized variable: argument1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3057"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: argument2" verbose="Uninitialized variable: argument2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3061"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3075"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3075"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3075"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3084"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3084"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3084"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3094"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3094"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3113"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n" verbose="Uninitialized variable: n" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3113"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3113"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3122"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3122"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3122"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3132"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3134"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3132"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3136"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i1" verbose="Uninitialized variable: i1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3132"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i2" verbose="Uninitialized variable: i2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3138"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3132"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3140"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s1" verbose="Uninitialized variable: s1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3154"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s2" verbose="Uninitialized variable: s2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3156"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3154"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3158"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3154"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3160"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3173"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3175"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string1" verbose="Uninitialized variable: string1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3184"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: string2" verbose="Uninitialized variable: string2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3186"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format" verbose="Uninitialized variable: format" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3184"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: stream" verbose="Uninitialized variable: stream" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3195"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3195"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3197"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3206"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format1" verbose="Uninitialized variable: format1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3206"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: format2" verbose="Uninitialized variable: format2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3208"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3215"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3222"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3243"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: wc" verbose="Uninitialized variable: wc" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3247"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: p" verbose="Uninitialized variable: p" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3254"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: p" verbose="Uninitialized variable: p" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3261"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pos1" verbose="Uninitialized variable: pos1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3269"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pos2" verbose="Uninitialized variable: pos2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3276"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pos3" verbose="Uninitialized variable: pos3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3278"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pos4" verbose="Uninitialized variable: pos4" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3283"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pos5" verbose="Uninitialized variable: pos5" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3288"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pos6" verbose="Uninitialized variable: pos6" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3290"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pos7" verbose="Uninitialized variable: pos7" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3294"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pc" verbose="Uninitialized variable: pc" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3274"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pc2" verbose="Uninitialized variable: pc2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3296"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c" verbose="Uninitialized variable: c" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3283"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n1" verbose="Uninitialized variable: n1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3288"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n2" verbose="Uninitialized variable: n2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3290"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: n3" verbose="Uninitialized variable: n3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3292"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3304"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: size" verbose="Uninitialized variable: size" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3312"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pStrUninit" verbose="Uninitialized variable: pStrUninit" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3319"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pWStrUninit" verbose="Uninitialized variable: pWStrUninit" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3323"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit1" verbose="Uninitialized variable: uninit1" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3594"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit2" verbose="Uninitialized variable: uninit2" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3596"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit3" verbose="Uninitialized variable: uninit3" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3602"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: s" verbose="Uninitialized variable: s" cwe="457" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3208"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;block&amp;#039; is not assigned a value." verbose="Variable &amp;#039;block&amp;#039; is not assigned a value." cwe="665" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1128"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;f1&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;f1&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3633"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;f2&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;f2&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3635"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1052"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1061"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1071"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1080"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1192"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1202"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2187"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2194"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2203"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2210"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2400"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2410"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2419"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2428"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3094"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3113"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3154"/>
        </error>
        <error id="va_list_usedBeforeStarted" severity="error" msg="va_list &amp;#039;arg&amp;#039; used before va_start() was called." verbose="va_list &amp;#039;arg&amp;#039; used before va_start() was called." cwe="664" file0="test/cfg/std.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3165"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignoredReturnValue_abs&amp;#039; is never used." verbose="The function &amp;#039;ignoredReturnValue_abs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3336"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignoredReturnValue_locale_global&amp;#039; is never used." verbose="The function &amp;#039;ignoredReturnValue_locale_global&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3352"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignoredReturnValue_make_pair&amp;#039; is never used." verbose="The function &amp;#039;ignoredReturnValue_make_pair&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3358"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignoredReturnValue_string_compare&amp;#039; is never used." verbose="The function &amp;#039;ignoredReturnValue_string_compare&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3344"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_abs&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_abs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3326"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArg_log10&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArg_log10&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="34"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;minsize_bsearch&amp;#039; is never used." verbose="The function &amp;#039;minsize_bsearch&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2223"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_asctime&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_asctime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3376"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_atexit&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_atexit&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3452"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_atof&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_atof&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3458"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_fegetenv&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_fegetenv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3398"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_fegetexceptflag&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_fegetexceptflag&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3407"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_feholdexcept&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_feholdexcept&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3416"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_fesetenv&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_fesetenv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3425"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_fesetexceptflag&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_fesetexceptflag&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3434"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_feupdateenv&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_feupdateenv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3443"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_ifstream_read&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_ifstream_read&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3364"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_istream_read&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_istream_read&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3370"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_mbrlen&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_mbrlen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1299"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_memcmp&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_memcmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3467"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_vsprintf&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_vsprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3097"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_wcsftime&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_wcsftime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3387"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_wmemcmp&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_wmemcmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3473"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_memmove&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_memmove&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="156"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_strcat&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_strcat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="93"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_strncat&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_strncat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="101"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_strncpy&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_strncpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="147"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_wcscat&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_wcscat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="85"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_wcscpy&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_wcscpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="127"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_wcsncat&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_wcsncat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="114"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction_wcsncpy&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction_wcsncpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="138"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;returnValue_std_isgreater&amp;#039; is never used." verbose="The function &amp;#039;returnValue_std_isgreater&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="219"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;returnValue_std_isgreaterequal&amp;#039; is never used." verbose="The function &amp;#039;returnValue_std_isgreaterequal&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="227"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;returnValue_std_isless&amp;#039; is never used." verbose="The function &amp;#039;returnValue_std_isless&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="235"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;returnValue_std_islessequal&amp;#039; is never used." verbose="The function &amp;#039;returnValue_std_islessequal&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="243"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;returnValue_std_islessgreater&amp;#039; is never used." verbose="The function &amp;#039;returnValue_std_islessgreater&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="251"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;std_bitset_all_ignoredReturnValue&amp;#039; is never used." verbose="The function &amp;#039;std_bitset_all_ignoredReturnValue&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="171"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;std_bitset_any_ignoredReturnValue&amp;#039; is never used." verbose="The function &amp;#039;std_bitset_any_ignoredReturnValue&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="187"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;std_bitset_count_ignoredReturnValue&amp;#039; is never used." verbose="The function &amp;#039;std_bitset_count_ignoredReturnValue&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="203"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;std_bitset_none_ignoredReturnValue&amp;#039; is never used." verbose="The function &amp;#039;std_bitset_none_ignoredReturnValue&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="179"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;std_bitset_size_ignoredReturnValue&amp;#039; is never used." verbose="The function &amp;#039;std_bitset_size_ignoredReturnValue&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="195"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;std_bitset_test_ignoredReturnValue&amp;#039; is never used." verbose="The function &amp;#039;std_bitset_test_ignoredReturnValue&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="163"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;stdalgorithm&amp;#039; is never used." verbose="The function &amp;#039;stdalgorithm&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3489"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;stdbind&amp;#039; is never used." verbose="The function &amp;#039;stdbind&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3625"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;stdstring&amp;#039; is never used." verbose="The function &amp;#039;stdstring&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3570"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;stdvector&amp;#039; is never used." verbose="The function &amp;#039;stdvector&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3580"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitar_fopen&amp;#039; is never used." verbose="The function &amp;#039;uninitar_fopen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1018"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitar_fprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitar_fprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1027"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitar_vfprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitar_vfprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1045"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitar_vfwprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitar_vfwprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1064"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_abs&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_abs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="277"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_acos&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_acos&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="371"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_acosh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_acosh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="386"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_asctime&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_asctime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="401"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_asin&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_asin&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="454"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_asinh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_asinh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="469"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_atan&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_atan&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="523"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_atan2&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_atan2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="583"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_atanh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_atanh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="568"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_atof&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_atof&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="598"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_atol&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_atol&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="605"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_btowc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_btowc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1308"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_cbrt&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_cbrt&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="648"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ceil&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ceil&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="618"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_clearerr&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_clearerr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="678"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_copysign&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_copysign&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="633"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_cos&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_cos&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="663"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_cosh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_cosh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="685"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ctime&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ctime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="749"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_difftime&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_difftime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="756"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_div&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_div&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="763"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_erf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_erf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="788"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_erfc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_erfc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="803"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_exit&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_exit&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="781"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_exp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_exp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="818"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_exp2&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_exp2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="833"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_expm1&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_expm1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="848"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fabs&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fabs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="863"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fclose&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fclose&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="893"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fdim&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fdim&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="878"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_feclearexcept&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_feclearexcept&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="714"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_feof&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_feof&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="907"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_feraiseexcept&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_feraiseexcept&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="700"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ferror&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ferror&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="900"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fesetenv&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fesetenv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="721"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fesetexceptflag&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fesetexceptflag&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="707"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fesetround&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fesetround&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="728"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fetestexcept&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fetestexcept&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="735"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_feupdateenv&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_feupdateenv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="742"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fflush&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fflush&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="914"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fgetc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fgetc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="921"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fgetpos&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fgetpos&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="935"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fgets&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fgets&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1222"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fgetwc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fgetwc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="928"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fgetws&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fgetws&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1231"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_find&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_find&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3264"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_floor&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_floor&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="943"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fma&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fma&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="958"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fmax&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fmax&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="973"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fmin&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fmin&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="988"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fmod&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fmod&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1003"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fpclassify&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fpclassify&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1712"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fputc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fputc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1083"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fputs&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fputs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1099"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fputwc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fputwc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1091"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fputws&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fputws&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1107"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fread&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fread&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1115"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_free&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_free&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1125"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_freopen&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_freopen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1133"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_frexp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_frexp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1143"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1176"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fseek&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fseek&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1205"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fsetpos&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fsetpos&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1214"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ftell&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ftell&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1240"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fwide&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fwide&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1247"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_fwrite&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_fwrite&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1255"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_getc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_getc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1365"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_getenv&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_getenv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1395"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_getwc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_getwc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1372"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_gmtime&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_gmtime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1402"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_hypot&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_hypot&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1161"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ilogb&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ilogb&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1871"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_imaxdiv&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_imaxdiv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="771"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isalnum&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isalnum&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="293"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isalpha&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isalpha&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="300"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isblank&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isblank&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1423"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iscntrl&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iscntrl&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="307"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isdigit&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isdigit&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="314"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isfinite&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isfinite&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1727"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isgraph&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isgraph&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="321"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isgreater&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isgreater&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1742"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isgreaterequal&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isgreaterequal&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1757"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isinf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isinf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1772"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isless&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isless&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1794"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_islessequal&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_islessequal&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1809"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_islessgreater&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_islessgreater&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1824"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_islower&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_islower&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="328"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isnan&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isnan&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1850"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isnormal&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isnormal&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1857"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isprint&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isprint&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="335"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ispunct&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ispunct&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1480"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isspace&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isspace&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="342"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isunordered&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isunordered&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1864"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isupper&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isupper&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="349"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswalnum&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswalnum&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1409"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswalpha&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswalpha&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1416"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswblank&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswblank&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1430"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswcntrl&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswcntrl&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1437"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswctype&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswctype&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1444"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswdigit&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswdigit&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1452"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswgraph&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswgraph&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1459"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswlower&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswlower&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1466"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswprint&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswprint&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1473"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswpunct&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswpunct&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1487"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswspace&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswspace&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1494"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswupper&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswupper&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1501"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_iswxdigit&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_iswxdigit&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1508"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_isxdigit&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_isxdigit&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="356"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_labs&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_labs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1551"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ldexp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ldexp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1562"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ldiv&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ldiv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1677"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_lgamma&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_lgamma&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1580"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_llrint&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_llrint&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1625"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_llround&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_llround&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1655"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_localtime&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_localtime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1690"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_log&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_log&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1697"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_log10&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_log10&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1886"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_log1p&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_log1p&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1901"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_log2&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_log2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1916"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_logb&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_logb&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1779"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_longjmp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_longjmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1976"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_lrint&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_lrint&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1610"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_lround&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_lround&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1640"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_malloc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_malloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1984"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mblen&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mblen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1265"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mbrlen&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mbrlen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1282"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mbsinit&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mbsinit&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1315"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mbsrtowcs&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mbsrtowcs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1331"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mbstowcs&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mbstowcs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1322"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mbtowc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mbtowc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1273"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_memchr&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_memchr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1992"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_memcmp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_memcmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2010"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_memcpy&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_memcpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2028"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_memmove&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_memmove&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2046"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_memset&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_memset&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2064"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mktime&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mktime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2082"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_nan&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_nan&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1839"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_nearbyint&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_nearbyint&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1931"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_nextafter&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_nextafter&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1946"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_nexttoward&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_nexttoward&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1961"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_pow&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_pow&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2114"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_proj&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_proj&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="363"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_putc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_putc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2245"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_putchar&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_putchar&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2261"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_puts&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_puts&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2275"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_putwc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_putwc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2253"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_putwchar&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_putwchar&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2268"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_qsort&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_qsort&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2236"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_realloc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_realloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2282"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_remainder&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_remainder&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2129"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_remove&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_remove&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2291"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_remquo&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_remquo&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2144"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_rename&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_rename&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2298"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_resetiosflags&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_resetiosflags&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3232"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_rewind&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_rewind&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2306"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_rint&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_rint&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1595"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_round&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_round&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2313"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_setbase&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_setbase&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3257"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_setfill&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_setfill&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3239"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_setiosflags&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_setiosflags&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3225"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_setprecision&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_setprecision&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3250"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_setw&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_setw&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3218"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_signbit&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_signbit&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2364"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_sin&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_sin&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="439"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_sinh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_sinh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="424"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_sprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_sprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3069"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_sqrt&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_sqrt&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="409"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_srand&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_srand&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1670"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_std_next&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_std_next&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="39"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_std_prev&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_std_prev&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="62"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_strcat&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_strcat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2449"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_string_compare&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_string_compare&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3315"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_swprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_swprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3078"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_system&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_system&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3211"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_tan&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_tan&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="493"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_tanh&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_tanh&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="508"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_tgamma&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_tgamma&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="538"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_time&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_time&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2843"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_tmpnam&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_tmpnam&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2850"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_towctrans&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_towctrans&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1515"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_trunc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_trunc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="553"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ungetc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ungetc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1379"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_ungetwc&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_ungetwc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1387"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vfscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vfscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1185"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vfwscanf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vfwscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1195"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vsprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vsprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3087"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_vswprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_vswprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3105"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcscat&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcscat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2464"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcsftime&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcsftime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="484"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wcstombs&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wcstombs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1356"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wctob&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wctob&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1341"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wctomb&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wctomb&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1348"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wctrans&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wctrans&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1537"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wctype&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wctype&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="1544"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wmemchr&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wmemchr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2001"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wmemcmp&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wmemcmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2019"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wmemcpy&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wmemcpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2037"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wmemmove&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wmemmove&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2055"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wmemset&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wmemset&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2073"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wprintf&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3052"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_bsearch&amp;#039; is never used." verbose="The function &amp;#039;uninivar_bsearch&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2213"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_fwprintf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_fwprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3116"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_fwscanf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_fwscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3189"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_ifstream_read&amp;#039; is never used." verbose="The function &amp;#039;uninivar_ifstream_read&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3299"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_imaxabs&amp;#039; is never used." verbose="The function &amp;#039;uninivar_imaxabs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="284"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_istream_read&amp;#039; is never used." verbose="The function &amp;#039;uninivar_istream_read&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3307"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_mbrtowc&amp;#039; is never used." verbose="The function &amp;#039;uninivar_mbrtowc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2999"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_modf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_modf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2089"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_perror&amp;#039; is never used." verbose="The function &amp;#039;uninivar_perror&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2107"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_printf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_printf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2162"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_raise&amp;#039; is never used." verbose="The function &amp;#039;uninivar_raise&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2378"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_scalbln&amp;#039; is never used." verbose="The function &amp;#039;uninivar_scalbln&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2346"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_scalbn&amp;#039; is never used." verbose="The function &amp;#039;uninivar_scalbn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2328"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_scanf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_scanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2385"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_setbuf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_setbuf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2431"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_setlocale&amp;#039; is never used." verbose="The function &amp;#039;uninivar_setlocale&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2699"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_setvbuf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_setvbuf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2439"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_signal&amp;#039; is never used." verbose="The function &amp;#039;uninivar_signal&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2371"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_snprintf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_snprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3125"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_sscanf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_sscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3178"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_stoX&amp;#039; is never used." verbose="The function &amp;#039;uninivar_stoX&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2883"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strchr&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strchr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2488"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strcmp&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strcmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2504"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strcoll&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strcoll&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2746"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strcpy&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strcpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2520"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strcspn&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strcspn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2713"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strerror&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strerror&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2706"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strftime&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strftime&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2536"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strlen&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strlen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2546"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strncat&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strncat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2577"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strncmp&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strncmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2613"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strncpy&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strncpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2560"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strpbrk&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strpbrk&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2569"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strrchr&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strrchr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2762"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strspn&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strspn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2665"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strstr&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strstr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2649"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strtof&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strtof&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2807"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strtoimax&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strtoimax&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2796"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strtok&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strtok&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2788"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strtol&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strtol&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2819"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_strxfrm&amp;#039; is never used." verbose="The function &amp;#039;uninivar_strxfrm&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2673"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_swscanf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_swscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3200"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_to_string&amp;#039; is never used." verbose="The function &amp;#039;uninivar_to_string&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2937"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_to_wstring&amp;#039; is never used." verbose="The function &amp;#039;uninivar_to_wstring&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2968"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_tolower&amp;#039; is never used." verbose="The function &amp;#039;uninivar_tolower&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2857"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_toupper&amp;#039; is never used." verbose="The function &amp;#039;uninivar_toupper&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2864"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_vprintf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_vprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2181"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_vscanf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_vscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2413"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_vsnprintf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_vsnprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3146"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_vsscanf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_vsscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2393"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_vswscanf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_vswscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2403"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_vwprintf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_vwprintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2197"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_vwscanf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_vwscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2422"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcrtomb&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcrtomb&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2479"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcschr&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcschr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2496"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcscmp&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcscmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2512"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcscoll&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcscoll&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2754"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcscpy&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcscpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2528"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcscspn&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcscspn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2721"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcslen&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcslen&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2553"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcsncat&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcsncat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2595"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcsncmp&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcsncmp&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2631"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcsncpy&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcsncpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2737"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcspbrk&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcspbrk&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2729"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcsrchr&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcsrchr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2770"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcsrtombs&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcsrtombs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2778"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcsspn&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcsspn&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2691"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcsstr&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcsstr&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2657"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcstof&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcstof&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2871"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcstoimax&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcstoimax&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3018"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcstok&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcstok&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3009"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcstol&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcstol&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3029"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wcsxfrm&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wcsxfrm&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="2682"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninivar_wscanf&amp;#039; is never used." verbose="The function &amp;#039;uninivar_wscanf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="3168"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;valid_code&amp;#039; is never used." verbose="The function &amp;#039;valid_code&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\std.cpp" line="211"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;buf[10]&amp;#039; accessed at index 10, which is out of bounds." verbose="Array &amp;#039;buf[10]&amp;#039; accessed at index 10, which is out of bounds." cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="330"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="337"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf2" verbose="Buffer is accessed out of bounds: byteBuf2" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="337"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="340"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf2" verbose="Buffer is accessed out of bounds: byteBuf2" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="340"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="342"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf2" verbose="Buffer is accessed out of bounds: byteBuf2" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="342"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="345"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf2" verbose="Buffer is accessed out of bounds: byteBuf2" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="345"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="348"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf2" verbose="Buffer is accessed out of bounds: byteBuf2" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="348"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="351"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf2" verbose="Buffer is accessed out of bounds: byteBuf2" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="351"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="353"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="355"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="357"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="359"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="361"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: byteBuf" verbose="Buffer is accessed out of bounds: byteBuf" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="363"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: pAlloc1" verbose="Buffer is accessed out of bounds: pAlloc1" cwe="788" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="368" info="Buffer overrun"/>
            <location file="test\cfg\windows.cpp" line="365" info="Assign pAlloc1, buffer with size 32"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function memcmp() is not used." verbose="Return value of function memcmp() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="337"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function memcmp() is not used." verbose="Return value of function memcmp() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="340"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function GetProcAddress() is not used." verbose="Return value of function GetProcAddress() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="612"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function _malloca() is not used." verbose="Return value of function _malloca() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="624"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function _alloca() is not used." verbose="Return value of function _alloca() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="626"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function GetLastError() is not used." verbose="Return value of function GetLastError() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="629"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function GetProcessHeap() is not used." verbose="Return value of function GetProcessHeap() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="632"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function HeapAlloc() is not used." verbose="Return value of function HeapAlloc() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="635"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function HeapReAlloc() is not used." verbose="Return value of function HeapReAlloc() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="638"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function _fileno() is not used." verbose="Return value of function _fileno() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="644"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function lstrlen() is not used." verbose="Return value of function lstrlen() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="648"/>
        </error>
        <error id="ignoredReturnValue" severity="warning" msg="Return value of function _fileno() is not used." verbose="Return value of function _fileno() is not used." cwe="252" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="743"/>
        </error>
        <error id="lstrcatCalled" severity="style" msg="Due to security concerns it is not recommended to use this function, see MSDN for details." verbose="Due to security concerns it is not recommended to use this function, see MSDN for details." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="153"/>
        </error>
        <error id="strlwrCalled" severity="style" msg="Obsolete function &amp;#039;strlwr&amp;#039; called. It is recommended to use &amp;#039;_strlwr&amp;#039; or &amp;#039;_strlwr_s&amp;#039; instead." verbose="Obsolete function &amp;#039;strlwr&amp;#039; called. It is recommended to use &amp;#039;_strlwr&amp;#039; or &amp;#039;_strlwr_s&amp;#039; instead." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="156"/>
        </error>
        <error id="struprCalled" severity="style" msg="Obsolete function &amp;#039;strupr&amp;#039; called. It is recommended to use &amp;#039;_strupr&amp;#039; or &amp;#039;_strupr_s&amp;#039; instead." verbose="Obsolete function &amp;#039;strupr&amp;#039; called. It is recommended to use &amp;#039;_strupr&amp;#039; or &amp;#039;_strupr_s&amp;#039; instead." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="158"/>
        </error>
        <error id="LocalAllocCalled" severity="style" msg="Obsolete function &amp;#039;LocalAlloc&amp;#039; called. It is recommended to use &amp;#039;HeapAlloc&amp;#039; instead." verbose="Obsolete function &amp;#039;LocalAlloc&amp;#039; called. It is recommended to use &amp;#039;HeapAlloc&amp;#039; instead." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="285"/>
        </error>
        <error id="lstrlenCalled" severity="style" msg="Due to security concerns it is not recommended to use this function, see MSDN for details." verbose="Due to security concerns it is not recommended to use this function, see MSDN for details." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="289"/>
        </error>
        <error id="lstrlenCalled" severity="style" msg="Due to security concerns it is not recommended to use this function, see MSDN for details." verbose="Due to security concerns it is not recommended to use this function, see MSDN for details." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="291"/>
        </error>
        <error id="lstrcatCalled" severity="style" msg="Due to security concerns it is not recommended to use this function, see MSDN for details." verbose="Due to security concerns it is not recommended to use this function, see MSDN for details." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="392"/>
        </error>
        <error id="lstrcatCalled" severity="style" msg="Due to security concerns it is not recommended to use this function, see MSDN for details." verbose="Due to security concerns it is not recommended to use this function, see MSDN for details." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="396"/>
        </error>
        <error id="strlwrCalled" severity="style" msg="Obsolete function &amp;#039;strlwr&amp;#039; called. It is recommended to use &amp;#039;_strlwr&amp;#039; or &amp;#039;_strlwr_s&amp;#039; instead." verbose="Obsolete function &amp;#039;strlwr&amp;#039; called. It is recommended to use &amp;#039;_strlwr&amp;#039; or &amp;#039;_strlwr_s&amp;#039; instead." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="425"/>
        </error>
        <error id="struprCalled" severity="style" msg="Obsolete function &amp;#039;strupr&amp;#039; called. It is recommended to use &amp;#039;_strupr&amp;#039; or &amp;#039;_strupr_s&amp;#039; instead." verbose="Obsolete function &amp;#039;strupr&amp;#039; called. It is recommended to use &amp;#039;_strupr&amp;#039; or &amp;#039;_strupr_s&amp;#039; instead." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="428"/>
        </error>
        <error id="LocalAllocCalled" severity="style" msg="Obsolete function &amp;#039;LocalAlloc&amp;#039; called. It is recommended to use &amp;#039;HeapAlloc&amp;#039; instead." verbose="Obsolete function &amp;#039;LocalAlloc&amp;#039; called. It is recommended to use &amp;#039;HeapAlloc&amp;#039; instead." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="491"/>
        </error>
        <error id="lstrlenCalled" severity="style" msg="Due to security concerns it is not recommended to use this function, see MSDN for details." verbose="Due to security concerns it is not recommended to use this function, see MSDN for details." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="648"/>
        </error>
        <error id="lstrcatCalled" severity="style" msg="Due to security concerns it is not recommended to use this function, see MSDN for details." verbose="Due to security concerns it is not recommended to use this function, see MSDN for details." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="700"/>
        </error>
        <error id="lstrcatCalled" severity="style" msg="Due to security concerns it is not recommended to use this function, see MSDN for details." verbose="Due to security concerns it is not recommended to use this function, see MSDN for details." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="705"/>
        </error>
        <error id="strlwrCalled" severity="style" msg="Obsolete function &amp;#039;strlwr&amp;#039; called. It is recommended to use &amp;#039;_strlwr&amp;#039; or &amp;#039;_strlwr_s&amp;#039; instead." verbose="Obsolete function &amp;#039;strlwr&amp;#039; called. It is recommended to use &amp;#039;_strlwr&amp;#039; or &amp;#039;_strlwr_s&amp;#039; instead." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="727"/>
        </error>
        <error id="struprCalled" severity="style" msg="Obsolete function &amp;#039;strupr&amp;#039; called. It is recommended to use &amp;#039;_strupr&amp;#039; or &amp;#039;_strupr_s&amp;#039; instead." verbose="Obsolete function &amp;#039;strupr&amp;#039; called. It is recommended to use &amp;#039;_strupr&amp;#039; or &amp;#039;_strupr_s&amp;#039; instead." cwe="477" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="730"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid CreateSemaphore() argument nr 3. The value is 0 but the valid values are &amp;#039;1:&amp;#039;." verbose="Invalid CreateSemaphore() argument nr 3. The value is 0 but the valid values are &amp;#039;1:&amp;#039;." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="655"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid CreateSemaphore() argument nr 4. A non-boolean value is required." verbose="Invalid CreateSemaphore() argument nr 4. A non-boolean value is required." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="658"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid CreateSemaphoreEx() argument nr 3. The value is 0 but the valid values are &amp;#039;1:&amp;#039;." verbose="Invalid CreateSemaphoreEx() argument nr 3. The value is 0 but the valid values are &amp;#039;1:&amp;#039;." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="661"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid CreateSemaphoreEx() argument nr 5. The value is 1 but the valid values are &amp;#039;0&amp;#039;." verbose="Invalid CreateSemaphoreEx() argument nr 5. The value is 1 but the valid values are &amp;#039;0&amp;#039;." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="664"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid CreateMutex() argument nr 3. A non-boolean value is required." verbose="Invalid CreateMutex() argument nr 3. A non-boolean value is required." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="669"/>
        </error>
        <error id="invalidFunctionArgBool" severity="error" msg="Invalid CreateMutex() argument nr 3. A non-boolean value is required." verbose="Invalid CreateMutex() argument nr 3. A non-boolean value is required." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="672"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid CreateMutexEx() argument nr 3. The value is 3 but the valid values are &amp;#039;0,1&amp;#039;." verbose="Invalid CreateMutexEx() argument nr 3. The value is 3 but the valid values are &amp;#039;0,1&amp;#039;." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="675"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid LoadLibraryEx() argument nr 2. The value is 1 but the valid values are &amp;#039;0&amp;#039;." verbose="Invalid LoadLibraryEx() argument nr 2. The value is 1 but the valid values are &amp;#039;0&amp;#039;." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="680"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid _malloca() argument nr 1. The value is -1 but the valid values are &amp;#039;0:&amp;#039;." verbose="Invalid _malloca() argument nr 1. The value is -1 but the valid values are &amp;#039;0:&amp;#039;." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="684"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid _alloca() argument nr 1. The value is -5 but the valid values are &amp;#039;0:&amp;#039;." verbose="Invalid _alloca() argument nr 1. The value is -5 but the valid values are &amp;#039;0:&amp;#039;." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="688"/>
        </error>
        <error id="invalidFunctionArg" severity="error" msg="Invalid CreateThread() argument nr 2. The value is -1 but the valid values are &amp;#039;0:&amp;#039;." verbose="Invalid CreateThread() argument nr 2. The value is -1 but the valid values are &amp;#039;0:&amp;#039;." cwe="628" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="915"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="error" msg="sprintf_s format string requires 2 parameters but only 1 is given." verbose="sprintf_s format string requires 2 parameters but only 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="750"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="error" msg="sprintf_s format string requires 2 parameters but only 1 is given." verbose="sprintf_s format string requires 2 parameters but only 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="753"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="warning" msg="sprintf_s format string requires 0 parameters but 1 is given." verbose="sprintf_s format string requires 0 parameters but 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="756"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="warning" msg="sprintf_s format string requires 0 parameters but 1 is given." verbose="sprintf_s format string requires 0 parameters but 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="759"/>
        </error>
        <error id="invalidPrintfArgType_s" severity="warning" msg="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." cwe="686" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="762"/>
        </error>
        <error id="invalidPrintfArgType_s" severity="warning" msg="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." cwe="686" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="765"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="error" msg="swprintf_s format string requires 2 parameters but only 1 is given." verbose="swprintf_s format string requires 2 parameters but only 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="770"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="error" msg="swprintf_s format string requires 2 parameters but only 1 is given." verbose="swprintf_s format string requires 2 parameters but only 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="773"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="warning" msg="swprintf_s format string requires 0 parameters but 1 is given." verbose="swprintf_s format string requires 0 parameters but 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="776"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="warning" msg="swprintf_s format string requires 0 parameters but 1 is given." verbose="swprintf_s format string requires 0 parameters but 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="779"/>
        </error>
        <error id="invalidPrintfArgType_s" severity="warning" msg="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." cwe="686" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="782"/>
        </error>
        <error id="invalidPrintfArgType_s" severity="warning" msg="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." cwe="686" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="785"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="error" msg="_stprintf_s format string requires 2 parameters but only 1 is given." verbose="_stprintf_s format string requires 2 parameters but only 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="790"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="error" msg="_stprintf_s format string requires 2 parameters but only 1 is given." verbose="_stprintf_s format string requires 2 parameters but only 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="793"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="warning" msg="_stprintf_s format string requires 0 parameters but 1 is given." verbose="_stprintf_s format string requires 0 parameters but 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="796"/>
        </error>
        <error id="wrongPrintfScanfArgNum" severity="warning" msg="_stprintf_s format string requires 0 parameters but 1 is given." verbose="_stprintf_s format string requires 0 parameters but 1 is given." cwe="685" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="799"/>
        </error>
        <error id="invalidPrintfArgType_s" severity="warning" msg="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." cwe="686" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="802"/>
        </error>
        <error id="invalidPrintfArgType_s" severity="warning" msg="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." verbose="%s in format string (no. 1) requires &amp;#039;char *&amp;#039; but the argument type is &amp;#039;signed int&amp;#039;." cwe="686" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="805"/>
        </error>
        <error id="mismatchAllocDealloc" severity="error" msg="Mismatching allocation and deallocation: pChar" verbose="Mismatching allocation and deallocation: pChar" cwe="762" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="376" info=""/>
            <location file="test\cfg\windows.cpp" line="374" info=""/>
        </error>
        <error id="mismatchAllocDealloc" severity="error" msg="Mismatching allocation and deallocation: pChar" verbose="Mismatching allocation and deallocation: pChar" cwe="762" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="380" info=""/>
            <location file="test\cfg\windows.cpp" line="378" info=""/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: pMem" verbose="Memory leak: pMem" cwe="401" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="467"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: pMem" verbose="Memory leak: pMem" cwe="401" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="485"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: pszBuf" verbose="Memory leak: pszBuf" cwe="401" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="497"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: hSemaphore" verbose="Resource leak: hSemaphore" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="505"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: hSemaphore" verbose="Resource leak: hSemaphore" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="513"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: hSemaphore" verbose="Resource leak: hSemaphore" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="521"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: hMutex" verbose="Resource leak: hMutex" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="529"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: hMutex" verbose="Resource leak: hMutex" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="537"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: hMutex" verbose="Resource leak: hMutex" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="545"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: hInstLib" verbose="Resource leak: hInstLib" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="555"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: hEvent" verbose="Resource leak: hEvent" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="563"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: hEvent" verbose="Resource leak: hEvent" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="571"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: hEvent" verbose="Resource leak: hEvent" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="579"/>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: sock" verbose="Resource leak: sock" cwe="775" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="587"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;OpenEvent&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;OpenEvent&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="413"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateSemaphoreW&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateSemaphoreW&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="592"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateSemaphoreExA&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateSemaphoreExA&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="594"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;OpenSemaphoreA&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;OpenSemaphoreA&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="596"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateMutexW&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateMutexW&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="599"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateMutexExA&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateMutexExA&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="601"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;OpenMutexA&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;OpenMutexA&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="603"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;LoadLibrary&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;LoadLibrary&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="606"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;LoadLibraryEx&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;LoadLibraryEx&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="608"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateEvent&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateEvent&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="616"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;OpenEvent&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;OpenEvent&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="618"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateEventEx&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateEventEx&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="620"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;_malloca&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;_malloca&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="624"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;HeapAlloc&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;HeapAlloc&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="635"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;HeapReAlloc&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;HeapReAlloc&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="638"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;socket&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;socket&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="641"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="895"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="898"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="901"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="904"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="907"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="911"/>
        </error>
        <error id="leakReturnValNotUsed" severity="error" msg="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." verbose="Return value of allocation function &amp;#039;CreateThread&amp;#039; is not stored." cwe="771" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="915"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: p" verbose="Null pointer dereference: p" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="77" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="75" info="Assignment &amp;#039;p=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: pSec" verbose="Null pointer dereference: pSec" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="120" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="118" info="Assignment &amp;#039;pSec=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: pHours" verbose="Null pointer dereference: pHours" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="130" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="128" info="Assignment &amp;#039;pHours=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: phModule" verbose="Null pointer dereference: phModule" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="409" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="407" info="Assignment &amp;#039;phModule=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: hEvent" verbose="Null pointer dereference: hEvent" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="416" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="414" info="Assignment &amp;#039;hEvent=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: hEvent" verbose="Null pointer dereference: hEvent" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="418" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="414" info="Assignment &amp;#039;hEvent=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: hEvent" verbose="Null pointer dereference: hEvent" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="420" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="414" info="Assignment &amp;#039;hEvent=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: str" verbose="Null pointer dereference: str" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="425" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="422" info="Assignment &amp;#039;str=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: str" verbose="Null pointer dereference: str" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="428" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="422" info="Assignment &amp;#039;str=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: pIntNull" verbose="Null pointer dereference: pIntNull" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="454" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="445" info="Assignment &amp;#039;pIntNull=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: pIntNull" verbose="Null pointer dereference: pIntNull" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="458" info="Null pointer dereference"/>
            <location file="test\cfg\windows.cpp" line="445" info="Assignment &amp;#039;pIntNull=NULL&amp;#039;, assigned value is 0"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="77"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="120"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="130"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="387"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="392"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="396"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="400"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="405"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="409"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="413"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="416"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="418"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="420"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="425"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="428"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="431"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="433"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="440"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="448"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="450"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="452"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="454"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="456"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="458"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="911"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="939"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="941"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="969"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="971"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="1002"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference" verbose="Null pointer dereference" cwe="476" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="1004"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;dwordInit&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;dwordInit&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="260" info="dwordInit is overwritten"/>
            <location file="test\cfg\windows.cpp" line="245" info="dwordInit is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;wordInit&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;wordInit&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="262" info="wordInit is overwritten"/>
            <location file="test\cfg\windows.cpp" line="258" info="wordInit is assigned"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &amp;#039;byteInit&amp;#039; is reassigned a value before the old one has been used." verbose="Variable &amp;#039;byteInit&amp;#039; is reassigned a value before the old one has been used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="266" info="byteInit is overwritten"/>
            <location file="test\cfg\windows.cpp" line="263" info="byteInit is assigned"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in _mbscat() is undefined behavior" verbose="Overlapping read/write in _mbscat() is undefined behavior" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="22"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in _memccpy() is undefined behavior" verbose="Overlapping read/write in _memccpy() is undefined behavior" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="31"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in _memccpy() is undefined behavior" verbose="Overlapping read/write in _memccpy() is undefined behavior" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="33"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in _mbscpy() is undefined behavior" verbose="Overlapping read/write in _mbscpy() is undefined behavior" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="41"/>
        </error>
        <error id="overlappingWriteFunction" severity="error" msg="Overlapping read/write in _swab() is undefined behavior" verbose="Overlapping read/write in _swab() is undefined behavior" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="49"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: p" verbose="Uninitialized variable: p" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="67"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: hSemaphore" verbose="Uninitialized variable: hSemaphore" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="695"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buf" verbose="Uninitialized variable: buf" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="700"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buf2" verbose="Uninitialized variable: buf2" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="705"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: hMutex1" verbose="Uninitialized variable: hMutex1" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="709"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: hMutex2" verbose="Uninitialized variable: hMutex2" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="711"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: hEvent1" verbose="Uninitialized variable: hEvent1" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="715"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: hEvent2" verbose="Uninitialized variable: hEvent2" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="717"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: hEvent3" verbose="Uninitialized variable: hEvent3" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="719"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: hEvent4" verbose="Uninitialized variable: hEvent4" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="721"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buf_uninit1" verbose="Uninitialized variable: buf_uninit1" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="727"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: buf_uninit2" verbose="Uninitialized variable: buf_uninit2" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="730"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dwordUninit" verbose="Uninitialized variable: dwordUninit" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="734"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: dwordUninit" verbose="Uninitialized variable: dwordUninit" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="738"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pFileUninit" verbose="Uninitialized variable: pFileUninit" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="743"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c1" verbose="Uninitialized variable: c1" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="835"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c2" verbose="Uninitialized variable: c2" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="837"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c1" verbose="Uninitialized variable: c1" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="844"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: c2" verbose="Uninitialized variable: c2" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="846"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="853"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: i" verbose="Uninitialized variable: i" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="860"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_dwStackSize" verbose="Uninitialized variable: uninit_dwStackSize" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="904"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_lpParameter" verbose="Uninitialized variable: uninit_lpParameter" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="898"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_dwCreationFlags" verbose="Uninitialized variable: uninit_dwCreationFlags" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="895"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_deststr" verbose="Uninitialized variable: uninit_deststr" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="927"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_srcstr1" verbose="Uninitialized variable: uninit_srcstr1" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="927"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_srcstr2" verbose="Uninitialized variable: uninit_srcstr2" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="929"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_strDestination" verbose="Uninitialized variable: uninit_strDestination" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="955"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_numberOfElements" verbose="Uninitialized variable: uninit_numberOfElements" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="957"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_strSource" verbose="Uninitialized variable: uninit_strSource" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="959"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_numberOfElements" verbose="Uninitialized variable: uninit_numberOfElements" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="986"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_strSource" verbose="Uninitialized variable: uninit_strSource" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="988"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_count" verbose="Uninitialized variable: uninit_count" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="990"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: uninit_locale" verbose="Uninitialized variable: uninit_locale" cwe="457" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="992"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;pMem&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;pMem&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="465"/>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &amp;#039;pMem&amp;#039; is allocated memory that is never used." verbose="Variable &amp;#039;pMem&amp;#039; is allocated memory that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="465"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;memSize&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;memSize&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="483"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hSemaphore&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hSemaphore&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="503"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hSemaphore&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hSemaphore&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="511"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hSemaphore&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hSemaphore&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="519"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hMutex&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hMutex&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="527"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hMutex&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hMutex&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="535"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hMutex&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hMutex&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="543"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;pFunc&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;pFunc&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="553"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hEvent&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hEvent&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="569"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;hEvent&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;hEvent&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="577"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;sock&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;sock&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cfg/windows.cpp" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="585"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;GetShortPathName_validCode&amp;#039; is never used." verbose="The function &amp;#039;GetShortPathName_validCode&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="1010"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;allocDealloc_GetModuleHandleEx&amp;#039; is never used." verbose="The function &amp;#039;allocDealloc_GetModuleHandleEx&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="809"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;bufferAccessOutOfBounds&amp;#039; is never used." verbose="The function &amp;#039;bufferAccessOutOfBounds&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="319"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;errorPrintf&amp;#039; is never used." verbose="The function &amp;#039;errorPrintf&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="746"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArg__getcwd&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArg__getcwd&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="80"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_AllocateAndInitializeSid&amp;#039; is never used." verbose="The function &amp;#039;memleak_AllocateAndInitializeSid&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="469"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_HeapAlloc&amp;#039; is never used." verbose="The function &amp;#039;memleak_HeapAlloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="477"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_LocalAlloc&amp;#039; is never used." verbose="The function &amp;#039;memleak_LocalAlloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="487"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_malloca&amp;#039; is never used." verbose="The function &amp;#039;memleak_malloca&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="461"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_GetPrivateProfileString&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_GetPrivateProfileString&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="97"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer__get_daylight&amp;#039; is never used." verbose="The function &amp;#039;nullPointer__get_daylight&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="123"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer__get_timezone&amp;#039; is never used." verbose="The function &amp;#039;nullPointer__get_timezone&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="113"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer__putenv&amp;#039; is never used." verbose="The function &amp;#039;nullPointer__putenv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="70"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer__strncpy_s_l&amp;#039; is never used." verbose="The function &amp;#039;nullPointer__strncpy_s_l&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="999"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_mbscat&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_mbscat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="936"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_mbscat_s&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_mbscat_s&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="966"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;oppositeInnerCondition_SUCCEEDED_FAILED&amp;#039; is never used." verbose="The function &amp;#039;oppositeInnerCondition_SUCCEEDED_FAILED&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="863"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction__mbscat&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction__mbscat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="17"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction__mbscpy&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction__mbscpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="36"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction__memccpy&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction__memccpy&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="25"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overlappingWriteFunction__swab&amp;#039; is never used." verbose="The function &amp;#039;overlappingWriteFunction__swab&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="44"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_CreateEvent&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_CreateEvent&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="557"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_CreateEventExA&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_CreateEventExA&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="565"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_CreateMutexA&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_CreateMutexA&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="523"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_CreateMutexEx&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_CreateMutexEx&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="531"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_CreateSemaphoreA&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_CreateSemaphoreA&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="499"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_CreateSemaphoreEx&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_CreateSemaphoreEx&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="507"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_LoadLibrary&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_LoadLibrary&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="547"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_OpenEventW&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_OpenEventW&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="573"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_OpenMutex&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_OpenMutex&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="539"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_OpenSemaphore&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_OpenSemaphore&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="515"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_socket&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_socket&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="581"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;test_CreateThread&amp;#039; is never used." verbose="The function &amp;#039;test_CreateThread&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="879"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_GetSystemInfo&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_GetSystemInfo&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="52"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar__putenv&amp;#039; is never used." verbose="The function &amp;#039;uninitvar__putenv&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="60"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar__strncpy_s_l&amp;#039; is never used." verbose="The function &amp;#039;uninitvar__strncpy_s_l&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="978"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mbscat&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mbscat&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="922"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_mbscat_s&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_mbscat_s&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="948"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_tolower&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_tolower&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="831"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_toupper&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_toupper&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="840"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_towlower&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_towlower&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="849"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_towupper&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_towupper&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\windows.cpp" line="856"/>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369" file0="test/cli/helloworld/main.c" sinceDate="12/3/2021">
            <location file="test\cli\helloworld\main.c" line="5"/>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369" file0="test/cli/proj-inline-suppress/1.c" sinceDate="12/3/2021">
            <location file="test\cli\proj-inline-suppress\1.h" line="3"/>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369" file0="test/cli/proj-inline-suppress/3.cpp" sinceDate="12/3/2021">
            <location file="test\cli\proj-inline-suppress\3.cpp" line="4"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;x&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cli/proj-inline-suppress/3.cpp" sinceDate="12/3/2021">
            <location file="test\cli\proj-inline-suppress\3.cpp" line="4"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;i&amp;#039; is assigned a value that is never used." cwe="563" file0="test/cli/proj-inline-suppress/4.c" sinceDate="12/3/2021">
            <location file="test\cli\proj-inline-suppress\4.c" line="3"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="test/cli/proj-suppress-syntaxError/1.c" sinceDate="12/3/2021">
            <location file="test\cli\proj-suppress-syntaxError\1.c" line="6"/>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369" file0="test/cli/proj2/a/a.c" sinceDate="12/3/2021">
            <location file="test\cli\proj2\a\a.c" line="1"/>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369" file0="test/cli/proj2/b/b.c" sinceDate="12/3/2021">
            <location file="test\cli\proj2\b\b.c" line="1"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;a==100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 100, which is out of bounds." verbose="Either the condition &amp;#039;a==100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 100, which is out of bounds." cwe="788" file0="test/synthetic/controlflow.c" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="10" info="Array index out of bounds"/>
            <location file="test\synthetic\controlflow.c" line="9" info="Assuming that condition &amp;#039;a==100&amp;#039; is not redundant"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;a==100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 100, which is out of bounds." verbose="Either the condition &amp;#039;a==100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 100, which is out of bounds." cwe="788" file0="test/synthetic/controlflow.c" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="14" info="Array index out of bounds"/>
            <location file="test\synthetic\controlflow.c" line="15" info="Assuming that condition &amp;#039;a==100&amp;#039; is not redundant"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;a==100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 100, which is out of bounds." verbose="Either the condition &amp;#039;a==100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 100, which is out of bounds." cwe="788" file0="test/synthetic/controlflow.c" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="20" info="Array index out of bounds"/>
            <location file="test\synthetic\controlflow.c" line="19" info="Assuming that condition &amp;#039;a==100&amp;#039; is not redundant"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;buf[2]&amp;#039; accessed at index 99, which is out of bounds." verbose="Array &amp;#039;buf[2]&amp;#039; accessed at index 99, which is out of bounds." cwe="788" file0="test/synthetic/controlflow.c" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="26"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;buf[2]&amp;#039; accessed at index 100, which is out of bounds." verbose="Array &amp;#039;buf[2]&amp;#039; accessed at index 100, which is out of bounds." cwe="788" file0="test/synthetic/controlflow.c" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="33" info="Array index out of bounds"/>
            <location file="test\synthetic\controlflow.c" line="32" info="After for loop, x has value 100"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the switch case &amp;#039;case 100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 100, which is out of bounds." verbose="Either the switch case &amp;#039;case 100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 100, which is out of bounds." cwe="788" file0="test/synthetic/controlflow.c" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="45" info="Array index out of bounds"/>
            <location file="test\synthetic\controlflow.c" line="47" info="case 100: x is 100 here."/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;x&amp;lt;100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 99, which is out of bounds." verbose="Either the condition &amp;#039;x&amp;lt;100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 99, which is out of bounds." cwe="788" file0="test/synthetic/controlflow.c" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="63" info="Array index out of bounds"/>
            <location file="test\synthetic\controlflow.c" line="62" info="Assuming that condition &amp;#039;x&amp;lt;100&amp;#039; is not redundant"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;x&amp;lt;100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 100, which is out of bounds." verbose="Either the condition &amp;#039;x&amp;lt;100&amp;#039; is redundant or the array &amp;#039;buf[2]&amp;#039; is accessed at index 100, which is out of bounds." cwe="788" file0="test/synthetic/controlflow.c" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="72" info="Array index out of bounds"/>
            <location file="test\synthetic\controlflow.c" line="70" info="Assuming that condition &amp;#039;x&amp;lt;100&amp;#039; is not redundant"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;after_for&amp;#039; is never used." verbose="The function &amp;#039;after_for&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="30"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;after_if&amp;#039; is never used." verbose="The function &amp;#039;after_if&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="18"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;after_switch&amp;#039; is never used." verbose="The function &amp;#039;after_switch&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="52"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;after_while&amp;#039; is never used." verbose="The function &amp;#039;after_while&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="68"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;before_if&amp;#039; is never used." verbose="The function &amp;#039;before_if&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="13"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;before_switch&amp;#039; is never used." verbose="The function &amp;#039;before_switch&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="44"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;in_for&amp;#039; is never used." verbose="The function &amp;#039;in_for&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="23"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;in_if&amp;#039; is never used." verbose="The function &amp;#039;in_if&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="8"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;in_switch&amp;#039; is never used." verbose="The function &amp;#039;in_switch&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="36"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;in_while&amp;#039; is never used." verbose="The function &amp;#039;in_while&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\controlflow.c" line="60"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." verbose="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." cwe="788" file0="test/synthetic/data.c" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="7" info="Array index out of bounds"/>
            <location file="test\synthetic\data.c" line="6" info="Assignment &amp;#039;g=1000&amp;#039;, assigned value is 1000"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." verbose="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." cwe="788" file0="test/synthetic/data.c" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="13" info="Array index out of bounds"/>
            <location file="test\synthetic\data.c" line="12" info="Assignment &amp;#039;garr[3]=1000&amp;#039;, assigned value is 1000"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." verbose="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." cwe="788" file0="test/synthetic/data.c" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="19" info="Array index out of bounds"/>
            <location file="test\synthetic\data.c" line="18" info="Assignment &amp;#039;*gp=1000&amp;#039;, assigned value is 1000"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." verbose="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." cwe="788" file0="test/synthetic/data.c" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="26" info="Array index out of bounds"/>
            <location file="test\synthetic\data.c" line="25" info="Assignment &amp;#039;x=1000&amp;#039;, assigned value is 1000"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." verbose="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." cwe="788" file0="test/synthetic/data.c" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="32" info="Array index out of bounds"/>
            <location file="test\synthetic\data.c" line="31" info="Assignment &amp;#039;arr[3]=1000&amp;#039;, assigned value is 1000"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." verbose="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." cwe="788" file0="test/synthetic/data.c" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="39" info="Array index out of bounds"/>
            <location file="test\synthetic\data.c" line="38" info="Assignment &amp;#039;*p=1000&amp;#039;, assigned value is 1000"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." verbose="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." cwe="788" file0="test/synthetic/data.c" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="62" info="Array index out of bounds"/>
            <location file="test\synthetic\data.c" line="61" info="Assignment &amp;#039;abc-&amp;gt;a=1000&amp;#039;, assigned value is 1000"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." verbose="Array &amp;#039;TestData[10]&amp;#039; accessed at index 1000, which is out of bounds." cwe="788" file0="test/synthetic/data.c" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="67" info="Array index out of bounds"/>
            <location file="test\synthetic\data.c" line="66" info="Assignment &amp;#039;abc-&amp;gt;b[3]=1000&amp;#039;, assigned value is 1000"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: *p" verbose="Uninitialized variable: *p" cwe="457" file0="test/synthetic/data.c" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="39" info=""/>
            <location file="test\synthetic\data.c" line="37" info="Address of variable taken here."/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;global_array&amp;#039; is never used." verbose="The function &amp;#039;global_array&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="11"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;global_pointer&amp;#039; is never used." verbose="The function &amp;#039;global_pointer&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="17"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;local_alias_1&amp;#039; is never used." verbose="The function &amp;#039;local_alias_1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="35"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;local_alias_2&amp;#039; is never used." verbose="The function &amp;#039;local_alias_2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="42"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;local_array&amp;#039; is never used." verbose="The function &amp;#039;local_array&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="29"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;struct_arraymember&amp;#039; is never used." verbose="The function &amp;#039;struct_arraymember&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="65"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;struct_member_assign&amp;#039; is never used." verbose="The function &amp;#039;struct_member_assign&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="60"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;struct_member_init&amp;#039; is never used." verbose="The function &amp;#039;struct_member_init&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\data.c" line="55"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;TestData[100]&amp;#039; accessed at index 1000, which is out of bounds." verbose="Array &amp;#039;TestData[100]&amp;#039; accessed at index 1000, which is out of bounds." cwe="788" file0="test/synthetic/functions.c" sinceDate="12/3/2021">
            <location file="test\synthetic\functions.c" line="21"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;return_value&amp;#039; is never used." verbose="The function &amp;#039;return_value&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\functions.c" line="20"/>
        </error>
        <error id="invalidLifetime" severity="error" msg="Using pointer to local variable &amp;#039;x&amp;#039; that is out of scope." verbose="Using pointer to local variable &amp;#039;x&amp;#039; that is out of scope." cwe="562" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="8" info=""/>
            <location file="test\synthetic\ub.c" line="8" info="Variable created here."/>
            <location file="test\synthetic\ub.c" line="8" info="Address of variable taken here."/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;x[10]&amp;#039; accessed at index 100, which is out of bounds." verbose="Array &amp;#039;x[10]&amp;#039; accessed at index 100, which is out of bounds." cwe="788" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="5"/>
        </error>
        <error id="pointerOutOfBounds" severity="portability" msg="Undefined behaviour, pointer arithmetic &amp;#039;buf+100&amp;#039; is out of bounds." verbose="Undefined behaviour, pointer arithmetic &amp;#039;buf+100&amp;#039; is out of bounds." cwe="758" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="24"/>
        </error>
        <error id="missingReturn" severity="error" msg="Found a exit path from function with non-void return type that has missing return statement" verbose="Found a exit path from function with non-void return type that has missing return statement" cwe="758" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="19"/>
        </error>
        <error id="nullPointer" severity="error" msg="Null pointer dereference: p" verbose="Null pointer dereference: p" cwe="476" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="21" info="Null pointer dereference"/>
            <location file="test\synthetic\ub.c" line="21" info="Assignment &amp;#039;p=0&amp;#039;, assigned value is 0"/>
        </error>
        <error id="invalidPointerCast" severity="portability" msg="Casting between signed int * and float * which have an incompatible binary data representation." verbose="Casting between signed int * and float * which have an incompatible binary data representation." cwe="704" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="2"/>
        </error>
        <error id="zerodiv" severity="error" msg="Division by zero." verbose="Division by zero." cwe="369" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="11"/>
        </error>
        <error id="shiftNegativeLHS" severity="portability" msg="Shifting a negative value is technically undefined behaviour" verbose="Shifting a negative value is technically undefined behaviour" cwe="758" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="39"/>
        </error>
        <error id="comparePointers" severity="error" msg="Subtracting pointers that point to different objects" verbose="Subtracting pointers that point to different objects" cwe="570" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="30" info=""/>
            <location file="test\synthetic\ub.c" line="30" info="Array decayed to pointer here."/>
            <location file="test\synthetic\ub.c" line="30" info="Variable declared here."/>
        </error>
        <error id="comparePointers" severity="error" msg="Comparing pointers that point to different objects" verbose="Comparing pointers that point to different objects" cwe="570" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="33" info=""/>
            <location file="test\synthetic\ub.c" line="33" info="Array decayed to pointer here."/>
            <location file="test\synthetic\ub.c" line="33" info="Variable declared here."/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; can be declared with const" verbose="Variable &amp;#039;x&amp;#039; can be declared with const" cwe="398" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="5"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;a&amp;#039; can be declared with const" verbose="Variable &amp;#039;a&amp;#039; can be declared with const" cwe="398" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="33"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;b&amp;#039; can be declared with const" verbose="Variable &amp;#039;b&amp;#039; can be declared with const" cwe="398" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="30"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;b&amp;#039; can be declared with const" verbose="Variable &amp;#039;b&amp;#039; can be declared with const" cwe="398" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="33"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;a&amp;#039; can be declared with const" verbose="Variable &amp;#039;a&amp;#039; can be declared with const" cwe="398" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="30"/>
        </error>
        <error id="shiftTooManyBits" severity="error" msg="Shifting 32-bit value by 123 bits is undefined behaviour" verbose="Shifting 32-bit value by 123 bits is undefined behaviour" cwe="758" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="36"/>
        </error>
        <error id="integerOverflow" severity="error" msg="Signed integer overflow for expression &amp;#039;intmax*2&amp;#039;." verbose="Signed integer overflow for expression &amp;#039;intmax*2&amp;#039;." cwe="190" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="42" info="Integer overflow"/>
            <location file="test\synthetic\ub.c" line="42" info="Assignment &amp;#039;intmax=(~0U)&amp;gt;&amp;gt;1&amp;#039;, assigned value is 2147483647"/>
        </error>
        <error id="floatConversionOverflow" severity="error" msg="Undefined behaviour: float (1e+100) to integer conversion overflow." verbose="Undefined behaviour: float (1e+100) to integer conversion overflow." cwe="190" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="14" info="float to integer conversion"/>
            <location file="test\synthetic\ub.c" line="14" info="Assignment &amp;#039;d=1E100&amp;#039;, assigned value is 1e+100.0"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: x" verbose="Uninitialized variable: x" cwe="457" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="48"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;fp&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;fp&amp;#039; is assigned a value that is never used." cwe="563" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="2"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: x" verbose="Unused variable: x" cwe="563" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="2"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: buf" verbose="Unused variable: buf" cwe="563" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="17"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;a&amp;#039; is not assigned a value." verbose="Variable &amp;#039;a&amp;#039; is not assigned a value." cwe="665" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="30"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;b&amp;#039; is not assigned a value." verbose="Variable &amp;#039;b&amp;#039; is not assigned a value." cwe="665" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="30"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;a&amp;#039; is not assigned a value." verbose="Variable &amp;#039;a&amp;#039; is not assigned a value." cwe="665" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="33"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;b&amp;#039; is not assigned a value." verbose="Variable &amp;#039;b&amp;#039; is not assigned a value." cwe="665" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="33"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is not assigned a value." verbose="Variable &amp;#039;x&amp;#039; is not assigned a value." cwe="665" file0="test/synthetic/ub.c" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="48"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;buffer_overflow&amp;#039; is never used." verbose="The function &amp;#039;buffer_overflow&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="4"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;dead_pointer&amp;#039; is never used." verbose="The function &amp;#039;dead_pointer&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="7"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;division_by_zero&amp;#039; is never used." verbose="The function &amp;#039;division_by_zero&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="10"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;float_to_int&amp;#039; is never used." verbose="The function &amp;#039;float_to_int&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="13"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;int_overflow&amp;#039; is never used." verbose="The function &amp;#039;int_overflow&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="41"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;negative_size&amp;#039; is never used." verbose="The function &amp;#039;negative_size&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="16"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;no_return&amp;#039; is never used." verbose="The function &amp;#039;no_return&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="19"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;null_pointer&amp;#039; is never used." verbose="The function &amp;#039;null_pointer&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="20"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pointer_arithmetic&amp;#039; is never used." verbose="The function &amp;#039;pointer_arithmetic&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="23"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pointer_comparison&amp;#039; is never used." verbose="The function &amp;#039;pointer_comparison&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="32"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pointer_subtraction&amp;#039; is never used." verbose="The function &amp;#039;pointer_subtraction&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="29"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;pointer_to_u8&amp;#039; is never used." verbose="The function &amp;#039;pointer_to_u8&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="26"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;shift_negative&amp;#039; is never used." verbose="The function &amp;#039;shift_negative&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="38"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;shift_overrun&amp;#039; is never used." verbose="The function &amp;#039;shift_overrun&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="35"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;string_literal&amp;#039; is never used." verbose="The function &amp;#039;string_literal&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\synthetic\ub.c" line="44"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;s[5]&amp;#039; accessed at index 5, which is out of bounds." verbose="Array &amp;#039;s[5]&amp;#039; accessed at index 5, which is out of bounds." cwe="788" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="14"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;p[3]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;p[3]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="19"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;p[4]&amp;#039; accessed at index 4, which is out of bounds." verbose="Array &amp;#039;p[4]&amp;#039; accessed at index 4, which is out of bounds." cwe="788" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="48"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;a.c[3]&amp;#039; accessed at index 3, which is out of bounds." verbose="Array &amp;#039;a.c[3]&amp;#039; accessed at index 3, which is out of bounds." cwe="788" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="59"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;x[5]&amp;#039; accessed at index 5, which is out of bounds." verbose="Array &amp;#039;x[5]&amp;#039; accessed at index 5, which is out of bounds." cwe="788" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="66"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;a==2&amp;#039; is redundant or the array &amp;#039;x[2]&amp;#039; is accessed at index 2, which is out of bounds." verbose="Either the condition &amp;#039;a==2&amp;#039; is redundant or the array &amp;#039;x[2]&amp;#039; is accessed at index 2, which is out of bounds." cwe="788" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="81" info="Array index out of bounds"/>
            <location file="test\testsuites\clang\outofbound.c" line="80" info="Assuming that condition &amp;#039;a==2&amp;#039; is not redundant"/>
        </error>
        <error id="negativeIndex" severity="warning" msg="Either the condition &amp;#039;a&amp;lt;0&amp;#039; is redundant or the array &amp;#039;x[2]&amp;#039; is accessed at index -1, which is out of bounds." verbose="Either the condition &amp;#039;a&amp;lt;0&amp;#039; is redundant or the array &amp;#039;x[2]&amp;#039; is accessed at index -1, which is out of bounds." cwe="786" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="89" info="Negative array index"/>
            <location file="test\testsuites\clang\outofbound.c" line="88" info="Assuming that condition &amp;#039;a&amp;lt;0&amp;#039; is not redundant"/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &amp;#039;a&amp;#039; is accessed at non-zero index." verbose="The address of local variable &amp;#039;a&amp;#039; is accessed at non-zero index." cwe="758" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="34" info=""/>
            <location file="test\testsuites\clang\outofbound.c" line="32" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &amp;#039;c&amp;#039; is accessed at non-zero index." verbose="The address of local variable &amp;#039;c&amp;#039; is accessed at non-zero index." cwe="758" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="41" info=""/>
            <location file="test\testsuites\clang\outofbound.c" line="39" info="Address of variable taken here."/>
        </error>
        <error id="objectIndex" severity="error" msg="The address of local variable &amp;#039;c&amp;#039; is accessed at non-zero index." verbose="The address of local variable &amp;#039;c&amp;#039; is accessed at non-zero index." cwe="758" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="42" info=""/>
            <location file="test\testsuites\clang\outofbound.c" line="39" info="Address of variable taken here."/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: p" verbose="Memory leak: p" cwe="401" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="20"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: p" verbose="Memory leak: p" cwe="401" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="49"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="79"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &amp;#039;x&amp;#039; can be reduced." verbose="The scope of the variable &amp;#039;x&amp;#039; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &amp;#039;i&amp;#039; can be reduced:&#10;void f(int x)&#10;{&#10;    int i = 0;&#10;    if (x) {&#10;        // it&amp;#039;s safe to move &amp;#039;int i = 0;&amp;#039; here&#10;        for (int n = 0; n &amp;lt; 10; ++n) {&#10;            // it is possible but not safe to move &amp;#039;int i = 0;&amp;#039; here&#10;            do_something(&amp;amp;i);&#10;        }&#10;    }&#10;}&#10;When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="87"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; can be declared with const" verbose="Variable &amp;#039;x&amp;#039; can be declared with const" cwe="398" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="79"/>
        </error>
        <error id="constVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; can be declared with const" verbose="Variable &amp;#039;x&amp;#039; can be declared with const" cwe="398" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="87"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: a" verbose="Uninitialized variable: a" cwe="457" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="40"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: a" verbose="Uninitialized variable: a" cwe="457" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="33"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: a" verbose="Uninitialized variable: a" cwe="457" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="41"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: a" verbose="Uninitialized variable: a" cwe="457" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="42"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;a&amp;#039; is not assigned a value." verbose="Variable &amp;#039;a&amp;#039; is not assigned a value." cwe="665" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="39"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;a.c[3]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;a.c[3]&amp;#039; is assigned a value that is never used." cwe="563" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="59"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;x[5]&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;x[5]&amp;#039; is assigned a value that is never used." cwe="563" file0="test/testsuites/clang/outofbound.c" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="66"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;alloca_region&amp;#039; is never used." verbose="The function &amp;#039;alloca_region&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="70"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;f4&amp;#039; is never used." verbose="The function &amp;#039;f4&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="37"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;f5&amp;#039; is never used." verbose="The function &amp;#039;f5&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="45"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;f6&amp;#039; is never used." verbose="The function &amp;#039;f6&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="51"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;f7&amp;#039; is never used." verbose="The function &amp;#039;f7&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="57"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;overflow_binary_search&amp;#039; is never used." verbose="The function &amp;#039;overflow_binary_search&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="94"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;symbolic_index&amp;#039; is never used." verbose="The function &amp;#039;symbolic_index&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="78"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;symbolic_index2&amp;#039; is never used." verbose="The function &amp;#039;symbolic_index2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="86"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;vla&amp;#039; is never used." verbose="The function &amp;#039;vla&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\clang\outofbound.c" line="62"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;data&amp;#039; can be declared with const" verbose="Parameter &amp;#039;data&amp;#039; can be declared with const" cwe="398" file0="test/testsuites/danmar/divbyzero.cpp" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="61"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;p&amp;#039; can be declared with const" verbose="Parameter &amp;#039;p&amp;#039; can be declared with const" cwe="398" file0="test/testsuites/danmar/divbyzero.cpp" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="51"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;p&amp;#039; can be declared with const" verbose="Parameter &amp;#039;p&amp;#039; can be declared with const" cwe="398" file0="test/testsuites/danmar/divbyzero.cpp" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="56"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;callfunc1&amp;#039; is never used." verbose="The function &amp;#039;callfunc1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="13"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;float1&amp;#039; is never used." verbose="The function &amp;#039;float1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="20"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;float2&amp;#039; is never used." verbose="The function &amp;#039;float2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="25"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;globalVar1&amp;#039; is never used." verbose="The function &amp;#039;globalVar1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="39"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;globalVar2&amp;#039; is never used." verbose="The function &amp;#039;globalVar2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="44"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;stdmap&amp;#039; is never used." verbose="The function &amp;#039;stdmap&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="61"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;struct1&amp;#039; is never used." verbose="The function &amp;#039;struct1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="66"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;trycatch&amp;#039; is never used." verbose="The function &amp;#039;trycatch&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\divbyzero.cpp" line="71"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &amp;#039;p&amp;#039; can be declared with const" verbose="Parameter &amp;#039;p&amp;#039; can be declared with const" cwe="398" file0="test/testsuites/danmar/uninit.c" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\uninit.c" line="28"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: x" verbose="Uninitialized variable: x" cwe="457" file0="test/testsuites/danmar/uninit.c" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\uninit.c" line="25"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;x&amp;#039; is not assigned a value." verbose="Variable &amp;#039;x&amp;#039; is not assigned a value." cwe="665" file0="test/testsuites/danmar/uninit.c" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\uninit.c" line="22"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;local1&amp;#039; is never used." verbose="The function &amp;#039;local1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\testsuites\danmar\uninit.c" line="21"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: pI" verbose="Memory leak: pI" cwe="401" file0="test/testsuites/duma/leak1.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\leak1.c" line="11"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: pI" verbose="Memory leak: pI" cwe="401" file0="test/testsuites/duma/leak1.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\leak1.cc" line="14"/>
        </error>
        <error id="doubleFree" severity="error" msg="Memory pointed to by &amp;#039;pI&amp;#039; is freed twice." verbose="Memory pointed to by &amp;#039;pI&amp;#039; is freed twice." cwe="415" file0="test/testsuites/duma/wrong1.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong1.c" line="10" info=""/>
            <location file="test\testsuites\duma\wrong1.c" line="8" info=""/>
        </error>
        <error id="doubleFree" severity="error" msg="Memory pointed to by &amp;#039;pI&amp;#039; is freed twice." verbose="Memory pointed to by &amp;#039;pI&amp;#039; is freed twice." cwe="415" file0="test/testsuites/duma/wrong1.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong1.cc" line="13" info=""/>
            <location file="test\testsuites\duma\wrong1.cc" line="11" info=""/>
        </error>
        <error id="mismatchAllocDealloc" severity="error" msg="Mismatching allocation and deallocation: pI" verbose="Mismatching allocation and deallocation: pI" cwe="762" file0="test/testsuites/duma/wrong2.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong2.cc" line="13" info=""/>
            <location file="test\testsuites\duma\wrong2.cc" line="10" info=""/>
        </error>
        <error id="doubleFree" severity="error" msg="Memory pointed to by &amp;#039;pI&amp;#039; is freed twice." verbose="Memory pointed to by &amp;#039;pI&amp;#039; is freed twice." cwe="415" file0="test/testsuites/duma/wrong2.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong2.cc" line="20" info=""/>
            <location file="test\testsuites\duma\wrong2.cc" line="18" info=""/>
        </error>
        <error id="uninitdata" severity="error" msg="Memory is allocated but not initialized: pI" verbose="Memory is allocated but not initialized: pI" cwe="457" file0="test/testsuites/duma/wrong3.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong3.c" line="9"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pJ" verbose="Uninitialized variable: pJ" cwe="457" file0="test/testsuites/duma/wrong3.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong3.c" line="16"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;pJ&amp;#039; is not assigned a value." verbose="Variable &amp;#039;pJ&amp;#039; is not assigned a value." cwe="665" file0="test/testsuites/duma/wrong3.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong3.c" line="14"/>
        </error>
        <error id="uninitdata" severity="error" msg="Memory is allocated but not initialized: pI" verbose="Memory is allocated but not initialized: pI" cwe="457" file0="test/testsuites/duma/wrong3.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong3.cc" line="13"/>
        </error>
        <error id="uninitvar" severity="error" msg="Uninitialized variable: pJ" verbose="Uninitialized variable: pJ" cwe="457" file0="test/testsuites/duma/wrong3.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong3.cc" line="20"/>
        </error>
        <error id="unassignedVariable" severity="style" msg="Variable &amp;#039;pJ&amp;#039; is not assigned a value." verbose="Variable &amp;#039;pJ&amp;#039; is not assigned a value." cwe="665" file0="test/testsuites/duma/wrong3.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong3.cc" line="18"/>
        </error>
        <error id="mismatchAllocDealloc" severity="error" msg="Mismatching allocation and deallocation: pI" verbose="Mismatching allocation and deallocation: pI" cwe="762" file0="test/testsuites/duma/wrong4.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong4.cc" line="13" info=""/>
            <location file="test\testsuites\duma\wrong4.cc" line="11" info=""/>
        </error>
        <error id="mismatchAllocDealloc" severity="error" msg="Mismatching allocation and deallocation: pI" verbose="Mismatching allocation and deallocation: pI" cwe="762" file0="test/testsuites/duma/wrong4.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong4.cc" line="20" info=""/>
            <location file="test\testsuites\duma\wrong4.cc" line="18" info=""/>
        </error>
        <error id="uninitdata" severity="error" msg="Memory is allocated but not initialized: pI" verbose="Memory is allocated but not initialized: pI" cwe="457" file0="test/testsuites/duma/wrong4.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong4.cc" line="13"/>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &amp;#039;pI&amp;#039; is allocated memory that is never used." verbose="Variable &amp;#039;pI&amp;#039; is allocated memory that is never used." cwe="563" file0="test/testsuites/duma/wrong4.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong4.cc" line="11"/>
        </error>
        <error id="unusedAllocatedMemory" severity="style" msg="Variable &amp;#039;pI&amp;#039; is allocated memory that is never used." verbose="Variable &amp;#039;pI&amp;#039; is allocated memory that is never used." cwe="563" file0="test/testsuites/duma/wrong4.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong4.cc" line="18"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;stdstr&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;stdstr&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/testsuites/duma/wrong5.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong5.cc" line="15"/>
        </error>
        <error id="ctuOneDefinitionRuleViolation" severity="error" msg="The one definition rule is violated, different classes/structs have the same name &amp;#039;Test&amp;#039;" verbose="The one definition rule is violated, different classes/structs have the same name &amp;#039;Test&amp;#039;" cwe="758" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong6.cc" line="8"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;ar[10]&amp;#039; accessed at index 10, which is out of bounds." verbose="Array &amp;#039;ar[10]&amp;#039; accessed at index 10, which is out of bounds." cwe="788" file0="test/testsuites/duma/wrong6.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong6.c" line="14"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &amp;#039;Test::st&amp;#039; is never used." verbose="struct member &amp;#039;Test::st&amp;#039; is never used." cwe="563" file0="test/testsuites/duma/wrong6.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong6.c" line="5"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;ar[10].a&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;ar[10].a&amp;#039; is assigned a value that is never used." cwe="563" file0="test/testsuites/duma/wrong6.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong6.c" line="14"/>
        </error>
        <error id="unusedVariable" severity="style" msg="Unused variable: b" verbose="Unused variable: b" cwe="563" file0="test/testsuites/duma/wrong6.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong6.c" line="12"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;ar[10]&amp;#039; accessed at index 10, which is out of bounds." verbose="Array &amp;#039;ar[10]&amp;#039; accessed at index 10, which is out of bounds." cwe="788" file0="test/testsuites/duma/wrong6.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong6.cc" line="30"/>
        </error>
        <error id="useInitializationList" severity="performance" msg="Variable &amp;#039;stdstr&amp;#039; is assigned in constructor body. Consider performing initialization in initialization list." verbose="When an object of a class is created, the constructors of all member variables are called consecutively in the order the variables are declared, even if you don&amp;#039;t explicitly write them to the initialization list. You could avoid assigning &amp;#039;stdstr&amp;#039; a value by passing the value to the constructor in the initialization list." cwe="398" file0="test/testsuites/duma/wrong6.cc" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong6.cc" line="15"/>
        </error>
        <error id="negativeIndex" severity="error" msg="Array &amp;#039;p[10]&amp;#039; accessed at index -1, which is out of bounds." verbose="Array &amp;#039;p[10]&amp;#039; accessed at index -1, which is out of bounds." cwe="786" file0="test/testsuites/duma/wrong7.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong7.c" line="8"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;p[10]&amp;#039; accessed at index 10, which is out of bounds." verbose="Array &amp;#039;p[10]&amp;#039; accessed at index 10, which is out of bounds." cwe="788" file0="test/testsuites/duma/wrong7.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong7.c" line="10"/>
        </error>
        <error id="uninitdata" severity="error" msg="Memory is allocated but not initialized: p" verbose="Memory is allocated but not initialized: p" cwe="457" file0="test/testsuites/duma/wrong7.c" sinceDate="12/3/2021">
            <location file="test\testsuites\duma\wrong7.c" line="8"/>
        </error>
        <error id="arrayIndexOutOfBounds" severity="error" msg="Array &amp;#039;buf[9]&amp;#039; accessed at index 11, which is out of bounds." verbose="Array &amp;#039;buf[9]&amp;#039; accessed at index 11, which is out of bounds." cwe="788" file0="test/testsuites/x-flow/buffer01.cpp" sinceDate="12/3/2021">
            <location file="test\testsuites\x-flow\buffer01.cpp" line="9"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;i&amp;lt;12&amp;#039; is redundant or the array &amp;#039;buf[9]&amp;#039; is accessed at index 11, which is out of bounds." verbose="Either the condition &amp;#039;i&amp;lt;12&amp;#039; is redundant or the array &amp;#039;buf[9]&amp;#039; is accessed at index 11, which is out of bounds." cwe="788" file0="test/testsuites/x-flow/buffer02.cpp" sinceDate="12/3/2021">
            <location file="test\testsuites\x-flow\buffer02.cpp" line="9" info="Array index out of bounds"/>
            <location file="test\testsuites\x-flow\buffer02.cpp" line="8" info="Assuming that condition &amp;#039;i&amp;lt;12&amp;#039; is not redundant"/>
        </error>
        <error id="arrayIndexOutOfBoundsCond" severity="warning" msg="Either the condition &amp;#039;i&amp;lt;12&amp;#039; is redundant or the array &amp;#039;buf[9]&amp;#039; is accessed at index 11, which is out of bounds." verbose="Either the condition &amp;#039;i&amp;lt;12&amp;#039; is redundant or the array &amp;#039;buf[9]&amp;#039; is accessed at index 11, which is out of bounds." cwe="788" file0="test/testsuites/x-flow/buffer03.cpp" sinceDate="12/3/2021">
            <location file="test\testsuites\x-flow\buffer03.cpp" line="11" info="Array index out of bounds"/>
            <location file="test\testsuites\x-flow\buffer03.cpp" line="10" info="Assuming that condition &amp;#039;i&amp;lt;12&amp;#039; is not redundant"/>
        </error>
        <error id="memleakOnRealloc" severity="error" msg="Common realloc mistake: &amp;#039;buf&amp;#039; nulled but not freed upon failure" verbose="Common realloc mistake: &amp;#039;buf&amp;#039; nulled but not freed upon failure" cwe="401" file0="test/testsuites/x-flow/buffer03.cpp" sinceDate="12/3/2021">
            <location file="test\testsuites\x-flow\buffer03.cpp" line="8"/>
        </error>
        <error id="bufferAccessOutOfBounds" severity="error" msg="Buffer is accessed out of bounds: buf" verbose="Buffer is accessed out of bounds: buf" cwe="788" file0="test/testsuites/x-flow/buffer05.cpp" sinceDate="12/3/2021">
            <location file="test\testsuites\x-flow\buffer05.cpp" line="8" info="Buffer overrun"/>
            <location file="test\testsuites\x-flow\buffer05.cpp" line="7" info="Assign buf, buffer with size 9"/>
        </error>
        <error id="memleak" severity="error" msg="Memory leak: buf" verbose="Memory leak: buf" cwe="401" file0="test/testsuites/x-flow/buffer05.cpp" sinceDate="12/3/2021">
            <location file="test\testsuites\x-flow\buffer05.cpp" line="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="test/testsuites/x-flow/buffer06.cpp" sinceDate="12/3/2021">
            <location file="test\testsuites\x-flow\buffer06.cpp" line="10"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;EVP_CIPHER_CTX_new_test&amp;#039; is never used." verbose="The function &amp;#039;EVP_CIPHER_CTX_new_test&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\openssl.c" line="62"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidPrintfArgType_test&amp;#039; is never used." verbose="The function &amp;#039;invalidPrintfArgType_test&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\openssl.c" line="56"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;valid_code_do_crypt&amp;#039; is never used." verbose="The function &amp;#039;valid_code_do_crypt&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\openssl.c" line="20"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;MacroTest2_test&amp;#039; is never used." verbose="The function &amp;#039;MacroTest2_test&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="368"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QByteArray1&amp;#039; is never used." verbose="The function &amp;#039;QByteArray1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="52"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QLinkedList1&amp;#039; is never used." verbose="The function &amp;#039;QLinkedList1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="137"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QLinkedList3&amp;#039; is never used." verbose="The function &amp;#039;QLinkedList3&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="160"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QList1&amp;#039; is never used." verbose="The function &amp;#039;QList1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="72"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QList3&amp;#039; is never used." verbose="The function &amp;#039;QList3&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="124"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QStack1&amp;#039; is never used." verbose="The function &amp;#039;QStack1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="289"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QStack2&amp;#039; is never used." verbose="The function &amp;#039;QStack2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="328"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QStack3&amp;#039; is never used." verbose="The function &amp;#039;QStack3&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="341"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QString1&amp;#039; is never used." verbose="The function &amp;#039;QString1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="24"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QString2&amp;#039; is never used." verbose="The function &amp;#039;QString2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="32"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QString3&amp;#039; is never used." verbose="The function &amp;#039;QString3&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="39"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QStringList1&amp;#039; is never used." verbose="The function &amp;#039;QStringList1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="173"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QStringList2&amp;#039; is never used." verbose="The function &amp;#039;QStringList2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="216"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QVector1&amp;#039; is never used." verbose="The function &amp;#039;QVector1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="229"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;QVector2&amp;#039; is never used." verbose="The function &amp;#039;QVector2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="269"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;duplicateExpression_QString_Compare&amp;#039; is never used." verbose="The function &amp;#039;duplicateExpression_QString_Compare&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\qt.cpp" line="282"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PyMem_Malloc_memleak&amp;#039; is never used." verbose="The function &amp;#039;PyMem_Malloc_memleak&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\python.c" line="42"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PyMem_Malloc_mismatchAllocDealloc&amp;#039; is never used." verbose="The function &amp;#039;PyMem_Malloc_mismatchAllocDealloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\python.c" line="49"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;PyMem_New_memleak&amp;#039; is never used." verbose="The function &amp;#039;PyMem_New_memleak&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\python.c" line="57"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;addDirectory_recursive&amp;#039; is never used." verbose="The function &amp;#039;addDirectory_recursive&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\filelist\testfilelist.cpp" line="86"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;addFile_notexist&amp;#039; is never used." verbose="The function &amp;#039;addFile_notexist&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\filelist\testfilelist.cpp" line="61"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;addFile_unknown&amp;#039; is never used." verbose="The function &amp;#039;addFile_unknown&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\filelist\testfilelist.cpp" line="69"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;filterFiles&amp;#039; is never used." verbose="The function &amp;#039;filterFiles&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\filelist\testfilelist.cpp" line="99"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;filterFiles2&amp;#039; is never used." verbose="The function &amp;#039;filterFiles2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\filelist\testfilelist.cpp" line="122"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;filterFiles3&amp;#039; is never used." verbose="The function &amp;#039;filterFiles3&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\filelist\testfilelist.cpp" line="137"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;filterFiles4&amp;#039; is never used." verbose="The function &amp;#039;filterFiles4&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\filelist\testfilelist.cpp" line="154"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;changeFunction&amp;#039; is never used." verbose="The function &amp;#039;changeFunction&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\librarydialog.cpp" line="287"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;editArg&amp;#039; is never used." verbose="The function &amp;#039;editArg&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\librarydialog.cpp" line="304"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;editFunctionName&amp;#039; is never used." verbose="The function &amp;#039;editFunctionName&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\librarydialog.cpp" line="191"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;openCfg&amp;#039; is never used." verbose="The function &amp;#039;openCfg&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\librarydialog.cpp" line="75"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;saveCfgAs&amp;#039; is never used." verbose="The function &amp;#039;saveCfgAs&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\librarydialog.cpp" line="150"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;sortFunctions&amp;#039; is never used." verbose="The function &amp;#039;sortFunctions&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\librarydialog.cpp" line="253"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;construct&amp;#039; is never used." verbose="The function &amp;#039;construct&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\translationhandler\testtranslationhandler.cpp" line="23"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;containerOutOfBounds_wxArrayInt&amp;#039; is never used." verbose="The function &amp;#039;containerOutOfBounds_wxArrayInt&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="73"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;containerOutOfBounds_wxArrayString&amp;#039; is never used." verbose="The function &amp;#039;containerOutOfBounds_wxArrayString&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="63"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;deprecatedFunctions&amp;#039; is never used." verbose="The function &amp;#039;deprecatedFunctions&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="311"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;deprecatedFunctions_wxDataViewCustomRenderer&amp;#039; is never used." verbose="The function &amp;#039;deprecatedFunctions_wxDataViewCustomRenderer&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="303"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;duplicateBreak_wxLogApiError&amp;#039; is never used." verbose="The function &amp;#039;duplicateBreak_wxLogApiError&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="34"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignoredReturnValue&amp;#039; is never used." verbose="The function &amp;#039;ignoredReturnValue&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="203"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignoredReturnValue_wxDC_GetSize&amp;#039; is never used." verbose="The function &amp;#039;ignoredReturnValue_wxDC_GetSize&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="83"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ignoredReturnValue_wxDC_GetSizeMM&amp;#039; is never used." verbose="The function &amp;#039;ignoredReturnValue_wxDC_GetSizeMM&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="91"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArg&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArg&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="215"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_wxPGProperty_Hide&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_wxPGProperty_Hide&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="105"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;invalidFunctionArgBool_wxSizer_Add&amp;#039; is never used." verbose="The function &amp;#039;invalidFunctionArgBool_wxSizer_Add&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="99"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_wxSizer_Add&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_wxSizer_Add&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="183"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;nullPointer_wxTextCtrl_HitTest&amp;#039; is never used." verbose="The function &amp;#039;nullPointer_wxTextCtrl_HitTest&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="113"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar&amp;#039; is never used." verbose="The function &amp;#039;uninitvar&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="234"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_SetMenuBar&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_SetMenuBar&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="287"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wxMenuBarAppend&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wxMenuBarAppend&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="295"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wxSizer_Add&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wxSizer_Add&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="192"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wxStaticText&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wxStaticText&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="250"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;uninitvar_wxString_NumberConversion&amp;#039; is never used." verbose="The function &amp;#039;uninitvar_wxString_NumberConversion&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="259"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;useRetval_wxString_MakeCapitalized&amp;#039; is never used." verbose="The function &amp;#039;useRetval_wxString_MakeCapitalized&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="45"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;useRetval_wxString_MakeLower&amp;#039; is never used." verbose="The function &amp;#039;useRetval_wxString_MakeLower&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="51"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;useRetval_wxString_MakeUpper&amp;#039; is never used." verbose="The function &amp;#039;useRetval_wxString_MakeUpper&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="57"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;validCode&amp;#039; is never used." verbose="The function &amp;#039;validCode&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="119"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;validGuiCode&amp;#039; is never used." verbose="The function &amp;#039;validGuiCode&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="136"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;wxString_test1&amp;#039; is never used." verbose="The function &amp;#039;wxString_test1&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="374"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;wxString_test2&amp;#039; is never used." verbose="The function &amp;#039;wxString_test2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="382"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;wxString_test3&amp;#039; is never used." verbose="The function &amp;#039;wxString_test3&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\wxwidgets.cpp" line="395"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;contextMenuEvent&amp;#039; is never used." verbose="The function &amp;#039;contextMenuEvent&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\resultstree.cpp" line="593"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;cppunit_assert_equal&amp;#039; is never used." verbose="The function &amp;#039;cppunit_assert_equal&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\cppunit.cpp" line="11"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;cppunit_assert_fail&amp;#039; is never used." verbose="The function &amp;#039;cppunit_assert_fail&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\cppunit.cpp" line="50"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;cppunit_assertion_assert&amp;#039; is never used." verbose="The function &amp;#039;cppunit_assertion_assert&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\cppunit.cpp" line="42"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;cppunit_throw&amp;#039; is never used." verbose="The function &amp;#039;cppunit_throw&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\cppunit.cpp" line="34"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;functionArgAlloc&amp;#039; is never used." verbose="The function &amp;#039;functionArgAlloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\checkmemoryleak.cpp" line="411"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getIntValue&amp;#039; is never used." verbose="The function &amp;#039;getIntValue&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\programmemory.cpp" line="34"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;getWeight&amp;#039; is never used." verbose="The function &amp;#039;getWeight&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\codeeditstylecontrols.cpp" line="117"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;highlightBlock&amp;#039; is never used." verbose="The function &amp;#039;highlightBlock&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\codeeditor.cpp" line="173"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;isConditionFalse&amp;#039; is never used." verbose="The function &amp;#039;isConditionFalse&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\forwardanalyzer.cpp" line="92"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak&amp;#039; is never used." verbose="The function &amp;#039;memleak&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\opencv2.cpp" line="40"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_curl_easy_escape&amp;#039; is never used." verbose="The function &amp;#039;memleak_curl_easy_escape&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\libcurl.c" line="56"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_curl_easy_duphandle&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_curl_easy_duphandle&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\libcurl.c" line="49"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_curl_easy_init&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_curl_easy_init&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\libcurl.c" line="42"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;memleak_sqlite3_malloc&amp;#039; is never used." verbose="The function &amp;#039;memleak_sqlite3_malloc&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\sqlite3.c" line="32"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;resourceLeak_sqlite3_open&amp;#039; is never used." verbose="The function &amp;#039;resourceLeak_sqlite3_open&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="test\cfg\sqlite3.c" line="41"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;minsizeChanged&amp;#039; is never used." verbose="The function &amp;#039;minsizeChanged&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\libraryeditargdialog.cpp" line="92"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;on_mListLog_customContextMenuRequested&amp;#039; is never used." verbose="The function &amp;#039;on_mListLog_customContextMenuRequested&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\resultsview.cpp" line="558"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;readXml&amp;#039; is never used." verbose="The function &amp;#039;readXml&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\xmlreportv2\testxmlreportv2.cpp" line="24"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;readingEmptyStlContainer2&amp;#039; is never used." verbose="The function &amp;#039;readingEmptyStlContainer2&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="lib\checkstl.cpp" line="2377"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;tokenizeAndSimplify&amp;#039; is never used." verbose="The function &amp;#039;tokenizeAndSimplify&amp;#039; is never used." cwe="561" sinceDate="12/3/2021">
            <location file="gui\test\benchmark\simple\benchmarksimple.cpp" line="62"/>
        </error>
    </errors>
</results>
