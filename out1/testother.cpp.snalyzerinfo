CWE
Check
Check call:[instances,remove] noreturn:[remove]
name
FileInfo
FileInfo
toString call:[string] noreturn:[string]
getFileInfo
loadFileInfoFromXml
analyseWholeProgram
reportError call:[CWE,reportError] noreturn:[reportError]
reportError call:[callstack,reportError] noreturn:[reportError]
reportError call:[CWE,reportError] noreturn:[reportError]
operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
CheckOther
CheckOther
runChecks call:[checkAccessOfMovedVariable,checkCastIntToCharAndBack,checkCharVariable,checkCommaSeparatedReturn,checkComparePointers,checkComparisonFunctionIsAlwaysTrueOrFalse,checkConstPointer,checkConstVariable,checkDuplicateBranch,checkDuplicateExpression,checkEvaluationOrder,checkFuncArgNamesDifferent,checkIncompleteArrayFill,checkIncompleteStatement,checkInterlockedDecrement,checkInvalidFree,checkKnownArgument,checkMisusedScopedObject,checkModuloOfOne,checkNanInArithmeticExpression,checkNegativeBitwiseShift,checkOther,checkOverlappingWrite,checkPassByReference,checkPipeParameterSize,checkRedundantAssignment,checkRedundantAssignmentInSwitch,checkRedundantCopy,checkRedundantPointerOp,checkShadowVariables,checkSignOfUnsignedVariable,checkSuspiciousCaseInSwitch,checkSuspiciousSemicolon,checkUnreachableCode,checkUnusedLabel,checkVarFuncNullUB,checkVariableScope,checkZeroDivision,clarifyCalculation,clarifyStatement,invalidPointerCast,warningOldStylePointerCast] noreturn:[checkOverlappingWrite]
getErrorMessages call:[accessMovedError,c,charBitOpError,checkCastIntToCharAndBackError,checkComparisonFunctionIsAlwaysTrueOrFalseError,checkModuloOfOneError,checkPipeParameterSizeError,clarifyCalculationError,clarifyStatementError,commaSeparatedReturnError,comparePointersError,constStatementError,constVariableError,cstyleCastError,duplicateAssignExpressionError,duplicateBranchError,duplicateBreakError,duplicateExpressionError,duplicateExpressionTernaryError,duplicateValueTernaryError,funcArgNamesDifferent,funcArgOrderDifferent,incompleteArrayFillError,invalidFreeError,invalidPointerCastError,knownArgumentError,misusedScopeObjectError,nanInArithmeticExpressionError,negativeBitwiseShiftError,oppositeExpressionError,overlappingWriteFunction,overlappingWriteUnion,passedByValueError,pointerLessThanZeroError,pointerPositiveError,raceAfterInterlockedDecrementError,redundantAssignmentError,redundantAssignmentInSwitchError,redundantBitwiseOperationInSwitchError,redundantCopyError,redundantCopyInSwitchError,redundantInitializationError,redundantPointerOpError,selfAssignmentError,shadowError,signedCharArrayIndexError,suspiciousCaseInSwitchError,suspiciousSemicolonError,unknownEvaluationOrder,unknownSignCharArrayIndexError,unreachableCodeError,unsignedLessThanZeroError,unsignedPositiveError,unusedLabelError,varFuncNullUBError,variableScopeError,zerodivError] noreturn:[checkModuloOfOneError]
myName
classInfo
isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
Standards
setC
getC
setCPP
getCPP
Error
Error
Error
getAllocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
getDeallocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
allocId call:[getAllocDealloc]
deallocId call:[getAllocDealloc]
setalloc
setdealloc
setrealloc
setnoreturn
ismemory call:[return] noreturn:[return]
ismemory call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
Container
getAction call:[end,find]
getYield call:[end,find]
ArgumentChecks
IteratorInfo
MinSize
Function
isboolargbad call:[getarg]
isargformatstr call:[getarg]
isargstrz call:[getarg]
validarg global:[emptyString] call:[getarg]
isInt call:[isInt] noreturn:[isInt]
getArgIteratorInfo call:[getarg]
argminsizes call:[getarg]
markupExtensions
isexporter call:[end,find] noreturn:[end]
isexportedprefix call:[end,find,isPrefix,return] noreturn:[return]
isexportedsuffix call:[end,find,isSuffix,return] noreturn:[return]
isreflection call:[end,find] noreturn:[end]
reflectionArgument call:[end,find]
podtype call:[end,find,return]
PlatformType
operator== call:[return] noreturn:[return]
operator!=
platform_type call:[end,find,return]
platform_type call:[end,find,platform_type,return]
addPrefix call:[insert] noreturn:[insert]
addSuffix call:[insert] noreturn:[insert]
isPrefix call:[end,find,return] noreturn:[return]
isSuffix call:[end,find,return] noreturn:[return]
CodeBlock
setStart
setEnd
setOffset
addBlock call:[insert] noreturn:[insert]
start
end
offset
isBlock call:[end,find] noreturn:[end]
getAllocDealloc call:[end,find,return]
min_value
max_value call:[return]
Platform
isIntValue call:[max_value,min_value] noreturn:[max_value]
isIntValue call:[max_value]
isLongValue call:[max_value,min_value] noreturn:[max_value]
isLongValue call:[max_value]
isLongLongValue call:[max_value]
isWindowsPlatform
platformString call:[platformString] noreturn:[platformString]
platformString
unsignedCharMax call:[max_value] noreturn:[max_value]
signedCharMax call:[max_value] noreturn:[max_value]
signedCharMin call:[min_value] noreturn:[min_value]
setDirectives
getDirectives
setFile0
operator() call:[caseInsensitiveStringCompare]
FileSettings
cppcheckDefines
getFileName
Suppression
Suppression
Suppression
operator=
operator<
isLocal call:[empty,find_first_of]
isSameParameters
TimerResultsIntf
TimerResultsData
seconds
TimerResults
Rule
SafeChecks
clear
configurationExcluded call:[compare,length]
posix call:[begin,end,find] noreturn:[end]
terminate
terminated
FileLocation
FileLocation
FileLocation
getinfo
setinfo
shortMessage
verboseMessage
symbolNames
ErrorLogger
ErrorLogger call:[close,is_open,plistFooter] noreturn:[close]
reportProgress
reportInfo call:[reportErr] noreturn:[reportErr]
plistFooter
assertEquals call:[assertEqualsFailed,str] noreturn:[assertEqualsFailed]
setVerbose
setMultiline
bughuntingReport
TestFixture
FwdAnalysis
Result
Result
operator()
operator()
operator()
operator() call:[abs]
operator()
Value
equalValue call:[sameToken]
visitValue call:[f]
operator() call:[compare] noreturn:[compare]
operator() call:[bind,move,ref,visitValue] noreturn:[visitValue]
compareValue call:[assert,bind,isSymbolicValue,move,ref,sameToken,visitValue]
operator== call:[equalValue]
operator!=
equalTo call:[bind,ref,visitValue]
decreaseRange call:[visitValue] noreturn:[visitValue]
invertBound
invertRange call:[decreaseRange,invertBound] noreturn:[decreaseRange]
isIntValue
isTokValue
isFloatValue
isMovedValue
isUninitValue
isContainerSizeValue
isLifetimeValue
isBufferSizeValue
isIteratorValue
isIteratorStartValue
isIteratorEndValue
isSymbolicValue
isLocalLifetimeValue
isArgumentLifetimeValue
isSubFunctionLifetimeValue
isNonValue call:[isLifetimeValue,isMovedValue,isUninitValue] noreturn:[isLifetimeValue]
setKnown
isKnown
setPossible
isPossible
isImpossible
setImpossible
setInconclusive
isInconclusive
changeKnownToPossible call:[isKnown]
errorSeverity
LifetimeToken
LifetimeToken
LifetimeToken
setAddressOf
setInconclusive
isClass call:[setFlag] noreturn:[setFlag]
isFunction call:[setFlag] noreturn:[setFlag]
isVariable call:[setFlag] noreturn:[setFlag]
isAlias call:[setFlag] noreturn:[setFlag]
isSpecialization call:[setFlag] noreturn:[setFlag]
isPartialSpecialization call:[setFlag] noreturn:[setFlag]
isForwardDeclaration call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
getFlag call:[return] noreturn:[return]
setFlag
operator==
token
token
scope
name
fullName
nameToken
paramEnd
paramEnd
isClass call:[getFlag] noreturn:[getFlag]
isFunction call:[getFlag] noreturn:[getFlag]
isVariable call:[getFlag] noreturn:[getFlag]
isAlias call:[getFlag] noreturn:[getFlag]
isSpecialization call:[getFlag] noreturn:[getFlag]
isPartialSpecialization call:[getFlag] noreturn:[getFlag]
isForwardDeclaration call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isSameFamily call:[return]
ScopeInfo2
TokenImpl
str call:[update_property_info] noreturn:[update_property_info]
str
tokAt call:[tokAt]
linkAt call:[linkAt]
simpleMatch call:[simpleMatch] noreturn:[simpleMatch]
valueType
argumentType call:[Match,astParent] noreturn:[astParent]
tokType
tokType call:[setFlag] noreturn:[setFlag]
isKeyword
isName call:[getFlag] noreturn:[getFlag]
isNameOnly
isLiteral call:[getFlag] noreturn:[getFlag]
isNumber
isEnumerator
isOp call:[isAssignmentOp,isConstOp,return] noreturn:[return]
isConstOp call:[isArithmeticalOp,return] noreturn:[return]
isExtendedOp call:[isConstOp]
isArithmeticalOp
isComparisonOp
isAssignmentOp
isBoolean
isIncDecOp
isBinaryOp call:[astOperand1,astOperand2]
isUnaryOp call:[astOperand1,astOperand2]
flags
flags
isUnsigned call:[getFlag] noreturn:[getFlag]
isUnsigned call:[setFlag] noreturn:[setFlag]
isSigned call:[getFlag] noreturn:[getFlag]
isSigned call:[setFlag] noreturn:[setFlag]
isPointerCompare call:[getFlag] noreturn:[getFlag]
isPointerCompare call:[setFlag] noreturn:[setFlag]
isLong call:[getFlag] noreturn:[getFlag]
isLong call:[setFlag] noreturn:[setFlag]
isStandardType call:[getFlag] noreturn:[getFlag]
isStandardType call:[setFlag] noreturn:[setFlag]
isExpandedMacro call:[getFlag] noreturn:[getFlag]
isExpandedMacro call:[setFlag] noreturn:[setFlag]
isCast call:[getFlag] noreturn:[getFlag]
isCast call:[setFlag] noreturn:[setFlag]
isAttributeConstructor call:[getFlag] noreturn:[getFlag]
isAttributeConstructor call:[setFlag] noreturn:[setFlag]
isAttributeDestructor call:[getFlag] noreturn:[getFlag]
isAttributeDestructor call:[setFlag] noreturn:[setFlag]
isAttributeUnused call:[getFlag] noreturn:[getFlag]
isAttributeUnused call:[setFlag] noreturn:[setFlag]
isAttributeUsed call:[getFlag] noreturn:[getFlag]
isAttributeUsed call:[setFlag] noreturn:[setFlag]
isAttributePure call:[getFlag] noreturn:[getFlag]
isAttributePure call:[setFlag] noreturn:[setFlag]
isAttributeConst call:[getFlag] noreturn:[getFlag]
isAttributeConst call:[setFlag] noreturn:[setFlag]
isAttributeNoreturn call:[getFlag] noreturn:[getFlag]
isAttributeNoreturn call:[setFlag] noreturn:[setFlag]
isAttributeNothrow call:[getFlag] noreturn:[getFlag]
isAttributeNothrow call:[setFlag] noreturn:[setFlag]
isAttributePacked call:[getFlag] noreturn:[getFlag]
isAttributePacked call:[setFlag] noreturn:[setFlag]
isAttributeNodiscard call:[getFlag] noreturn:[getFlag]
isAttributeNodiscard call:[setFlag] noreturn:[setFlag]
isAttributeMaybeUnused call:[getFlag] noreturn:[getFlag]
isAttributeMaybeUnused call:[setFlag] noreturn:[setFlag]
setCppcheckAttribute call:[setCppcheckAttribute] noreturn:[setCppcheckAttribute]
getCppcheckAttribute call:[getCppcheckAttribute] noreturn:[getCppcheckAttribute]
hasCppcheckAttributes
isControlFlowKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[setFlag] noreturn:[setFlag]
isComplex call:[getFlag] noreturn:[getFlag]
isComplex call:[setFlag] noreturn:[setFlag]
isEnumType call:[getFlag] noreturn:[getFlag]
isEnumType call:[setFlag] noreturn:[setFlag]
isAtAddress call:[getFlag] noreturn:[getFlag]
isAtAddress call:[setFlag] noreturn:[setFlag]
isIncompleteVar call:[getFlag] noreturn:[getFlag]
isIncompleteVar call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
isExternC call:[getFlag] noreturn:[getFlag]
isExternC call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclComma call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclComma call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclEq call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclEq call:[setFlag] noreturn:[setFlag]
isImplicitInt call:[getFlag] noreturn:[getFlag]
isImplicitInt call:[setFlag] noreturn:[setFlag]
isInline call:[getFlag] noreturn:[getFlag]
isInline call:[setFlag] noreturn:[setFlag]
isTemplate call:[getFlag] noreturn:[getFlag]
isTemplate call:[setFlag] noreturn:[setFlag]
isBitfield
bits
templateSimplifierPointers
templateSimplifierPointer call:[insert] noreturn:[insert]
setBits
isUtf8 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf16 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf32 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isCChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isCMultiChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isTemplateArg call:[getFlag] noreturn:[getFlag]
isTemplateArg call:[setFlag] noreturn:[setFlag]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findmatch call:[findmatch]
findmatch call:[findmatch]
fileIndex
fileIndex
linenr
linenr
column
column
next
previous
varId
varId call:[isStandardType,tokType,update_property_info] noreturn:[isStandardType,update_property_info]
exprId
exprId
forDebug
forDebugVarId call:[forDebug]
forDebugExprId call:[forDebug]
forPrintOut call:[forDebug]
link call:[update_property_info] noreturn:[update_property_info]
link
scope
scope
function
variable call:[tokType] noreturn:[tokType]
variable
type
enumerator
enumerator call:[tokType] noreturn:[tokType]
progressValue
originalName global:[emptyString]
values
originalName call:[string] noreturn:[string]
getKnownIntValue call:[front]
removeValues call:[remove_if] noreturn:[remove_if]
index
next
previous
getFlag call:[return] noreturn:[return]
setFlag
astOperand1
astOperand1
astOperand2
astOperand2
astParent
astParent
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astTop
astTop
clearAst
clearValueFlow
astString call:[astString] noreturn:[astString]
setCpp11init
isCpp11init
setSettings
getSettings
isC
isCPP
front
front
back
back
getFiles
find call:[find] noreturn:[find]
end call:[end] noreturn:[end]
map
getVarId
setTimerResults
isC call:[isC] noreturn:[isC]
isCPP call:[isCPP] noreturn:[isCPP]
setPreprocessor
getPreprocessor
codeWithTemplates
setSettings call:[setSettings] noreturn:[setSettings]
getSymbolDatabase
varIdCount
tokens call:[front] noreturn:[front]
isMaxTime
getSettings
newVarId
TestOther
run call:[c_str,checkCastIntToCharAndBack,checkCommaSeparatedReturn,checkComparePointers,checkComparisonFunctionIsAlwaysTrueOrFalse,checkInvalidFree,checkNegativeShift,checkOverlappingWrite,checkPassByReference,checkPipeParameterSize,checkRedundantCopy,checkSignOfPointer,checkSignOfUnsignedVariable,checkSuspiciousComparison,checkSuspiciousSemicolon1,checkSuspiciousSemicolon2,checkSuspiciousSemicolon3,clarifyCalculation,clarifyStatement,complainMissingLib,constParameterCallback,constPointer,constVariable,constVariableArrayMember,cpp11FunctionArgInit,doubleMove1,doubleMoveMemberInitialization1,doubleMoveMemberInitialization2,duplicateBranch,duplicateBranch1,duplicateBranch2,duplicateBranch3,duplicateBranch4,duplicateExpression1,duplicateExpression10,duplicateExpression11,duplicateExpression12,duplicateExpression2,duplicateExpression3,duplicateExpression4,duplicateExpression5,duplicateExpression6,duplicateExpression7,duplicateExpression8,duplicateExpression9,duplicateExpressionCompareWithZero,duplicateExpressionLoop,duplicateExpressionTemplate,duplicateExpressionTernary,duplicateValueTernary,duplicateVarExpression,duplicateVarExpressionAssign,duplicateVarExpressionCrash,duplicateVarExpressionUnique,emptyBrackets,forwardAndUsed,funcArgNamesDifferent,funcArgOrderDifferent,incompleteArrayFill,integerOverflow,invalidPointerCast,knownArgument,knownArgumentHiddenVariableExpression,knownArgumentTernaryOperator,load,moduloOfOne,moveAndAddressOf,moveAndAssign1,moveAndAssign2,moveAndClear,moveAndFunctionParameter,moveAndFunctionParameterConstReference,moveAndFunctionParameterReference,moveAndFunctionParameterUnknown,moveAndLambda,moveAndReset1,moveAndReset2,moveAndReturn,moveAssignMoveAssign,moveResetMoveReset,movedPointer,multiConditionSameExpression,nanInArithmeticExpression,oldStylePointerCast,oppositeExpression,partiallyMoved,passedByValue,passedByValue_externC,passedByValue_nonConst,prepareTest,raceAfterInterlockedDecrement,redundantInitialization,redundantMemWrite,redundantPointerOp,redundantVarAssignment,redundantVarAssignment_7133,redundantVarAssignment_after_switch,redundantVarAssignment_array,redundantVarAssignment_lambda,redundantVarAssignment_loop,redundantVarAssignment_pointer,redundantVarAssignment_pointer_parameter,redundantVarAssignment_stackoverflow,redundantVarAssignment_struct,redundantVarAssignment_switch_break,redundantVarAssignment_trivial,sameExpressionPointers,selfAssignment,setVerbose,shadowVariables,suspiciousCase,suspiciousEqualityComparison,switchRedundantAssignmentTest,switchRedundantBitwiseOperationTest,switchRedundantOperationTest,testEvaluationOrder,testEvaluationOrderMacro,testEvaluationOrderSelfAssignment,testEvaluationOrderSequencePointsComma,testEvaluationOrderSequencePointsFunctionCall,testEvaluationOrderSizeof,testMisusedScopeObjectDoesNotPickConstructorDeclaration,testMisusedScopeObjectDoesNotPickFunction1,testMisusedScopeObjectDoesNotPickFunction2,testMisusedScopeObjectDoesNotPickFunctor,testMisusedScopeObjectDoesNotPickIf,testMisusedScopeObjectDoesNotPickLocalClassConstructors,testMisusedScopeObjectDoesNotPickNestedClass,testMisusedScopeObjectDoesNotPickPureC,testMisusedScopeObjectDoesNotPickUsedObject,testMisusedScopeObjectInConstructor,testMisusedScopeObjectNoCodeAfter,testMisusedScopeObjectPicksClass,testMisusedScopeObjectPicksStruct,testUnsignedLessThanZero,testUnusedLabel,test_isSameExpression,trac1132,trac2071,trac2084,trac3693,unreachableCode,unusedVariableValueTemplate,varFuncNullUB,varScope1,varScope10,varScope11,varScope12,varScope13,varScope14,varScope15,varScope16,varScope17,varScope18,varScope2,varScope20,varScope21,varScope22,varScope23,varScope24,varScope25,varScope26,varScope27,varScope3,varScope4,varScope5,varScope6,varScope7,varScope8,varScope9,while,zeroDiv1,zeroDiv10,zeroDiv11,zeroDiv12,zeroDiv13,zeroDiv2,zeroDiv3,zeroDiv4,zeroDiv5,zeroDiv6,zeroDiv7,zeroDiv8,zeroDiv9,zeroDivCond] noreturn:[checkCastIntToCharAndBack,checkCommaSeparatedReturn,checkComparePointers,checkComparisonFunctionIsAlwaysTrueOrFalse,checkInvalidFree,checkNegativeShift,checkOverlappingWrite,checkPassByReference,checkPipeParameterSize,checkRedundantCopy,checkSignOfPointer,checkSignOfUnsignedVariable,checkSuspiciousComparison,checkSuspiciousSemicolon1,checkSuspiciousSemicolon2,checkSuspiciousSemicolon3,clarifyCalculation,clarifyStatement,constParameterCallback,constPointer,constVariable,constVariableArrayMember,cpp11FunctionArgInit,doubleMove1,doubleMoveMemberInitialization1,doubleMoveMemberInitialization2,duplicateBranch,duplicateBranch1,duplicateBranch2,duplicateBranch3,duplicateBranch4,duplicateExpression1,duplicateExpression10,duplicateExpression11,duplicateExpression12,duplicateExpression2,duplicateExpression3,duplicateExpression4,duplicateExpression5,duplicateExpression6,duplicateExpression7,duplicateExpression8,duplicateExpression9,duplicateExpressionCompareWithZero,duplicateExpressionLoop,duplicateExpressionTemplate,duplicateExpressionTernary,duplicateValueTernary,duplicateVarExpression,duplicateVarExpressionAssign,duplicateVarExpressionCrash,duplicateVarExpressionUnique,emptyBrackets,forwardAndUsed,funcArgNamesDifferent,funcArgOrderDifferent,incompleteArrayFill,integerOverflow,invalidPointerCast,knownArgument,knownArgumentHiddenVariableExpression,knownArgumentTernaryOperator,moduloOfOne,moveAndAddressOf,moveAndAssign1,moveAndAssign2,moveAndClear,moveAndFunctionParameter,moveAndFunctionParameterConstReference,moveAndFunctionParameterReference,moveAndFunctionParameterUnknown,moveAndLambda,moveAndReset1,moveAndReset2,moveAndReturn,moveAssignMoveAssign,moveResetMoveReset,movedPointer,multiConditionSameExpression,nanInArithmeticExpression,oldStylePointerCast,oppositeExpression,partiallyMoved,passedByValue,passedByValue_externC,passedByValue_nonConst,raceAfterInterlockedDecrement,redundantInitialization,redundantMemWrite,redundantPointerOp,redundantVarAssignment,redundantVarAssignment_7133,redundantVarAssignment_after_switch,redundantVarAssignment_array,redundantVarAssignment_lambda,redundantVarAssignment_loop,redundantVarAssignment_pointer,redundantVarAssignment_pointer_parameter,redundantVarAssignment_stackoverflow,redundantVarAssignment_struct,redundantVarAssignment_switch_break,redundantVarAssignment_trivial,sameExpressionPointers,selfAssignment,shadowVariables,suspiciousCase,suspiciousEqualityComparison,switchRedundantAssignmentTest,switchRedundantBitwiseOperationTest,switchRedundantOperationTest,testEvaluationOrder,testEvaluationOrderMacro,testEvaluationOrderSelfAssignment,testEvaluationOrderSequencePointsComma,testEvaluationOrderSequencePointsFunctionCall,testEvaluationOrderSizeof,testMisusedScopeObjectDoesNotPickConstructorDeclaration,testMisusedScopeObjectDoesNotPickFunction1,testMisusedScopeObjectDoesNotPickFunction2,testMisusedScopeObjectDoesNotPickFunctor,testMisusedScopeObjectDoesNotPickIf,testMisusedScopeObjectDoesNotPickLocalClassConstructors,testMisusedScopeObjectDoesNotPickNestedClass,testMisusedScopeObjectDoesNotPickPureC,testMisusedScopeObjectDoesNotPickUsedObject,testMisusedScopeObjectInConstructor,testMisusedScopeObjectNoCodeAfter,testMisusedScopeObjectPicksClass,testMisusedScopeObjectPicksStruct,testUnsignedLessThanZero,testUnusedLabel,test_isSameExpression,trac1132,trac2071,trac2084,trac3693,unreachableCode,unusedVariableValueTemplate,varFuncNullUB,varScope1,varScope10,varScope11,varScope12,varScope13,varScope14,varScope15,varScope16,varScope17,varScope18,varScope2,varScope20,varScope21,varScope22,varScope23,varScope24,varScope25,varScope26,varScope27,varScope3,varScope4,varScope5,varScope6,varScope7,varScope8,varScope9,while,zeroDiv1,zeroDiv10,zeroDiv11,zeroDiv12,zeroDiv13,zeroDiv2,zeroDiv3,zeroDiv4,zeroDiv5,zeroDiv6,zeroDiv7,zeroDiv8,zeroDiv9,zeroDivCond]
check_ global:[errout] call:[assert_,checkOther,enable,istr,runChecks,setEnabled,str,tokenize,tokenizer]
check_ call:[check_] noreturn:[check_]
checkP global:[errout] call:[DUI,checkOther,createTokens,disable,enable,files,istr,move,preprocess,preprocessor,runChecks,setDirectives,setPreprocessor,simplifyTokens1,str,tokenizer,tokens1,tokens2] noreturn:[runChecks]
checkposix call:[check_,emplace_back,enable] noreturn:[check_]
checkInterlockedDecrement call:[check_] noreturn:[check_]
emptyBrackets global:[errout] call:[assertEquals,check_,str]
zeroDiv1 global:[errout] call:[assertEquals,check_,str]
zeroDiv2 global:[errout] call:[assertEquals,check_,str]
zeroDiv3 global:[errout] call:[assertEquals,check_,str]
zeroDiv4 global:[errout] call:[assertEquals,check_,str]
zeroDiv5 global:[errout] call:[assertEquals,check_,str]
zeroDiv6 global:[errout] call:[assertEquals,check_,str]
zeroDiv7 global:[errout] call:[assertEquals,check_,str]
zeroDiv8 global:[errout] call:[assertEquals,check_,str]
zeroDiv9 global:[errout] call:[assertEquals,check_,str]
zeroDiv10 global:[errout] call:[assertEquals,check_,str]
zeroDiv11 global:[errout] call:[assertEquals,check_,str]
zeroDiv12 global:[errout] call:[assertEquals,check_,str]
zeroDiv13 global:[errout] call:[assertEquals,check_,str]
zeroDivCond global:[errout] call:[assertEquals,check_,str]
nanInArithmeticExpression global:[errout] call:[assertEquals,check_,str]
varScope1 global:[errout] call:[assertEquals,check_,str]
varScope2 global:[errout] call:[assertEquals,check_,str]
varScope3 global:[errout] call:[assertEquals,check_,str]
varScope4 global:[errout] call:[assertEquals,check_,str]
varScope5 global:[errout] call:[assertEquals,check_,str]
varScope6 global:[errout] call:[assertEquals,check_,str]
varScope7 global:[errout] call:[assertEquals,check_,str]
varScope8 global:[errout] call:[assertEquals,check_,str]
varScope9 global:[errout] call:[assertEquals,check_,str]
varScope10 global:[errout] call:[assertEquals,check_,str]
varScope11 global:[errout] call:[assertEquals,check_,str]
varScope12 global:[errout] call:[assertEquals,check_,str]
varScope13 global:[errout] call:[assertEquals,check_,str]
varScope14 global:[errout] call:[assertEquals,check_,str]
varScope15 global:[errout] call:[assertEquals,check_,str]
varScope16 global:[errout] call:[assertEquals,check_,str]
varScope17 global:[errout] call:[assertEquals,check_,str]
varScope18 global:[errout] call:[assertEquals,check_,str]
varScope20 global:[errout] call:[assertEquals,check_,str]
varScope21 global:[errout] call:[assertEquals,check_,str]
varScope22 global:[errout] call:[assertEquals,check_,str]
varScope23 global:[errout] call:[assertEquals,check_,str]
varScope24 global:[errout] call:[assertEquals,check_,str]
varScope25 global:[errout] call:[assertEquals,check_,str]
varScope26 global:[errout] call:[assertEquals,check_,str]
varScope27 global:[errout] call:[assertEquals,checkP,str]
checkOldStylePointerCast_ global:[errout] call:[assert_,checkOtherCpp,enable,istr,str,tokenize,tokenizerCpp,warningOldStylePointerCast] noreturn:[warningOldStylePointerCast]
oldStylePointerCast global:[errout] call:[assertEquals,checkOldStylePointerCast_,str]
checkInvalidPointerCast_ global:[errout] call:[assert_,checkOtherCpp,enable,invalidPointerCast,istr,setEnabled,str,tokenize,tokenizer] noreturn:[enable,invalidPointerCast]
invalidPointerCast global:[errout] call:[assertEquals,checkInvalidPointerCast_,str] noreturn:[checkInvalidPointerCast_]
passedByValue global:[errout] call:[assertEquals,check_,str,todoAssertEquals] noreturn:[todoAssertEquals]
passedByValue_nonConst global:[errout] call:[assertEquals,check_,platform,s32,s64,str]
passedByValue_externC global:[errout] call:[assertEquals,check_,str]
constVariable global:[errout] call:[assertEquals,check_,str,todoAssertEquals]
constParameterCallback global:[errout] call:[assertEquals,check_,str]
constPointer global:[errout] call:[assertEquals,check_,str]
switchRedundantAssignmentTest global:[errout] call:[assertEquals,check_,str]
switchRedundantOperationTest global:[errout] call:[assertEquals,check_,str]
switchRedundantBitwiseOperationTest global:[errout] call:[assertEquals,check_,str]
unreachableCode global:[errout] call:[ArgumentChecks,assertEquals,assertThrow,check_,setnoreturn,str,while] noreturn:[assertThrow,check_]
suspiciousCase global:[errout] call:[assertEquals,assertThrow,check_,str,while] noreturn:[assertThrow,check_,while]
suspiciousEqualityComparison global:[errout] call:[assertEquals,check_,str]
selfAssignment global:[errout] call:[assertEquals,check_,str,todoAssertEquals]
trac1132 global:[errout] call:[assertEquals,check_,str]
trac3693 global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectDoesNotPickFunction1 global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectDoesNotPickFunction2 global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectPicksClass global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectPicksStruct global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectDoesNotPickIf global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectDoesNotPickConstructorDeclaration global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectDoesNotPickFunctor global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectDoesNotPickLocalClassConstructors global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectDoesNotPickUsedObject global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectDoesNotPickPureC global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectDoesNotPickNestedClass global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectInConstructor global:[errout] call:[assertEquals,check_,str]
testMisusedScopeObjectNoCodeAfter global:[errout] call:[assertEquals,check_,str]
trac2084 global:[errout] call:[assertEquals,check_,str]
trac2071 global:[errout] call:[assertEquals,check_,str]
clarifyCalculation global:[errout] call:[assertEquals,check_,str]
clarifyStatement global:[errout] call:[assertEquals,check_,str]
duplicateBranch global:[errout] call:[assertEquals,check_,str]
duplicateBranch1 global:[errout] call:[assertEquals,check_,str]
duplicateBranch2 global:[errout] call:[assertEquals,checkP,str]
duplicateBranch3 global:[errout] call:[assertEquals,check_,str]
duplicateBranch4 global:[errout] call:[assertEquals,check_,str]
duplicateExpression1 global:[errout] call:[assertEquals,check_,str]
duplicateExpression2 global:[errout] call:[assertEquals,check_,str]
duplicateExpression3 global:[errout] call:[Parse,assertEquals,check_,load,sizeof,str]
duplicateExpression4 global:[errout] call:[assertEquals,check_,str]
duplicateExpression5 global:[errout] call:[assertEquals,check_,str]
duplicateExpression6 global:[errout] call:[assertEquals,check_,str]
duplicateExpression7 global:[errout] call:[assertEquals,check_,str]
duplicateExpression8 global:[errout] call:[assertEquals,check_,str]
duplicateExpression9 global:[errout] call:[assertEquals,check_,str]
duplicateExpression10 global:[errout] call:[assertEquals,check_,str]
duplicateExpression11 global:[errout] call:[assertEquals,check_,str]
duplicateExpression12 global:[errout] call:[assertEquals,check_,str]
duplicateExpressionLoop global:[errout] call:[assertEquals,check_,str]
duplicateExpressionTernary global:[errout] call:[assertEquals,check_,str]
duplicateValueTernary global:[errout] call:[assertEquals,check_,str]
duplicateExpressionTemplate global:[errout] call:[assertEquals,check_,str]
duplicateExpressionCompareWithZero global:[errout] call:[assertEquals,check_,str]
oppositeExpression global:[errout] call:[assertEquals,check_,str]
duplicateVarExpression global:[errout] call:[assertEquals,check_,str]
duplicateVarExpressionUnique global:[errout] call:[assertEquals,check_,str]
duplicateVarExpressionAssign global:[errout] call:[assertEquals,check_,str]
duplicateVarExpressionCrash global:[errout] call:[assertEquals,check_,str]
multiConditionSameExpression global:[errout] call:[assertEquals,check_,str,todoAssertEquals]
checkSignOfUnsignedVariable global:[errout] call:[assertEquals,check_,platform,str]
checkSignOfPointer global:[errout] call:[assertEquals,check_,str]
checkSuspiciousSemicolon1 global:[errout] call:[assertEquals,check_,str]
checkSuspiciousSemicolon2 global:[errout] call:[assertEquals,check_,str]
checkSuspiciousSemicolon3 global:[errout] call:[assertEquals,checkP,str]
checkSuspiciousComparison global:[errout] call:[assertEquals,checkP,str]
checkInvalidFree global:[errout] call:[assertEquals,check_,str]
checkRedundantCopy global:[errout] call:[assertEquals,check_,str,todoAssertEquals]
checkNegativeShift global:[errout] call:[assertEquals,check_,str]
incompleteArrayFill global:[errout] call:[assertEquals,check_,str]
redundantVarAssignment global:[errout] call:[assertEquals,check_,setMultiline,str,todoAssertEquals]
redundantVarAssignment_trivial global:[errout] call:[assertEquals,check_,str]
redundantVarAssignment_struct global:[errout] call:[assertEquals,check_,str]
redundantVarAssignment_7133 global:[errout] call:[assertEquals,check_,str]
redundantVarAssignment_stackoverflow global:[errout] call:[assertEquals,check_,str]
redundantVarAssignment_lambda global:[errout] call:[assertEquals,check_,str]
redundantVarAssignment_loop global:[errout] call:[assertEquals,check_,str,todoAssertEquals] noreturn:[todoAssertEquals]
redundantVarAssignment_after_switch global:[errout] call:[assertEquals,check_,str]
redundantVarAssignment_pointer global:[errout] call:[assertEquals,check_,str]
redundantVarAssignment_pointer_parameter global:[errout] call:[assertEquals,check_,str]
redundantVarAssignment_array global:[errout] call:[assertEquals,check_,str]
redundantVarAssignment_switch_break global:[errout] call:[assertEquals,check_,str]
redundantInitialization global:[errout] call:[assertEquals,check_,setMultiline,str]
redundantMemWrite global:[errout] call:[assertEquals,check_,str,todoAssertEquals] noreturn:[todoAssertEquals]
varFuncNullUB global:[errout] call:[assertEquals,check_,str]
checkPipeParameterSize global:[errout] call:[assertEquals,check_,checkposix,str]
checkCastIntToCharAndBack global:[errout] call:[assertEquals,check_,str]
checkCommaSeparatedReturn global:[errout] call:[assertEquals,check_,str]
checkPassByReference global:[errout] call:[assertEquals,check_,str]
checkComparisonFunctionIsAlwaysTrueOrFalse global:[errout] call:[assertEquals,check_,str]
integerOverflow global:[errout] call:[assertEquals,check_,str]
redundantPointerOp global:[errout] call:[assertEquals,checkP,check_,str]
test_isSameExpression global:[errout] call:[assertEquals,check_,str]
raceAfterInterlockedDecrement global:[errout] call:[assertEquals,checkInterlockedDecrement,str]
testUnusedLabel global:[errout] call:[assertEquals,check_,str]
testEvaluationOrder global:[errout] call:[assertEquals,check_,str]
testEvaluationOrderSelfAssignment global:[errout] call:[assertEquals,check_,str]
testEvaluationOrderMacro global:[errout] call:[assertEquals,checkP,str]
testEvaluationOrderSequencePointsFunctionCall global:[errout] call:[assertEquals,check_,str,todoAssertEquals] noreturn:[todoAssertEquals]
testEvaluationOrderSequencePointsComma global:[errout] call:[assertEquals,check_,str]
testEvaluationOrderSizeof global:[errout] call:[assertEquals,check_,str]
testUnsignedLessThanZero global:[errout] call:[assertEquals,check_,str]
doubleMove1 global:[errout] call:[assertEquals,check_,str]
doubleMoveMemberInitialization1 global:[errout] call:[assertEquals,check_,str]
doubleMoveMemberInitialization2 global:[errout] call:[assertEquals,check_,str]
moveAndAssign1 global:[errout] call:[assertEquals,check_,str]
moveAndAssign2 global:[errout] call:[assertEquals,check_,str]
moveAssignMoveAssign global:[errout] call:[assertEquals,check_,str]
moveAndReset1 global:[errout] call:[assertEquals,check_,str]
moveAndReset2 global:[errout] call:[assertEquals,check_,str]
moveResetMoveReset global:[errout] call:[assertEquals,check_,str]
moveAndFunctionParameter global:[errout] call:[assertEquals,check_,str]
moveAndFunctionParameterReference global:[errout] call:[assertEquals,check_,str]
moveAndFunctionParameterConstReference global:[errout] call:[assertEquals,check_,str]
moveAndFunctionParameterUnknown global:[errout] call:[assertEquals,check_,str]
moveAndReturn global:[errout] call:[assertEquals,check_,str]
moveAndClear global:[errout] call:[assertEquals,check_,str]
movedPointer global:[errout] call:[assertEquals,check_,str]
moveAndAddressOf global:[errout] call:[assertEquals,check_,str]
partiallyMoved global:[errout] call:[assertEquals,check_,str]
moveAndLambda global:[errout] call:[assertEquals,check_,str]
forwardAndUsed global:[errout] call:[assertEquals,check_,str]
funcArgNamesDifferent global:[errout] call:[assertEquals,check_,str]
funcArgOrderDifferent global:[errout] call:[assertEquals,check_,str]
cpp11FunctionArgInit global:[errout] call:[assertEquals,assertNoThrowFail,check_,str,while] noreturn:[assertNoThrowFail,check_]
shadowVariables global:[errout] call:[assertEquals,check_,str]
knownArgument global:[errout] call:[assertEquals,check_,str]
knownArgumentHiddenVariableExpression global:[errout] call:[assertEquals,check_,str]
knownArgumentTernaryOperator global:[errout] call:[assertEquals,check_,str]
checkComparePointers global:[errout] call:[assertEquals,check_,str]
unusedVariableValueTemplate global:[errout] call:[assertEquals,check_,str]
moduloOfOne global:[errout] call:[assertEquals,check_,str]
sameExpressionPointers global:[errout] call:[assertEquals,check_,str]
checkOverlappingWrite global:[errout] call:[assertEquals,check_,str]
constVariableArrayMember global:[errout] call:[assertEquals,check_,str]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
