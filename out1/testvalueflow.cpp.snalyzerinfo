isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
CWE
Standards
setC
getC
setCPP
getCPP
Error
Error
Error
getAllocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
getDeallocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
allocId call:[getAllocDealloc]
deallocId call:[getAllocDealloc]
setalloc
setdealloc
setrealloc
setnoreturn
ismemory call:[return] noreturn:[return]
ismemory call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
Container
getAction call:[end,find]
getYield call:[end,find]
ArgumentChecks
IteratorInfo
MinSize
Function
isboolargbad call:[getarg]
isargformatstr call:[getarg]
isargstrz call:[getarg]
validarg global:[emptyString] call:[getarg]
isInt call:[isInt] noreturn:[isInt]
getArgIteratorInfo call:[getarg]
argminsizes call:[getarg]
markupExtensions
isexporter call:[end,find] noreturn:[end]
isexportedprefix call:[end,find,isPrefix,return] noreturn:[return]
isexportedsuffix call:[end,find,isSuffix,return] noreturn:[return]
isreflection call:[end,find] noreturn:[end]
reflectionArgument call:[end,find]
podtype call:[end,find,return]
PlatformType
operator== call:[return] noreturn:[return]
operator!=
platform_type call:[end,find,return]
platform_type call:[end,find,platform_type,return]
addPrefix call:[insert] noreturn:[insert]
addSuffix call:[insert] noreturn:[insert]
isPrefix call:[end,find,return] noreturn:[return]
isSuffix call:[end,find,return] noreturn:[return]
CodeBlock
setStart
setEnd
setOffset
addBlock call:[insert] noreturn:[insert]
start
end
offset
isBlock call:[end,find] noreturn:[end]
getAllocDealloc call:[end,find,return]
operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
min_value
max_value call:[return]
Platform
isIntValue call:[max_value,min_value] noreturn:[max_value]
isIntValue call:[max_value]
isLongValue call:[max_value,min_value] noreturn:[max_value]
isLongValue call:[max_value]
isLongLongValue call:[max_value]
isWindowsPlatform
platformString call:[platformString] noreturn:[platformString]
platformString
unsignedCharMax call:[max_value] noreturn:[max_value]
signedCharMax call:[max_value] noreturn:[max_value]
signedCharMin call:[min_value] noreturn:[min_value]
operator() call:[caseInsensitiveStringCompare]
FileSettings
cppcheckDefines
getFileName
Suppression
Suppression
Suppression
operator=
operator<
isLocal call:[empty,find_first_of]
isSameParameters
TimerResultsIntf
TimerResultsData
seconds
TimerResults
Rule
SafeChecks
clear
configurationExcluded call:[compare,length]
posix call:[begin,end,find] noreturn:[end]
terminate
terminated
FileLocation
FileLocation
FileLocation
getinfo
setinfo
shortMessage
verboseMessage
symbolNames
ErrorLogger
ErrorLogger call:[close,is_open,plistFooter] noreturn:[close]
reportProgress
reportInfo call:[reportErr] noreturn:[reportErr]
plistFooter
assertEquals call:[assertEqualsFailed,str] noreturn:[assertEqualsFailed]
setVerbose
setMultiline
bughuntingReport
TestFixture
FwdAnalysis
Result
Result
operator()
operator()
operator()
operator() call:[abs]
operator()
Value
equalValue call:[sameToken]
visitValue call:[f]
operator() call:[compare] noreturn:[compare]
operator() call:[bind,move,ref,visitValue] noreturn:[visitValue]
compareValue call:[assert,bind,isSymbolicValue,move,ref,sameToken,visitValue]
operator== call:[equalValue]
operator!=
equalTo call:[bind,ref,visitValue]
decreaseRange call:[visitValue] noreturn:[visitValue]
invertBound
invertRange call:[decreaseRange,invertBound] noreturn:[decreaseRange]
isIntValue
isTokValue
isFloatValue
isMovedValue
isUninitValue
isContainerSizeValue
isLifetimeValue
isBufferSizeValue
isIteratorValue
isIteratorStartValue
isIteratorEndValue
isSymbolicValue
isLocalLifetimeValue
isArgumentLifetimeValue
isSubFunctionLifetimeValue
isNonValue call:[isLifetimeValue,isMovedValue,isUninitValue] noreturn:[isLifetimeValue]
setKnown
isKnown
setPossible
isPossible
isImpossible
setImpossible
setInconclusive
isInconclusive
changeKnownToPossible call:[isKnown]
errorSeverity
LifetimeToken
LifetimeToken
LifetimeToken
setAddressOf
setInconclusive
isClass call:[setFlag] noreturn:[setFlag]
isFunction call:[setFlag] noreturn:[setFlag]
isVariable call:[setFlag] noreturn:[setFlag]
isAlias call:[setFlag] noreturn:[setFlag]
isSpecialization call:[setFlag] noreturn:[setFlag]
isPartialSpecialization call:[setFlag] noreturn:[setFlag]
isForwardDeclaration call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
getFlag call:[return] noreturn:[return]
setFlag
operator==
token
token
scope
name
fullName
nameToken
paramEnd
paramEnd
isClass call:[getFlag] noreturn:[getFlag]
isFunction call:[getFlag] noreturn:[getFlag]
isVariable call:[getFlag] noreturn:[getFlag]
isAlias call:[getFlag] noreturn:[getFlag]
isSpecialization call:[getFlag] noreturn:[getFlag]
isPartialSpecialization call:[getFlag] noreturn:[getFlag]
isForwardDeclaration call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isSameFamily call:[return]
ScopeInfo2
TokenImpl
str call:[update_property_info] noreturn:[update_property_info]
str
tokAt call:[tokAt]
linkAt call:[linkAt]
simpleMatch call:[simpleMatch] noreturn:[simpleMatch]
valueType
argumentType call:[Match,astParent] noreturn:[astParent]
tokType
tokType call:[setFlag] noreturn:[setFlag]
isKeyword
isName call:[getFlag] noreturn:[getFlag]
isNameOnly
isLiteral call:[getFlag] noreturn:[getFlag]
isNumber
isEnumerator
isOp call:[isAssignmentOp,isConstOp,return] noreturn:[return]
isConstOp call:[isArithmeticalOp,return] noreturn:[return]
isExtendedOp call:[isConstOp]
isArithmeticalOp
isComparisonOp
isAssignmentOp
isBoolean
isIncDecOp
isBinaryOp call:[astOperand1,astOperand2]
isUnaryOp call:[astOperand1,astOperand2]
flags
flags
isUnsigned call:[getFlag] noreturn:[getFlag]
isUnsigned call:[setFlag] noreturn:[setFlag]
isSigned call:[getFlag] noreturn:[getFlag]
isSigned call:[setFlag] noreturn:[setFlag]
isPointerCompare call:[getFlag] noreturn:[getFlag]
isPointerCompare call:[setFlag] noreturn:[setFlag]
isLong call:[getFlag] noreturn:[getFlag]
isLong call:[setFlag] noreturn:[setFlag]
isStandardType call:[getFlag] noreturn:[getFlag]
isStandardType call:[setFlag] noreturn:[setFlag]
isExpandedMacro call:[getFlag] noreturn:[getFlag]
isExpandedMacro call:[setFlag] noreturn:[setFlag]
isCast call:[getFlag] noreturn:[getFlag]
isCast call:[setFlag] noreturn:[setFlag]
isAttributeConstructor call:[getFlag] noreturn:[getFlag]
isAttributeConstructor call:[setFlag] noreturn:[setFlag]
isAttributeDestructor call:[getFlag] noreturn:[getFlag]
isAttributeDestructor call:[setFlag] noreturn:[setFlag]
isAttributeUnused call:[getFlag] noreturn:[getFlag]
isAttributeUnused call:[setFlag] noreturn:[setFlag]
isAttributeUsed call:[getFlag] noreturn:[getFlag]
isAttributeUsed call:[setFlag] noreturn:[setFlag]
isAttributePure call:[getFlag] noreturn:[getFlag]
isAttributePure call:[setFlag] noreturn:[setFlag]
isAttributeConst call:[getFlag] noreturn:[getFlag]
isAttributeConst call:[setFlag] noreturn:[setFlag]
isAttributeNoreturn call:[getFlag] noreturn:[getFlag]
isAttributeNoreturn call:[setFlag] noreturn:[setFlag]
isAttributeNothrow call:[getFlag] noreturn:[getFlag]
isAttributeNothrow call:[setFlag] noreturn:[setFlag]
isAttributePacked call:[getFlag] noreturn:[getFlag]
isAttributePacked call:[setFlag] noreturn:[setFlag]
isAttributeNodiscard call:[getFlag] noreturn:[getFlag]
isAttributeNodiscard call:[setFlag] noreturn:[setFlag]
isAttributeMaybeUnused call:[getFlag] noreturn:[getFlag]
isAttributeMaybeUnused call:[setFlag] noreturn:[setFlag]
setCppcheckAttribute call:[setCppcheckAttribute] noreturn:[setCppcheckAttribute]
getCppcheckAttribute call:[getCppcheckAttribute] noreturn:[getCppcheckAttribute]
hasCppcheckAttributes
isControlFlowKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[setFlag] noreturn:[setFlag]
isComplex call:[getFlag] noreturn:[getFlag]
isComplex call:[setFlag] noreturn:[setFlag]
isEnumType call:[getFlag] noreturn:[getFlag]
isEnumType call:[setFlag] noreturn:[setFlag]
isAtAddress call:[getFlag] noreturn:[getFlag]
isAtAddress call:[setFlag] noreturn:[setFlag]
isIncompleteVar call:[getFlag] noreturn:[getFlag]
isIncompleteVar call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
isExternC call:[getFlag] noreturn:[getFlag]
isExternC call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclComma call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclComma call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclEq call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclEq call:[setFlag] noreturn:[setFlag]
isImplicitInt call:[getFlag] noreturn:[getFlag]
isImplicitInt call:[setFlag] noreturn:[setFlag]
isInline call:[getFlag] noreturn:[getFlag]
isInline call:[setFlag] noreturn:[setFlag]
isTemplate call:[getFlag] noreturn:[getFlag]
isTemplate call:[setFlag] noreturn:[setFlag]
isBitfield
bits
templateSimplifierPointers
templateSimplifierPointer call:[insert] noreturn:[insert]
setBits
isUtf8 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf16 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf32 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isCChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isCMultiChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isTemplateArg call:[getFlag] noreturn:[getFlag]
isTemplateArg call:[setFlag] noreturn:[setFlag]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findmatch call:[findmatch]
findmatch call:[findmatch]
fileIndex
fileIndex
linenr
linenr
column
column
next
previous
varId
varId call:[isStandardType,tokType,update_property_info] noreturn:[isStandardType,update_property_info]
exprId
exprId
forDebug
forDebugVarId call:[forDebug]
forDebugExprId call:[forDebug]
forPrintOut call:[forDebug]
link call:[update_property_info] noreturn:[update_property_info]
link
scope
scope
function
variable call:[tokType] noreturn:[tokType]
variable
type
enumerator
enumerator call:[tokType] noreturn:[tokType]
progressValue
originalName global:[emptyString]
values
originalName call:[string] noreturn:[string]
getKnownIntValue call:[front]
removeValues call:[remove_if] noreturn:[remove_if]
index
next
previous
getFlag call:[return] noreturn:[return]
setFlag
astOperand1
astOperand1
astOperand2
astOperand2
astParent
astParent
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astTop
astTop
clearAst
clearValueFlow
astString call:[astString] noreturn:[astString]
setCpp11init
isCpp11init
setSettings
getSettings
isC
isCPP
front
front
back
back
getFiles
find call:[find] noreturn:[find]
end call:[end] noreturn:[end]
map
getVarId
setTimerResults
isC call:[isC] noreturn:[isC]
isCPP call:[isCPP] noreturn:[isCPP]
setPreprocessor
getPreprocessor
codeWithTemplates
setSettings call:[setSettings] noreturn:[setSettings]
getSymbolDatabase
varIdCount
tokens call:[front] noreturn:[front]
isMaxTime
getSettings
newVarId
TestValueFlow
run call:[c_str,complainMissingLib,knownValue,load,loadxmldata,prepareTest,setVerbose,sizeof,valueFlowAfterAssign,valueFlowAfterCondition,valueFlowAfterConditionExpr,valueFlowAfterConditionSeveralNot,valueFlowAfterSwap,valueFlowArrayElement,valueFlowBeforeCondition,valueFlowBeforeConditionAndAndOrOrGuard,valueFlowBeforeConditionAssignIncDec,valueFlowBeforeConditionConstructor,valueFlowBeforeConditionForward,valueFlowBeforeConditionFunctionCall,valueFlowBeforeConditionGlobalVariables,valueFlowBeforeConditionGoto,valueFlowBeforeConditionIfElse,valueFlowBeforeConditionLoop,valueFlowBeforeConditionMacro,valueFlowBeforeConditionSizeof,valueFlowBeforeConditionSwitch,valueFlowBeforeConditionTernaryOp,valueFlowBitAnd,valueFlowCalculations,valueFlowConditionExpressions,valueFlowContainerSize,valueFlowCrash,valueFlowCrashConstructorInitialization,valueFlowCrashIncompleteCode,valueFlowDynamicBufferSize,valueFlowErrorPath,valueFlowForLoop,valueFlowForwardCompoundAssign,valueFlowForwardCorrelatedVariables,valueFlowForwardFunction,valueFlowForwardInconclusiveImpossible,valueFlowForwardLambda,valueFlowForwardModifiedVariables,valueFlowForwardTernary,valueFlowForwardTryCatch,valueFlowFunctionDefaultParameter,valueFlowFunctionReturn,valueFlowFwdAnalysis,valueFlowGlobalConstVar,valueFlowGlobalStaticVar,valueFlowGlobalVar,valueFlowHang,valueFlowIdempotent,valueFlowInlineAssembly,valueFlowLifetime,valueFlowMod,valueFlowMove,valueFlowNotNull,valueFlowNumber,valueFlowPointerAlias,valueFlowPointerAliasDeref,valueFlowRightShift,valueFlowSafeFunctionParameterValues,valueFlowSameExpression,valueFlowSizeof,valueFlowSizeofForwardDeclaredEnum,valueFlowSmartPointer,valueFlowString,valueFlowSubFunction,valueFlowSwitchVariable,valueFlowSymbolic,valueFlowSymbolicIdentity,valueFlowUninit,valueFlowUnknownFunctionReturn,valueFlowUnknownMixedOperators,valueFlowUnsigned,while] noreturn:[knownValue,valueFlowAfterAssign,valueFlowAfterCondition,valueFlowAfterConditionExpr,valueFlowAfterConditionSeveralNot,valueFlowAfterSwap,valueFlowArrayElement,valueFlowBeforeCondition,valueFlowBeforeConditionAndAndOrOrGuard,valueFlowBeforeConditionAssignIncDec,valueFlowBeforeConditionConstructor,valueFlowBeforeConditionForward,valueFlowBeforeConditionFunctionCall,valueFlowBeforeConditionGlobalVariables,valueFlowBeforeConditionGoto,valueFlowBeforeConditionIfElse,valueFlowBeforeConditionLoop,valueFlowBeforeConditionMacro,valueFlowBeforeConditionSizeof,valueFlowBeforeConditionSwitch,valueFlowBeforeConditionTernaryOp,valueFlowBitAnd,valueFlowCalculations,valueFlowConditionExpressions,valueFlowContainerSize,valueFlowCrash,valueFlowCrashConstructorInitialization,valueFlowCrashIncompleteCode,valueFlowDynamicBufferSize,valueFlowErrorPath,valueFlowForLoop,valueFlowForwardCompoundAssign,valueFlowForwardCorrelatedVariables,valueFlowForwardFunction,valueFlowForwardInconclusiveImpossible,valueFlowForwardLambda,valueFlowForwardModifiedVariables,valueFlowForwardTernary,valueFlowForwardTryCatch,valueFlowFunctionDefaultParameter,valueFlowFunctionReturn,valueFlowFwdAnalysis,valueFlowGlobalConstVar,valueFlowGlobalStaticVar,valueFlowGlobalVar,valueFlowHang,valueFlowIdempotent,valueFlowInlineAssembly,valueFlowLifetime,valueFlowMod,valueFlowMove,valueFlowNotNull,valueFlowNumber,valueFlowPointerAlias,valueFlowPointerAliasDeref,valueFlowRightShift,valueFlowSafeFunctionParameterValues,valueFlowSameExpression,valueFlowSizeof,valueFlowSizeofForwardDeclaredEnum,valueFlowSmartPointer,valueFlowString,valueFlowSubFunction,valueFlowSwitchVariable,valueFlowSymbolic,valueFlowSymbolicIdentity,valueFlowUninit,valueFlowUnknownFunctionReturn,valueFlowUnknownMixedOperators,valueFlowUnsigned,while]
isNotTokValue call:[isTokValue] noreturn:[isTokValue]
isNotLifetimeValue call:[isLifetimeValue] noreturn:[isLifetimeValue]
isNotUninitValue call:[isUninitValue] noreturn:[isUninitValue]
isNotPossible call:[isPossible] noreturn:[isPossible]
isNotKnown call:[isKnown] noreturn:[isKnown]
isNotInconclusive call:[isInconclusive] noreturn:[isInconclusive]
isNotImpossible call:[isImpossible] noreturn:[isImpossible]
testValueOfXKnown_ call:[assert_,isKnown,isSymbolicValue,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
testValueOfXKnown_ call:[assert_,expressionString,isKnown,isSymbolicValue,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
testValueOfXImpossible_ call:[assert_,isImpossible,isSymbolicValue,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
testValueOfXImpossible_ call:[assert_,expressionString,isImpossible,isSymbolicValue,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
testValueOfXInconclusive_ call:[assert_,isInconclusive,isSymbolicValue,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
testValueOfX_ call:[assert_,isImpossible,isIntValue,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
testValueOfX_ call:[assert_,expressionString,isImpossible,isSymbolicValue,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
testValueOfX_ call:[assert_,isFloatValue,isImpossible,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
getErrorPathForX_ call:[assert_,istr,linenr,next,str,tokenize,tokenizer,tokens,values] noreturn:[str]
testValueOfX_ call:[assert_,istr,linenr,next,simpleMatch,str,strlen,tokenize,tokenizer,tokens,values]
testLifetimeOfX_ call:[assert_,isLifetimeValue,istr,linenr,next,simpleMatch,str,strlen,tokenize,tokenizer,tokens,values]
testValueOfX_ call:[assert_,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
testValueOfX_ call:[assert_,isMovedValue,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
testConditionalValueOfX_ call:[assert_,isIntValue,istr,linenr,next,str,tokenize,tokenizer,tokens,values]
bailout global:[errout] call:[DUI,createTokens,files,istr,move,preprocess,simplifyTokens1,str,tokenizer,tokens1,tokens2]
tokenValues_ global:[errout] call:[assert_,findmatch,istr,str,tokenize,tokenizer,tokens,values]
tokenValues_ call:[remove_if,tokenValues_]
lifetimeValues_ global:[errout] call:[assert_,expressionString,findmatch,isLifetimeValue,istr,push_back,str,tokenize,tokenizer,tokens,values] noreturn:[push_back]
valueOfTok_ call:[Value,front,isTokValue,size,tokenValues_] noreturn:[Value]
removeSymbolic call:[mem_fn,remove_if]
removeImpossible call:[mem_fn,remove_if]
valueFlowNumber call:[assertEquals,assertEqualsDouble,assert_,fabs,todoAssertEquals,valueOfTok_]
valueFlowString call:[assertEquals,testValueOfX_]
valueFlowPointerAlias call:[assertEquals,empty,remove_if,testValueOfX_,tokenValues_]
valueFlowLifetime call:[assertEquals,c_str,complainMissingLib,front,lifetimeValues_,load,size,testLifetimeOfX_,while]
valueFlowArrayElement call:[assertEquals,testValueOfX_,todoAssertEquals,valueOfTok_]
valueFlowMove call:[assertEquals,testValueOfX_]
valueFlowCalculations call:[assertEquals,assert_,back,empty,front,isIntValue,isKnown,platform,size,testValueOfXImpossible_,testValueOfX_,tokenValues_,valueOfTok_]
valueFlowSizeof call:[assertEquals,back,size,sizeof,tokenValues_,while]
valueFlowErrorPath call:[assertEquals,getErrorPathForX_]
valueFlowBeforeCondition call:[assertEquals,testValueOfX_]
valueFlowBeforeConditionAssignIncDec global:[errout] call:[assertEquals,assertEqualsWithoutLineNumbers,bailout,str,testValueOfX_] noreturn:[assertEqualsWithoutLineNumbers]
valueFlowBeforeConditionAndAndOrOrGuard call:[assertEquals,testValueOfX_]
valueFlowBeforeConditionFunctionCall call:[assertEquals,c_str,string,testValueOfX_]
valueFlowBeforeConditionLoop call:[assertEquals,testValueOfX_]
valueFlowBeforeConditionTernaryOp global:[errout] call:[assertEquals,assertEqualsWithoutLineNumbers,bailout,str,testValueOfX_]
valueFlowBeforeConditionSizeof call:[assertEquals,testValueOfX_]
valueFlowBeforeConditionIfElse global:[errout] call:[assertEquals,assertEqualsWithoutLineNumbers,bailout,str,testValueOfX_]
valueFlowBeforeConditionGlobalVariables call:[assertEquals,testValueOfX_]
valueFlowBeforeConditionSwitch global:[errout] call:[assertEqualsWithoutLineNumbers,bailout,str] noreturn:[assertEqualsWithoutLineNumbers]
valueFlowBeforeConditionMacro global:[errout] call:[assertEqualsWithoutLineNumbers,bailout,str] noreturn:[assertEqualsWithoutLineNumbers]
valueFlowBeforeConditionGoto global:[errout] call:[assertEqualsWithoutLineNumbers,bailout,str] noreturn:[bailout]
valueFlowBeforeConditionForward call:[assertEquals,testValueOfX_]
valueFlowBeforeConditionConstructor call:[assertEquals,testValueOfX_]
valueFlowAfterAssign call:[assertEquals,getErrorPathForX_,size,testValueOfXImpossible_,testValueOfXInconclusive_,testValueOfXKnown_,testValueOfX_,todoAssertEquals,tokenValues_]
valueFlowAfterSwap call:[assertEquals,testValueOfXKnown_]
valueFlowAfterCondition call:[assertEquals,testValueOfXImpossible_,testValueOfXKnown_,testValueOfX_,todoAssertEquals]
valueFlowAfterConditionExpr call:[assertEquals,testValueOfXKnown_,testValueOfX_]
valueFlowAfterConditionSeveralNot call:[assertEquals,testValueOfX_]
valueFlowForwardCompoundAssign call:[assertEquals,getErrorPathForX_,testValueOfX_]
valueFlowForwardCorrelatedVariables call:[assertEquals,testValueOfXKnown_,testValueOfX_]
valueFlowForwardModifiedVariables call:[assertEquals,testValueOfXKnown_]
valueFlowForwardFunction call:[assertEquals,testValueOfX_]
valueFlowForwardTernary call:[assertEquals,testValueOfXImpossible_,testValueOfX_]
valueFlowForwardLambda call:[assertEquals,testValueOfX_,todoAssertEquals]
valueFlowForwardTryCatch call:[assertEquals,testValueOfXKnown_,testValueOfX_]
valueFlowBitAnd call:[assertEquals,testValueOfX_]
valueFlowForwardInconclusiveImpossible call:[assertEquals,testValueOfXKnown_]
valueFlowRightShift call:[assertEquals,testValueOfX_]
valueFlowFwdAnalysis call:[assertEquals,assert_,empty,front,isIntValue,isKnown,isPossible,removeSymbolic,size,todoAssertEquals,tokenValues_]
valueFlowSwitchVariable call:[assertEquals,assert_,isKnown,testConditionalValueOfX_,todoAssertEquals,valueOfTok_] noreturn:[todoAssertEquals]
valueFlowForLoop call:[assertEquals,assert_,begin,end,isKnown,isPossible,mem_fn,none_of,testValueOfX_,todoAssertEquals,tokenValues_,valueOfTok_]
valueFlowSubFunction call:[assertEquals,testValueOfX_]
valueFlowFunctionReturn call:[assertEquals,isKnown,testValueOfX_,valueOfTok_]
valueFlowFunctionDefaultParameter call:[testValueOfX_] noreturn:[testValueOfX_]
isNotKnownValues call:[isKnown,tokenValues_]
knownValue call:[assertEquals,assert_,isKnown,isNotKnownValues,isPossible,testValueOfX_,todoAssertEquals,valueOfTok_]
valueFlowSizeofForwardDeclaredEnum call:[valueOfTok_] noreturn:[valueOfTok_]
valueFlowGlobalVar call:[assertEquals,testValueOfX_]
valueFlowGlobalConstVar call:[assertEquals,testValueOfXKnown_,testValueOfX_]
valueFlowGlobalStaticVar call:[assertEquals,testValueOfX_]
valueFlowInlineAssembly call:[assertEquals,testValueOfX_]
valueFlowSameExpression call:[assertEquals,testValueOfX_]
valueFlowUninit call:[assertEquals,back,empty,front,isPossible,isUninitValue,remove_if,size,testValueOfXKnown_,todoAssertEquals,tokenValues_]
valueFlowConditionExpressions call:[assertEquals,empty,isKnown,testValueOfXImpossible_,testValueOfXKnown_,tokenValues_,valueOfTok_]
isPossibleContainerSizeValue call:[front,isContainerSizeValue,isPossible,mem_fn,remove_if,size,to_string] noreturn:[remove_if,to_string]
isImpossibleContainerSizeValue call:[front,isContainerSizeValue,isImpossible,mem_fn,remove_if,size,to_string] noreturn:[remove_if,to_string]
isInconclusiveContainerSizeValue call:[front,isContainerSizeValue,isInconclusive,mem_fn,remove_if,size,to_string] noreturn:[remove_if,to_string]
isKnownContainerSizeValue call:[front,isContainerSizeValue,isKnown,mem_fn,remove_if,size,to_string] noreturn:[remove_if,to_string]
valueFlowContainerSize call:[assertEquals,assert_,c_str,complainMissingLib,empty,front,isImpossibleContainerSizeValue,isInconclusiveContainerSizeValue,isKnownContainerSizeValue,isPossibleContainerSizeValue,load,size,testValueOfXImpossible_,testValueOfXKnown_,todoAssertEquals,tokenValues_,while]
valueFlowDynamicBufferSize call:[assertEquals,c_str,complainMissingLib,load,testValueOfX_,while]
valueFlowSafeFunctionParameterValues call:[assertEquals,assert_,back,c_str,complainMissingLib,front,isImpossible,load,removeSymbolic,remove_if,size,tokenValues_,while] noreturn:[isImpossible]
valueFlowUnknownFunctionReturn call:[assertEquals,back,c_str,complainMissingLib,front,insert,load,size,tokenValues_,while]
valueFlowPointerAliasDeref call:[assertEquals,testValueOfX_]
valueFlowCrashIncompleteCode call:[valueOfTok_] noreturn:[valueOfTok_]
valueFlowCrash call:[valueOfTok_] noreturn:[valueOfTok_]
valueFlowHang call:[valueOfTok_] noreturn:[valueOfTok_]
valueFlowCrashConstructorInitialization call:[valueOfTok_] noreturn:[valueOfTok_]
valueFlowUnknownMixedOperators call:[assertEquals,testValueOfXKnown_]
valueFlowIdempotent call:[assertEquals,testValueOfXKnown_]
valueFlowUnsigned call:[assertEquals,testValueOfXImpossible_]
valueFlowMod call:[assertEquals,testValueOfXImpossible_]
valueFlowNotNull call:[assertEquals,testValueOfXImpossible_]
valueFlowSymbolic call:[assertEquals,testValueOfXImpossible_,testValueOfXKnown_,testValueOfX_,todoAssertEquals]
valueFlowSymbolicIdentity call:[assertEquals,testValueOfXKnown_]
valueFlowSmartPointer call:[assertEquals,testValueOfX_]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
