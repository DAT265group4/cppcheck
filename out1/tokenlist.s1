isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
CWE
operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
FwdAnalysis
Result
Result
operator()
operator()
operator()
operator() call:[abs]
operator()
Value
equalValue call:[sameToken]
visitValue call:[f]
operator() call:[compare] noreturn:[compare]
operator() call:[bind,move,ref,visitValue] noreturn:[visitValue]
compareValue call:[assert,bind,isSymbolicValue,move,ref,sameToken,visitValue]
operator== call:[equalValue]
operator!=
equalTo call:[bind,ref,visitValue]
decreaseRange call:[visitValue] noreturn:[visitValue]
invertBound
invertRange call:[decreaseRange,invertBound] noreturn:[decreaseRange]
isIntValue
isTokValue
isFloatValue
isMovedValue
isUninitValue
isContainerSizeValue
isLifetimeValue
isBufferSizeValue
isIteratorValue
isIteratorStartValue
isIteratorEndValue
isSymbolicValue
isLocalLifetimeValue
isArgumentLifetimeValue
isSubFunctionLifetimeValue
isNonValue call:[isLifetimeValue,isMovedValue,isUninitValue] noreturn:[isLifetimeValue]
setKnown
isKnown
setPossible
isPossible
isImpossible
setImpossible
setInconclusive
isInconclusive
changeKnownToPossible call:[isKnown]
errorSeverity
LifetimeToken
LifetimeToken
LifetimeToken
setAddressOf
setInconclusive
isClass call:[setFlag] noreturn:[setFlag]
isFunction call:[setFlag] noreturn:[setFlag]
isVariable call:[setFlag] noreturn:[setFlag]
isAlias call:[setFlag] noreturn:[setFlag]
isSpecialization call:[setFlag] noreturn:[setFlag]
isPartialSpecialization call:[setFlag] noreturn:[setFlag]
isForwardDeclaration call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
getFlag call:[return] noreturn:[return]
setFlag
operator==
token
token
scope
name
fullName
nameToken
paramEnd
paramEnd
isClass call:[getFlag] noreturn:[getFlag]
isFunction call:[getFlag] noreturn:[getFlag]
isVariable call:[getFlag] noreturn:[getFlag]
isAlias call:[getFlag] noreturn:[getFlag]
isSpecialization call:[getFlag] noreturn:[getFlag]
isPartialSpecialization call:[getFlag] noreturn:[getFlag]
isForwardDeclaration call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isSameFamily call:[return]
ScopeInfo2
TokenImpl
str call:[update_property_info] noreturn:[update_property_info]
str
tokAt call:[tokAt]
linkAt call:[linkAt]
simpleMatch call:[simpleMatch] noreturn:[simpleMatch]
valueType
argumentType call:[Match,astParent] noreturn:[astParent]
tokType
tokType call:[setFlag] noreturn:[setFlag]
isKeyword
isName call:[getFlag] noreturn:[getFlag]
isNameOnly
isLiteral call:[getFlag] noreturn:[getFlag]
isNumber
isEnumerator
isOp call:[isAssignmentOp,isConstOp,return] noreturn:[return]
isConstOp call:[isArithmeticalOp,return] noreturn:[return]
isExtendedOp call:[isConstOp]
isArithmeticalOp
isComparisonOp
isAssignmentOp
isBoolean
isIncDecOp
isBinaryOp call:[astOperand1,astOperand2]
isUnaryOp call:[astOperand1,astOperand2]
flags
flags
isUnsigned call:[getFlag] noreturn:[getFlag]
isUnsigned call:[setFlag] noreturn:[setFlag]
isSigned call:[getFlag] noreturn:[getFlag]
isSigned call:[setFlag] noreturn:[setFlag]
isPointerCompare call:[getFlag] noreturn:[getFlag]
isPointerCompare call:[setFlag] noreturn:[setFlag]
isLong call:[getFlag] noreturn:[getFlag]
isLong call:[setFlag] noreturn:[setFlag]
isStandardType call:[getFlag] noreturn:[getFlag]
isStandardType call:[setFlag] noreturn:[setFlag]
isExpandedMacro call:[getFlag] noreturn:[getFlag]
isExpandedMacro call:[setFlag] noreturn:[setFlag]
isCast call:[getFlag] noreturn:[getFlag]
isCast call:[setFlag] noreturn:[setFlag]
isAttributeConstructor call:[getFlag] noreturn:[getFlag]
isAttributeConstructor call:[setFlag] noreturn:[setFlag]
isAttributeDestructor call:[getFlag] noreturn:[getFlag]
isAttributeDestructor call:[setFlag] noreturn:[setFlag]
isAttributeUnused call:[getFlag] noreturn:[getFlag]
isAttributeUnused call:[setFlag] noreturn:[setFlag]
isAttributeUsed call:[getFlag] noreturn:[getFlag]
isAttributeUsed call:[setFlag] noreturn:[setFlag]
isAttributePure call:[getFlag] noreturn:[getFlag]
isAttributePure call:[setFlag] noreturn:[setFlag]
isAttributeConst call:[getFlag] noreturn:[getFlag]
isAttributeConst call:[setFlag] noreturn:[setFlag]
isAttributeNoreturn call:[getFlag] noreturn:[getFlag]
isAttributeNoreturn call:[setFlag] noreturn:[setFlag]
isAttributeNothrow call:[getFlag] noreturn:[getFlag]
isAttributeNothrow call:[setFlag] noreturn:[setFlag]
isAttributePacked call:[getFlag] noreturn:[getFlag]
isAttributePacked call:[setFlag] noreturn:[setFlag]
isAttributeNodiscard call:[getFlag] noreturn:[getFlag]
isAttributeNodiscard call:[setFlag] noreturn:[setFlag]
isAttributeMaybeUnused call:[getFlag] noreturn:[getFlag]
isAttributeMaybeUnused call:[setFlag] noreturn:[setFlag]
setCppcheckAttribute call:[setCppcheckAttribute] noreturn:[setCppcheckAttribute]
getCppcheckAttribute call:[getCppcheckAttribute] noreturn:[getCppcheckAttribute]
hasCppcheckAttributes
isControlFlowKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[setFlag] noreturn:[setFlag]
isComplex call:[getFlag] noreturn:[getFlag]
isComplex call:[setFlag] noreturn:[setFlag]
isEnumType call:[getFlag] noreturn:[getFlag]
isEnumType call:[setFlag] noreturn:[setFlag]
isAtAddress call:[getFlag] noreturn:[getFlag]
isAtAddress call:[setFlag] noreturn:[setFlag]
isIncompleteVar call:[getFlag] noreturn:[getFlag]
isIncompleteVar call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
isExternC call:[getFlag] noreturn:[getFlag]
isExternC call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclComma call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclComma call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclEq call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclEq call:[setFlag] noreturn:[setFlag]
isImplicitInt call:[getFlag] noreturn:[getFlag]
isImplicitInt call:[setFlag] noreturn:[setFlag]
isInline call:[getFlag] noreturn:[getFlag]
isInline call:[setFlag] noreturn:[setFlag]
isTemplate call:[getFlag] noreturn:[getFlag]
isTemplate call:[setFlag] noreturn:[setFlag]
isBitfield
bits
templateSimplifierPointers
templateSimplifierPointer call:[insert] noreturn:[insert]
setBits
isUtf8 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf16 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf32 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isCChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isCMultiChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isTemplateArg call:[getFlag] noreturn:[getFlag]
isTemplateArg call:[setFlag] noreturn:[setFlag]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findmatch call:[findmatch]
findmatch call:[findmatch]
fileIndex
fileIndex
linenr
linenr
column
column
next
previous
varId
varId call:[isStandardType,tokType,update_property_info] noreturn:[isStandardType,update_property_info]
exprId
exprId
forDebug
forDebugVarId call:[forDebug]
forDebugExprId call:[forDebug]
forPrintOut call:[forDebug]
link call:[update_property_info] noreturn:[update_property_info]
link
scope
scope
function
variable call:[tokType] noreturn:[tokType]
variable
type
enumerator
enumerator call:[tokType] noreturn:[tokType]
progressValue
originalName global:[emptyString]
values
originalName call:[string] noreturn:[string]
getKnownIntValue call:[front]
removeValues call:[remove_if] noreturn:[remove_if]
index
next
previous
getFlag call:[return] noreturn:[return]
setFlag
astOperand1
astOperand1
astOperand2
astOperand2
astParent
astParent
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astTop
astTop
clearAst
clearValueFlow
astString call:[astString] noreturn:[astString]
setCpp11init
isCpp11init
setSettings
getSettings
isC
isCPP
front
front
back
back
getFiles
getFileName
Suppression
Suppression
Suppression
operator=
operator<
isLocal call:[empty,find_first_of]
isSameParameters
FileLocation
FileLocation
FileLocation
getinfo
setinfo
shortMessage
verboseMessage
symbolNames
ErrorLogger
ErrorLogger call:[close,is_open,plistFooter] noreturn:[close]
reportProgress
reportInfo call:[reportErr] noreturn:[reportErr]
plistFooter
Standards
setC
getC
setCPP
getCPP
Error
Error
Error
getAllocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
getDeallocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
allocId call:[getAllocDealloc]
deallocId call:[getAllocDealloc]
setalloc
setdealloc
setrealloc
setnoreturn
ismemory call:[return] noreturn:[return]
ismemory call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
Container
getAction call:[end,find]
getYield call:[end,find]
ArgumentChecks
IteratorInfo
MinSize
Function
isboolargbad call:[getarg]
isargformatstr call:[getarg]
isargstrz call:[getarg]
validarg global:[emptyString] call:[getarg]
isInt call:[isInt] noreturn:[isInt]
getArgIteratorInfo call:[getarg]
argminsizes call:[getarg]
markupExtensions
isexporter call:[end,find] noreturn:[end]
isexportedprefix call:[end,find,isPrefix,return] noreturn:[return]
isexportedsuffix call:[end,find,isSuffix,return] noreturn:[return]
isreflection call:[end,find] noreturn:[end]
reflectionArgument call:[end,find]
podtype call:[end,find,return]
PlatformType
operator== call:[return] noreturn:[return]
operator!=
platform_type call:[end,find,return]
platform_type call:[end,find,platform_type,return]
addPrefix call:[insert] noreturn:[insert]
addSuffix call:[insert] noreturn:[insert]
isPrefix call:[end,find,return] noreturn:[return]
isSuffix call:[end,find,return] noreturn:[return]
CodeBlock
setStart
setEnd
setOffset
addBlock call:[insert] noreturn:[insert]
start
end
offset
isBlock call:[end,find] noreturn:[end]
getAllocDealloc call:[end,find,return]
acceptFile call:[acceptFile] noreturn:[acceptFile]
min_value
max_value call:[return]
Platform
isIntValue call:[max_value,min_value] noreturn:[max_value]
isIntValue call:[max_value]
isLongValue call:[max_value,min_value] noreturn:[max_value]
isLongValue call:[max_value]
isLongLongValue call:[max_value]
isWindowsPlatform
platformString call:[platformString] noreturn:[platformString]
platformString
unsignedCharMax call:[max_value] noreturn:[max_value]
signedCharMax call:[max_value] noreturn:[max_value]
signedCharMin call:[min_value] noreturn:[min_value]
operator() call:[caseInsensitiveStringCompare]
FileSettings
cppcheckDefines
TimerResultsIntf
TimerResultsData
seconds
TimerResults
Rule
SafeChecks
clear
configurationExcluded call:[compare,length]
posix call:[begin,end,find] noreturn:[end]
terminate
terminated
TokenList call:[insert] noreturn:[insert]
TokenList call:[deallocateTokens] noreturn:[deallocateTokens]
getSourceFilePath global:[emptyString] call:[empty,getFiles]
deallocateTokens call:[clear,deleteTokens] noreturn:[clear]
determineCppC call:[getSourceFilePath,insert,isC,isCPP] noreturn:[insert,isCPP]
appendFileIfNew call:[determineCppC,push_back,sameFileName,size] noreturn:[determineCppC]
clangSetOrigFiles
deleteTokens call:[next]
addtoken call:[Token,addtoken,column,empty,fileIndex,find,insertToken,linenr,str,substr] noreturn:[fileIndex,insertToken,str]
addtoken call:[Token,column,empty,fileIndex,insertToken,linenr,str] noreturn:[fileIndex,insertToken,str]
addtoken call:[Token,column,empty,fileIndex,flags,insertToken,linenr,originalName,str] noreturn:[flags,insertToken,originalName]
addtoken call:[Token,column,empty,fileIndex,flags,insertToken,linenr,originalName,str] noreturn:[fileIndex,insertToken,originalName]
addtoken call:[Token,column,empty,fileIndex,flags,insertToken,linenr,originalName,str] noreturn:[fileIndex,insertToken,originalName]
copyTokens call:[Match,empty,fileIndex,flags,insertToken,linenr,link,next,pop,push,str,tokType,top,varId] noreturn:[linenr,pop,push]
insertTokens call:[Match,column,createMutualLinks,empty,fileIndex,flags,insertToken,linenr,next,originalName,pop,push,str,tokType,top,varId] noreturn:[pop,push]
createTokens call:[appendFileIfNew,createTokens,empty,move,tokens] noreturn:[empty]
createTokens call:[Token,assignProgressValues,cfront,clear,column,deleteToken,determineCppC,empty,fileIndex,getRelativePath,insertToken,isExpandedMacro,isdigit,linenr,size,str] noreturn:[assignProgressValues,clear,deleteToken,getRelativePath,insertToken,str]
calculateChecksum call:[empty,flags,front,next,originalName,str,tokType,varId]
AST_state
skipDecl call:[Match,link,linkAt,next,previous,simpleMatch,str] noreturn:[link,next]
iscast call:[Match,isName,isOp,isStandardType,link,linkAt,next,previous,simpleMatch,str,strAt,varId] noreturn:[next,previous]
findCppTypeInitPar call:[Match,isStandardType,link,next,previous,return,str] noreturn:[next]
iscpp11init call:[isCpp11init,iscpp11init_impl,setCpp11init] noreturn:[setCpp11init]
iscpp11init_impl call:[Match,findLambdaEndScope,isCpp11init,link,linkAt,next,previous,simpleMatch,str,tokAt] noreturn:[linkAt,previous]
isQualifier call:[Match,next] noreturn:[next]
compileUnaryOp global:[AST_MAX_DEPTH] call:[InternalError,astOperand1,empty,f,next,pop,push,top] noreturn:[InternalError,f,pop,push]
compileBinOp global:[AST_MAX_DEPTH] call:[Match,astOperand1,astOperand2,empty,f,next,pop,push,top] noreturn:[f,next,pop,push]
compileTerm call:[Match,astOperand1,compileBinOp,compileUnaryOp,empty,findCppTypeInitPar,findsimplematch,isLiteral,isName,iscast,iscpp11init,link,linkAt,next,pop,precedes,previous,push,simpleMatch,skipDecl,str,tokAt,top,while] noreturn:[compileBinOp,linkAt,next,pop,previous,tokAt,while]
compileScope call:[Match,compileBinOp,compileTerm,compileUnaryOp,empty,linkAt,next,str,top] noreturn:[compileBinOp,compileUnaryOp,next]
isPrefixUnary call:[Match,isPrefixUnary,iscast,linkAt,previous,str,strAt,tokType] noreturn:[iscast]
compilePrecedence2 call:[Match,astOperand1,astOperand2,compileBinOp,compileExpression,compileScope,compileUnaryOp,empty,findTypeEnd,isName,isPrefixUnary,iscast,iscpp11init,link,linkAt,next,originalName,previous,push,simpleMatch,size,state2,str,strAt,tokAt,tokType,top] noreturn:[astOperand2,compileBinOp,compileUnaryOp,findTypeEnd,next]
compilePrecedence3 call:[Match,astOperand1,astOperand2,compileBinOp,compileExpression,compilePrecedence2,compilePrecedence3,compileUnaryOp,innerState,isCast,isPrefixUnary,iscast,link,linkAt,next,push,simpleMatch,str,tokType] noreturn:[compileBinOp,compileExpression,compilePrecedence2,compileUnaryOp,link,next]
compilePointerToElem call:[compileBinOp,compilePrecedence3,simpleMatch] noreturn:[compileBinOp]
compileMulDiv call:[Match,astOperand1,compileBinOp,compilePointerToElem,isQualifier,next,str] noreturn:[compileBinOp,next]
compileAddSub call:[Match,astOperand1,compileBinOp,compileMulDiv] noreturn:[compileBinOp]
compileShift call:[Match,compileAddSub,compileBinOp] noreturn:[compileBinOp]
compileThreewayComp call:[compileBinOp,compileShift,str] noreturn:[compileBinOp]
compileRelComp call:[Match,compileBinOp,compileThreewayComp,link] noreturn:[compileBinOp]
compileEqComp call:[Match,compileBinOp,compileRelComp] noreturn:[compileBinOp]
compileAnd call:[Match,astOperand1,compileBinOp,compileEqComp,isQualifier,next,str] noreturn:[compileBinOp,next]
compileXor call:[compileAnd,compileBinOp,str] noreturn:[compileBinOp]
compileOr call:[compileBinOp,compileXor,str] noreturn:[compileBinOp]
compileLogicAnd call:[Match,astOperand1,compileBinOp,compileOr,isQualifier,next,str] noreturn:[compileBinOp]
compileLogicOr call:[compileBinOp,compileLogicAnd,str] noreturn:[compileBinOp]
compileAssignTernary call:[compileBinOp,compileLogicOr,isAssignmentOp,link,next,push,simpleMatch,str,strAt] noreturn:[compileBinOp,next,push]
compileComma call:[compileAssignTernary,compileBinOp,index,next,simpleMatch,str] noreturn:[compileBinOp,next]
compileExpression global:[AST_MAX_DEPTH] call:[InternalError,compileComma] noreturn:[InternalError,compileComma]
isLambdaCaptureList call:[Match,astOperand1,link,next,simpleMatch,str]
createAstAtTokenInner call:[astOperand1,createAstAtToken,isConstOp,isLambdaCaptureList,iscpp11init,link,next,precedes,str] noreturn:[astOperand1,createAstAtToken,link]
findAstTop call:[astOperand1,astOperand2,astParent,index,isName,isNumber,link,next,simpleMatch] noreturn:[astParent,link]
createAstAtToken call:[InternalError,Match,astOperand1,astOperand2,astParent,astTop,compileExpression,createAstAtTokenInner,empty,findAstTop,findsimplematch,isKeyword,isName,iscpp11init,link,linkAt,next,pop,previous,push,simpleMatch,size,skipDecl,state,state1,state2,state3,str,tokAt,top,varId] noreturn:[InternalError,astOperand1,astOperand2,astParent,link,linkAt,next,pop,previous,push,tokAt]
createAst call:[createAstAtToken,isCPP,next] noreturn:[createAstAtToken]
OnException call:[f,uncaught_exception] noreturn:[f]
validateAst call:[InternalError,Match,astOperand1,astOperand2,astParent,begin,clear,end,find,insert,isAssignmentOp,isComparisonOp,link,next,previous,printOut,simpleMatch,str,while] noreturn:[InternalError,clear,insert,printOut]
getOrigFile call:[at,fileIndex] noreturn:[at]
file call:[at,fileIndex] noreturn:[at]
fileLine call:[FileLocation,stringify] noreturn:[stringify]
validateToken call:[next]
simplifyPlatformTypes call:[Match,deleteNext,deleteThis,front,insertToken,isLong,isSigned,isUnsigned,next,originalName,platformString,platform_type,previous,str,strAt,tokAt,tokType] noreturn:[deleteThis,insertToken,isLong,isSigned,isUnsigned,originalName]
simplifyStdType call:[Match,deleteThis,front,insertToken,isComplex,isImplicitInt,isLong,isSigned,isUnsigned,next,previous,str] noreturn:[Match,deleteThis,isImplicitInt,previous]
isKeyword call:[end,find] noreturn:[end]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
