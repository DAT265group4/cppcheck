CWE
Check
Check call:[instances,remove] noreturn:[remove]
name
FileInfo
FileInfo
toString call:[string] noreturn:[string]
getFileInfo
loadFileInfoFromXml
analyseWholeProgram
reportError call:[CWE,reportError] noreturn:[reportError]
reportError call:[callstack,reportError] noreturn:[reportError]
reportError call:[CWE,reportError] noreturn:[reportError]
isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
FwdAnalysis
Result
Result
operator()
operator()
operator()
operator() call:[abs]
operator()
Value
equalValue call:[sameToken]
visitValue call:[f]
operator() call:[compare] noreturn:[compare]
operator() call:[bind,move,ref,visitValue] noreturn:[visitValue]
compareValue call:[assert,bind,isSymbolicValue,move,ref,sameToken,visitValue]
operator== call:[equalValue]
operator!=
equalTo call:[bind,ref,visitValue]
decreaseRange call:[visitValue] noreturn:[visitValue]
invertBound
invertRange call:[decreaseRange,invertBound] noreturn:[decreaseRange]
isIntValue
isTokValue
isFloatValue
isMovedValue
isUninitValue
isContainerSizeValue
isLifetimeValue
isBufferSizeValue
isIteratorValue
isIteratorStartValue
isIteratorEndValue
isSymbolicValue
isLocalLifetimeValue
isArgumentLifetimeValue
isSubFunctionLifetimeValue
isNonValue call:[isLifetimeValue,isMovedValue,isUninitValue] noreturn:[isLifetimeValue]
setKnown
isKnown
setPossible
isPossible
isImpossible
setImpossible
setInconclusive
isInconclusive
changeKnownToPossible call:[isKnown]
errorSeverity
LifetimeToken
LifetimeToken
LifetimeToken
setAddressOf
setInconclusive
isClass call:[setFlag] noreturn:[setFlag]
isFunction call:[setFlag] noreturn:[setFlag]
isVariable call:[setFlag] noreturn:[setFlag]
isAlias call:[setFlag] noreturn:[setFlag]
isSpecialization call:[setFlag] noreturn:[setFlag]
isPartialSpecialization call:[setFlag] noreturn:[setFlag]
isForwardDeclaration call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
getFlag call:[return] noreturn:[return]
setFlag
operator==
token
token
scope
name
fullName
nameToken
paramEnd
paramEnd
isClass call:[getFlag] noreturn:[getFlag]
isFunction call:[getFlag] noreturn:[getFlag]
isVariable call:[getFlag] noreturn:[getFlag]
isAlias call:[getFlag] noreturn:[getFlag]
isSpecialization call:[getFlag] noreturn:[getFlag]
isPartialSpecialization call:[getFlag] noreturn:[getFlag]
isForwardDeclaration call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isSameFamily call:[return]
ScopeInfo2
TokenImpl
str call:[update_property_info] noreturn:[update_property_info]
str
tokAt call:[tokAt]
linkAt call:[linkAt]
simpleMatch call:[simpleMatch] noreturn:[simpleMatch]
valueType
argumentType call:[Match,astParent] noreturn:[astParent]
tokType
tokType call:[setFlag] noreturn:[setFlag]
isKeyword
isName call:[getFlag] noreturn:[getFlag]
isNameOnly
isLiteral call:[getFlag] noreturn:[getFlag]
isNumber
isEnumerator
isOp call:[isAssignmentOp,isConstOp,return] noreturn:[return]
isConstOp call:[isArithmeticalOp,return] noreturn:[return]
isExtendedOp call:[isConstOp]
isArithmeticalOp
isComparisonOp
isAssignmentOp
isBoolean
isIncDecOp
isBinaryOp call:[astOperand1,astOperand2]
isUnaryOp call:[astOperand1,astOperand2]
flags
flags
isUnsigned call:[getFlag] noreturn:[getFlag]
isUnsigned call:[setFlag] noreturn:[setFlag]
isSigned call:[getFlag] noreturn:[getFlag]
isSigned call:[setFlag] noreturn:[setFlag]
isPointerCompare call:[getFlag] noreturn:[getFlag]
isPointerCompare call:[setFlag] noreturn:[setFlag]
isLong call:[getFlag] noreturn:[getFlag]
isLong call:[setFlag] noreturn:[setFlag]
isStandardType call:[getFlag] noreturn:[getFlag]
isStandardType call:[setFlag] noreturn:[setFlag]
isExpandedMacro call:[getFlag] noreturn:[getFlag]
isExpandedMacro call:[setFlag] noreturn:[setFlag]
isCast call:[getFlag] noreturn:[getFlag]
isCast call:[setFlag] noreturn:[setFlag]
isAttributeConstructor call:[getFlag] noreturn:[getFlag]
isAttributeConstructor call:[setFlag] noreturn:[setFlag]
isAttributeDestructor call:[getFlag] noreturn:[getFlag]
isAttributeDestructor call:[setFlag] noreturn:[setFlag]
isAttributeUnused call:[getFlag] noreturn:[getFlag]
isAttributeUnused call:[setFlag] noreturn:[setFlag]
isAttributeUsed call:[getFlag] noreturn:[getFlag]
isAttributeUsed call:[setFlag] noreturn:[setFlag]
isAttributePure call:[getFlag] noreturn:[getFlag]
isAttributePure call:[setFlag] noreturn:[setFlag]
isAttributeConst call:[getFlag] noreturn:[getFlag]
isAttributeConst call:[setFlag] noreturn:[setFlag]
isAttributeNoreturn call:[getFlag] noreturn:[getFlag]
isAttributeNoreturn call:[setFlag] noreturn:[setFlag]
isAttributeNothrow call:[getFlag] noreturn:[getFlag]
isAttributeNothrow call:[setFlag] noreturn:[setFlag]
isAttributePacked call:[getFlag] noreturn:[getFlag]
isAttributePacked call:[setFlag] noreturn:[setFlag]
isAttributeNodiscard call:[getFlag] noreturn:[getFlag]
isAttributeNodiscard call:[setFlag] noreturn:[setFlag]
isAttributeMaybeUnused call:[getFlag] noreturn:[getFlag]
isAttributeMaybeUnused call:[setFlag] noreturn:[setFlag]
setCppcheckAttribute call:[setCppcheckAttribute] noreturn:[setCppcheckAttribute]
getCppcheckAttribute call:[getCppcheckAttribute] noreturn:[getCppcheckAttribute]
hasCppcheckAttributes
isControlFlowKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[setFlag] noreturn:[setFlag]
isComplex call:[getFlag] noreturn:[getFlag]
isComplex call:[setFlag] noreturn:[setFlag]
isEnumType call:[getFlag] noreturn:[getFlag]
isEnumType call:[setFlag] noreturn:[setFlag]
isAtAddress call:[getFlag] noreturn:[getFlag]
isAtAddress call:[setFlag] noreturn:[setFlag]
isIncompleteVar call:[getFlag] noreturn:[getFlag]
isIncompleteVar call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
isExternC call:[getFlag] noreturn:[getFlag]
isExternC call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclComma call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclComma call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclEq call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclEq call:[setFlag] noreturn:[setFlag]
isImplicitInt call:[getFlag] noreturn:[getFlag]
isImplicitInt call:[setFlag] noreturn:[setFlag]
isInline call:[getFlag] noreturn:[getFlag]
isInline call:[setFlag] noreturn:[setFlag]
isTemplate call:[getFlag] noreturn:[getFlag]
isTemplate call:[setFlag] noreturn:[setFlag]
isBitfield
bits
templateSimplifierPointers
templateSimplifierPointer call:[insert] noreturn:[insert]
setBits
isUtf8 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf16 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf32 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isCChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isCMultiChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isTemplateArg call:[getFlag] noreturn:[getFlag]
isTemplateArg call:[setFlag] noreturn:[setFlag]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findmatch call:[findmatch]
findmatch call:[findmatch]
fileIndex
fileIndex
linenr
linenr
column
column
next
previous
varId
varId call:[isStandardType,tokType,update_property_info] noreturn:[isStandardType,update_property_info]
exprId
exprId
forDebug
forDebugVarId call:[forDebug]
forDebugExprId call:[forDebug]
forPrintOut call:[forDebug]
link call:[update_property_info] noreturn:[update_property_info]
link
scope
scope
function
variable call:[tokType] noreturn:[tokType]
variable
type
enumerator
enumerator call:[tokType] noreturn:[tokType]
progressValue
originalName global:[emptyString]
values
originalName call:[string] noreturn:[string]
getKnownIntValue call:[front]
removeValues call:[remove_if] noreturn:[remove_if]
index
next
previous
getFlag call:[return] noreturn:[return]
setFlag
astOperand1
astOperand1
astOperand2
astOperand2
astParent
astParent
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astTop
astTop
clearAst
clearValueFlow
astString call:[astString] noreturn:[astString]
setCpp11init
isCpp11init
setSettings
getSettings
isC
isCPP
front
front
back
back
getFiles
find call:[find] noreturn:[find]
end call:[end] noreturn:[end]
map
getVarId
setTimerResults
isC call:[isC] noreturn:[isC]
isCPP call:[isCPP] noreturn:[isCPP]
setPreprocessor
getPreprocessor
codeWithTemplates
setSettings call:[setSettings] noreturn:[setSettings]
getSymbolDatabase
varIdCount
tokens call:[front] noreturn:[front]
isMaxTime
getSettings
newVarId
CheckStl
CheckStl
runChecks call:[checkDereferenceInvalidIterator,checkDereferenceInvalidIterator2,checkFindInsert,checkMutexes,checkStl,erase,if_find,invalidContainer,isCPP,iterators,knownEmptyContainer,mismatchingContainerIterator,mismatchingContainers,missingComparison,negativeIndex,outOfBounds,outOfBoundsIndexExpression,redundantCondition,size,stlBoundaries,stlOutOfBounds,string_c_str,useStlAlgorithm,uselessCalls] noreturn:[size]
getErrorMessages call:[Value,c,checkFindInsertError,dereferenceErasedError,dereferenceInvalidIteratorError,globalLockGuardError,if_findError,invalidContainerError,invalidContainerLoopError,invalidIteratorError,iteratorsError,knownEmptyContainerError,localMutexError,mismatchingContainerExpressionError,mismatchingContainerIteratorError,mismatchingContainersError,missingComparisonError,negativeIndexError,outOfBoundsError,readingEmptyStlContainerError,redundantIfRemoveError,sameIteratorExpressionError,sizeError,stlBoundariesError,stlOutOfBoundsError,string_c_strError,string_c_strParam,string_c_strReturn,string_c_strThrowError,useStlAlgorithmError,uselessCallsEmptyError,uselessCallsRemoveError,uselessCallsReturnValueError,uselessCallsSubstrError,uselessCallsSwapError] noreturn:[localMutexError]
myName
classInfo
getFileName
Suppression
Suppression
Suppression
operator=
operator<
isLocal call:[empty,find_first_of]
isSameParameters
FileLocation
FileLocation
FileLocation
getinfo
setinfo
shortMessage
verboseMessage
symbolNames
ErrorLogger
ErrorLogger call:[close,is_open,plistFooter] noreturn:[close]
reportProgress
reportInfo call:[reportErr] noreturn:[reportErr]
plistFooter
Location
UnsafeUsage
CallBase
CallBase
NestedCall
CheckNullPointer
CheckNullPointer
runChecks call:[arithmetic,checkNullPointer,nullConstantDereference,nullPointer] noreturn:[nullConstantDereference]
nullPointerError call:[nullPointerError,setKnown,v] noreturn:[nullPointerError]
getErrorMessages call:[c,nullPointerError,pointerArithmeticError,redundantConditionWarning] noreturn:[redundantConditionWarning]
myName
classInfo
Standards
setC
getC
setCPP
getCPP
Error
Error
Error
getAllocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
getDeallocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
allocId call:[getAllocDealloc]
deallocId call:[getAllocDealloc]
setalloc
setdealloc
setrealloc
setnoreturn
ismemory call:[return] noreturn:[return]
ismemory call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
Container
getAction call:[end,find]
getYield call:[end,find]
ArgumentChecks
IteratorInfo
MinSize
Function
isboolargbad call:[getarg]
isargformatstr call:[getarg]
isargstrz call:[getarg]
validarg global:[emptyString] call:[getarg]
isInt call:[isInt] noreturn:[isInt]
getArgIteratorInfo call:[getarg]
argminsizes call:[getarg]
markupExtensions
isexporter call:[end,find] noreturn:[end]
isexportedprefix call:[end,find,isPrefix,return] noreturn:[return]
isexportedsuffix call:[end,find,isSuffix,return] noreturn:[return]
isreflection call:[end,find] noreturn:[end]
reflectionArgument call:[end,find]
podtype call:[end,find,return]
PlatformType
operator== call:[return] noreturn:[return]
operator!=
platform_type call:[end,find,return]
platform_type call:[end,find,platform_type,return]
addPrefix call:[insert] noreturn:[insert]
addSuffix call:[insert] noreturn:[insert]
isPrefix call:[end,find,return] noreturn:[return]
isSuffix call:[end,find,return] noreturn:[return]
CodeBlock
setStart
setEnd
setOffset
addBlock call:[insert] noreturn:[insert]
start
end
offset
isBlock call:[end,find] noreturn:[end]
getAllocDealloc call:[end,find,return]
PathAnalysis
forwardFind call:[forward,pred]
min_value
max_value call:[return]
Platform
isIntValue call:[max_value,min_value] noreturn:[max_value]
isIntValue call:[max_value]
isLongValue call:[max_value,min_value] noreturn:[max_value]
isLongValue call:[max_value]
isLongLongValue call:[max_value]
isWindowsPlatform
platformString call:[platformString] noreturn:[platformString]
platformString
unsignedCharMax call:[max_value] noreturn:[max_value]
signedCharMax call:[max_value] noreturn:[max_value]
signedCharMin call:[min_value] noreturn:[min_value]
operator() call:[caseInsensitiveStringCompare]
FileSettings
cppcheckDefines
TimerResultsIntf
TimerResultsData
seconds
TimerResults
Rule
SafeChecks
clear
configurationExcluded call:[compare,length]
posix call:[begin,end,find] noreturn:[end]
terminate
terminated
Dimension
BaseInfo
operator<
FriendInfo
Type call:[next,str,tokAt] noreturn:[next]
type global:[emptyString] call:[str]
isTypeAlias call:[str]
Enumerator
getFlag call:[return] noreturn:[return]
setFlag
Variable call:[evaluate] noreturn:[evaluate]
nameToken
typeStartToken
typeEndToken
name global:[emptyString] call:[str] noreturn:[str]
declarationId call:[varId] noreturn:[varId]
index
isPublic
isProtected
isPrivate
isGlobal
isNamespace
isArgument
isLocal call:[isExtern,return] noreturn:[isExtern]
isMutable call:[getFlag] noreturn:[getFlag]
isVolatile call:[getFlag] noreturn:[getFlag]
isStatic call:[getFlag] noreturn:[getFlag]
isExtern call:[getFlag] noreturn:[getFlag]
isConst call:[getFlag] noreturn:[getFlag]
isThrow
isClass call:[getFlag] noreturn:[getFlag]
isArray call:[getFlag] noreturn:[getFlag]
isPointer call:[getFlag] noreturn:[getFlag]
isPointerToArray call:[getFlag,isPointer] noreturn:[getFlag]
isArrayOrPointer call:[getFlag] noreturn:[getFlag]
isReference call:[getFlag] noreturn:[getFlag]
isRValueReference call:[getFlag] noreturn:[getFlag]
hasDefault call:[getFlag] noreturn:[getFlag]
isInit call:[getFlag] noreturn:[getFlag]
type
typeScope
scope
dimensions
dimension
dimensionKnown
isStlType call:[getFlag] noreturn:[getFlag]
isStlStringType call:[getFlag] noreturn:[getFlag]
isSmartPointer call:[getFlag] noreturn:[getFlag]
isStlType call:[isStlType,strAt] noreturn:[strAt]
isStlType call:[end,find,isStlType,strAt] noreturn:[end]
isFloatingType call:[getFlag] noreturn:[getFlag]
isEnumType call:[isEnumType,type] noreturn:[isEnumType]
isMaybeUnused call:[getFlag] noreturn:[getFlag]
valueType
accessControl
type
getFlag call:[return] noreturn:[return]
setFlag
name call:[str] noreturn:[str]
argCount call:[size] noreturn:[size]
minArgCount call:[size]
initializedArgCount
isLambda
isConstructor
isDestructor
isAttributeConstructor call:[isAttributeConstructor] noreturn:[isAttributeConstructor]
isAttributeDestructor call:[isAttributeDestructor] noreturn:[isAttributeDestructor]
isAttributePure call:[isAttributePure] noreturn:[isAttributePure]
isAttributeConst call:[isAttributeConst] noreturn:[isAttributeConst]
isAttributeNoreturn call:[isAttributeNoreturn] noreturn:[isAttributeNoreturn]
isAttributeNothrow call:[isAttributeNothrow] noreturn:[isAttributeNothrow]
isAttributeNodiscard call:[isAttributeNodiscard] noreturn:[isAttributeNodiscard]
hasBody call:[getFlag] noreturn:[getFlag]
isInline call:[getFlag] noreturn:[getFlag]
isConst call:[getFlag] noreturn:[getFlag]
hasVirtualSpecifier call:[getFlag] noreturn:[getFlag]
isPure call:[getFlag] noreturn:[getFlag]
isStatic call:[getFlag] noreturn:[getFlag]
isStaticLocal call:[getFlag] noreturn:[getFlag]
isExtern call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isExplicit call:[getFlag] noreturn:[getFlag]
isDefault call:[getFlag] noreturn:[getFlag]
isDelete call:[getFlag] noreturn:[getFlag]
isNoExcept call:[getFlag] noreturn:[getFlag]
isThrow call:[getFlag] noreturn:[getFlag]
hasOverrideSpecifier call:[getFlag] noreturn:[getFlag]
hasFinalSpecifier call:[getFlag] noreturn:[getFlag]
isOperator call:[getFlag] noreturn:[getFlag]
hasLvalRefQualifier call:[getFlag] noreturn:[getFlag]
hasRvalRefQualifier call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isVolatile call:[getFlag] noreturn:[getFlag]
hasTrailingReturnType call:[getFlag] noreturn:[getFlag]
hasBody call:[setFlag] noreturn:[setFlag]
isInlineKeyword call:[getFlag] noreturn:[getFlag]
isEscapeFunction call:[getFlag] noreturn:[getFlag]
isEscapeFunction call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
returnDefEnd call:[findmatch,hasTrailingReturnType] noreturn:[findmatch]
isInline call:[setFlag] noreturn:[setFlag]
isConst call:[setFlag] noreturn:[setFlag]
hasVirtualSpecifier call:[setFlag] noreturn:[setFlag]
isPure call:[setFlag] noreturn:[setFlag]
isStatic call:[setFlag] noreturn:[setFlag]
isStaticLocal call:[setFlag] noreturn:[setFlag]
isExtern call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
isExplicit call:[setFlag] noreturn:[setFlag]
isDefault call:[setFlag] noreturn:[setFlag]
isDelete call:[setFlag] noreturn:[setFlag]
isNoExcept call:[setFlag] noreturn:[setFlag]
isThrow call:[setFlag] noreturn:[setFlag]
isOperator call:[setFlag] noreturn:[setFlag]
hasLvalRefQualifier call:[setFlag] noreturn:[setFlag]
hasRvalRefQualifier call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isVolatile call:[setFlag] noreturn:[setFlag]
hasTrailingReturnType call:[setFlag] noreturn:[setFlag]
isInlineKeyword call:[setFlag] noreturn:[setFlag]
setBodyStartEnd call:[link,push_back] noreturn:[push_back]
isAnonymous call:[compare,isdigit,size] noreturn:[isdigit]
findEnumerator call:[str]
isNestedIn
nestedInFunction
isClassOrStruct call:[return] noreturn:[return]
isClassOrStructOrUnion call:[return] noreturn:[return]
isExecutable
isLoopScope
isLocal call:[return] noreturn:[return]
findRecordInNestedList call:[findRecordInNestedList]
findType call:[findType]
addFunction call:[back,insert,make_pair,push_back,str] noreturn:[insert]
ValueType
ValueType
ValueType
ValueType
isPrimitive call:[return] noreturn:[return]
isIntegral call:[return] noreturn:[return]
isFloat call:[return] noreturn:[return]
isEnum
findType call:[findType]
findScope call:[findScope]
isVarId call:[size] noreturn:[size]
getVariableFromVarId call:[at] noreturn:[at]
variableList
isElementAccessYield call:[contains] noreturn:[contains]
containerYieldsElement call:[Match,getYield,isElementAccessYield,strAt]
getContainerIndex call:[Match,astOperand2,getYield,isElementAccessYield,simpleMatch,strAt,tokAt] noreturn:[astOperand2]
getContainerFromSize call:[Match,astOperand1,getYield,strAt,tokAt] noreturn:[astOperand1]
outOfBounds call:[astIsIterator,astParent,astParentSkipParens,containerYieldsElement,empty,errorSeverity,exprId,expressionString,findValue,front,getContainerFromSize,getContainerIndex,getLibraryContainer,getSymbolDatabase,hasKnownIntValue,hasKnownValue,isContainerSizeValue,isEnabled,isImpossible,isInconclusive,isOutOfBounds,isSymbolicValue,next,outOfBoundsError,simpleMatch,values] noreturn:[astParent,exprId,expressionString,outOfBoundsError]
indexValueString call:[isIteratorEndValue,isIteratorStartValue,isSymbolicValue,toString] noreturn:[toString]
outOfBoundsError global:[CWE398] call:[eitherTheConditionIsRedundant,empty,end,errorSeverity,expressionString,getErrorPath,indexValueString,isInconclusive,isPossible,reportError,size,splice,toString] noreturn:[getErrorPath,indexValueString,reportError,splice]
isContainerSize call:[Match,astOperand1,getYield,isCPP,isSameExpression,previous,simpleMatch,str,valueType]
isContainerSizeGE call:[astOperand1,astOperand2,front,getValueGE,hasKnownIntValue,isContainerSize,str,values] noreturn:[astOperand1,astOperand2,getValueGE]
outOfBoundsIndexExpression call:[Match,astOperand2,getSymbolDatabase,isContainerSizeGE,isName,next,outOfBoundsIndexExpressionError,valueType] noreturn:[outOfBoundsIndexExpressionError]
outOfBoundsIndexExpressionError global:[CWE398] call:[expressionString,reportError,str,string] noreturn:[reportError]
invalidIteratorError global:[CWE664] call:[reportError] noreturn:[reportError]
iteratorsError global:[CWE664] call:[reportError] noreturn:[reportError]
iteratorsError global:[CWE664] call:[reportError] noreturn:[reportError]
iteratorsError global:[CWE664] call:[reportError] noreturn:[reportError]
dereferenceErasedError global:[CWE664] call:[reportError] noreturn:[reportError]
skipMembers call:[Match,tokAt] noreturn:[tokAt]
isIterator call:[Match,argCount,getFunction,isLocal,nameToken,return,str,type,typeEndToken,valueType] noreturn:[return]
getContainerName call:[Match,ret,str,strAt,string,tokAt] noreturn:[string]
isVector call:[simpleMatch,typeStartToken,variable] noreturn:[simpleMatch]
iterators call:[Match,declarationId,dereferenceErasedError,findsimplematch,getContainerName,getSymbolDatabase,invalidIteratorError,isEnabled,isIterator,isReference,isVector,iteratorsError,link,linkAt,nameToken,next,nextArgument,previous,scope,simpleMatch,skipMembers,str,strAt,tokAt,typeStartToken,varId,variable,variableList] noreturn:[findsimplematch,invalidIteratorError,iteratorsError,link,nameToken,next,scope,tokAt]
mismatchingContainerIteratorError global:[CWE664] call:[container,expressionString,iter,reportError,string] noreturn:[reportError]
mismatchingContainersError global:[CWE664] call:[expr1,expr2,expressionString,reportError,string] noreturn:[reportError]
mismatchingContainerExpressionError global:[CWE664] call:[expr1,expr2,expressionString,reportError,string] noreturn:[reportError]
sameIteratorExpressionError global:[CWE664] call:[reportError] noreturn:[reportError]
getIteratorExpression call:[Match,astOperand1,astOperand2,getIteratorExpression,isName,isUnaryOp,linkAt,next,previous,simpleMatch,str] noreturn:[astOperand1,astOperand2]
getAddressContainer call:[astOperand1,simpleMatch] noreturn:[astOperand1]
isSameIteratorContainerExpression call:[getAddressContainer,isSameExpression] noreturn:[isSameExpression]
getLifetimeIteratorValue call:[begin,end,find_if,front,getLifetimeObjValues,size] noreturn:[front]
checkIteratorPair call:[Match,astIsContainer,astIsFloat,astIsIntegral,astParent,expressionString,getIteratorExpression,getLifetimeIteratorValue,isSameIteratorContainerExpression,iteratorsError,mismatchingContainerExpressionError,mismatchingContainersError] noreturn:[iteratorsError,mismatchingContainersError]
mismatchingContainers global:[pattern2] call:[Match,astOperand1,astOperand2,c_str,checkIteratorPair,getArgIteratorInfo,getArguments,getSymbolDatabase,isSameExpression,isStlStringType,mismatchingContainersError,nameToken,next,push_back,sameIteratorExpressionError,size,strAt,tokAt,variableList] noreturn:[mismatchingContainersError,push_back,sameIteratorExpressionError]
mismatchingContainerIterator call:[Match,astIsContainer,astIsIterator,astIsLHS,astParent,back,front,getAction,getArguments,getLifetimeIteratorValue,getSymbolDatabase,isSameIteratorContainerExpression,mismatchingContainerIteratorError,next,size,strAt,valueType] noreturn:[front,mismatchingContainerIteratorError]
getInvalidMethod call:[Match,astIsLHS,astParent,getAction,next,str,valueType] noreturn:[astParent,next]
add call:[add] noreturn:[add]
add call:[exprId,insert,make_pair] noreturn:[insert]
invalidTokens call:[back_inserter,begin,end,transform]
invalidatesContainer call:[Match,astIsContainer,back_inserter,begin,copy_if,emplace_front,end,exprDependsOnThis,expressionString,find,function,getArgumentPos,getArguments,getInvalidMethod,invalidTokens,isArgument,isGlobal,isLocal,isReference,isStatic,make_pair,next,push_back,push_front,size,str,variable] noreturn:[push_back]
analyze call:[Match,add,empty,invalidatesContainer,next] noreturn:[add]
isVariableDecl call:[Match,declEndToken,nameToken,next,variable]
getLoopContainer call:[astOperand2,next,simpleMatch] noreturn:[astOperand2]
invalidContainer call:[Match,analyze,astIsContainer,astIsLHS,astIsRHS,astOperand1,astParent,begin,count,declarationId,end,exprId,forwardFind,getLifetimeVariable,getLoopContainer,getSymbolDatabase,insert,invalidContainerError,invalidContainerLoopError,invalidContainerReferenceError,invalidatesContainer,isArgument,isLocalLifetimeValue,isRValueReference,isReference,isReturnScope,isVariableDecl,link,nameToken,next,nextAfterAstRightmostLeaf,reaches,scope,values,varId,variable] noreturn:[insert,invalidContainerError,invalidContainerReferenceError,next]
invalidContainerLoopError global:[CWE664] call:[emplace_back,remove_if,reportError,str] noreturn:[reportError]
invalidContainerError global:[CWE664] call:[begin,emplace_back,end,insert,isInconclusive,lifetimeMessage,reportError] noreturn:[insert,reportError]
invalidContainerReferenceError global:[CWE664] call:[emplace_back,expressionString,reportError] noreturn:[reportError]
stlOutOfBounds call:[Match,astOperand1,astOperand2,emplace_back,getSymbolDatabase,getYield,hasKnownValue,isComparisonOp,isLoopScope,linkAt,next,simpleMatch,stlOutOfBoundsError,str,strAt,tokAt,valueType,varId,visitAstNodes] noreturn:[astOperand1,astOperand2,emplace_back,next,stlOutOfBoundsError]
stlOutOfBoundsError global:[CWE788] call:[reportError] noreturn:[reportError]
negativeIndex call:[Match,astOperand2,detectContainer,getSymbolDatabase,getValueLE,nameToken,negativeIndexError,next,typeStartToken,variable,wrongData] noreturn:[negativeIndexError]
negativeIndexError global:[CWE786] call:[eitherTheConditionIsRedundant,errorSeverity,getErrorPath,isInconclusive,reportError,str] noreturn:[reportError]
erase call:[Match,eraseCheckLoopVar,getSymbolDatabase,isName,linkAt,previous,simpleMatch,tokAt,variable] noreturn:[eraseCheckLoopVar,previous]
eraseCheckLoopVar call:[Match,astParent,declarationId,dereferenceErasedError,isIterator,isVector,link,linkAt,nameToken,next,simpleMatch,str,tokAt,varId] noreturn:[dereferenceErasedError,linkAt]
stlBoundaries call:[Match,declarationId,detectContainer,getSymbolDatabase,isExecutable,nameToken,next,scope,stlBoundariesError,typeStartToken,variableList] noreturn:[stlBoundariesError]
stlBoundariesError global:[CWE664] call:[reportError] noreturn:[reportError]
if_findCompare call:[astOperand1,astOperand2,astParent,astSibling,getKnownIntValue,hasKnownIntValue,if_findCompare,isArithmeticalOp,isAssignmentOp,isComparisonOp,isNumber,return,str] noreturn:[if_findCompare,return]
if_find call:[Match,astOperand2,astParent,detectContainer,findsimplematch,getAction,getSymbolDatabase,getYield,if_findCompare,if_findError,isArrayOrPointer,isEnabled,linkAt,next,nextTemplateArgument,simpleMatch,str,tokAt,typeEndToken,typeStartToken,variable] noreturn:[astOperand2,detectContainer,if_findError,linkAt,nextTemplateArgument,tokAt]
if_findError global:[CWE398,CWE597] call:[reportError] noreturn:[reportError]
isMapFind call:[Match,astIsContainer,astOperand1,astOperand2,simpleMatch,valueType]
skipLocalVars call:[Match,astOperand1,astTop,findsimplematch,nameToken,next,nextAfterAstRightmostLeaf,previous,scope,simpleMatch,skipLocalVars,variable] noreturn:[skipLocalVars]
findInsertValue call:[Match,astIsIterator,astOperand1,astOperand2,astTop,isSameExpression,simpleMatch,skipLocalVars,tokAt] noreturn:[astOperand2]
checkFindInsert call:[Match,astOperand1,astOperand2,checkFindInsertError,findInsertValue,getSymbolDatabase,isEnabled,isIntegral,isMapFind,isSameExpression,link,next,simpleMatch,tie,tokAt,valueType] noreturn:[checkFindInsertError]
checkFindInsertError global:[CWE398] call:[astOperand1,astOperand2,astParent,expressionString,reportError,simpleMatch] noreturn:[reportError]
isCpp03ContainerSizeSlow call:[isStlType,variable] noreturn:[isStlType]
size call:[Match,getSymbolDatabase,isArithmeticalOp,isCpp03ContainerSizeSlow,isEnabled,next,previous,sizeError,str,strAt,tokAt,tokType] noreturn:[sizeError,tokAt]
sizeError global:[CWE398] call:[reportError,str,string] noreturn:[reportError]
redundantCondition call:[Match,getSymbolDatabase,isEnabled,redundantIfRemoveError,str,tokAt] noreturn:[redundantIfRemoveError]
redundantIfRemoveError global:[CWE398] call:[reportError] noreturn:[reportError]
missingComparison call:[Match,astParent,astSibling,getSymbolDatabase,isEnabled,iteratorId,linkAt,missingComparisonError,next,simpleMatch,str,strAt,tokAt,varId] noreturn:[missingComparisonError]
missingComparisonError global:[CWE834] call:[linenr,reportError,str] noreturn:[linenr,reportError]
isLocal call:[isLocal,isStatic,variable] noreturn:[isLocal]
string_c_str call:[Match,end,equal_range,find,function,getSymbolDatabase,insert,isConst,isEnabled,isLocal,isPointer,isReference,isStlStringType,isStlType,link,linkAt,make_pair,nameToken,next,nextArgument,previous,simpleMatch,str,strAt,string_c_strError,string_c_strParam,string_c_strReturn,string_c_strThrowError,tokAt,variable] noreturn:[insert,isLocal,link,nextArgument,previous,string_c_strError,string_c_strParam,string_c_strReturn,string_c_strThrowError,tokAt]
string_c_strThrowError call:[reportError] noreturn:[reportError]
string_c_strError global:[CWE664] call:[reportError] noreturn:[reportError]
string_c_strReturn global:[CWE704] call:[reportError] noreturn:[reportError]
string_c_strParam global:[CWE704] call:[reportError,str] noreturn:[reportError]
uselessCalls call:[Match,astParent,getSymbolDatabase,isEnabled,isStlStringType,isStlType,linkAt,next,nextArgument,previous,simpleMatch,str,strAt,tokAt,uselessCallsEmptyError,uselessCallsRemoveError,uselessCallsReturnValueError,uselessCallsSubstrError,uselessCallsSwapError,varId,variable] noreturn:[uselessCallsEmptyError,uselessCallsRemoveError,uselessCallsReturnValueError,uselessCallsSubstrError,uselessCallsSwapError]
uselessCallsReturnValueError global:[CWE628] call:[reportError,str] noreturn:[reportError]
uselessCallsSwapError global:[CWE628] call:[reportError] noreturn:[reportError]
uselessCallsSubstrError global:[CWE398] call:[reportError] noreturn:[reportError]
uselessCallsEmptyError global:[CWE398] call:[reportError] noreturn:[reportError]
uselessCallsRemoveError global:[CWE762] call:[reportError] noreturn:[reportError]
checkDereferenceInvalidIterator call:[dereferenceInvalidIteratorError,findmatch,findsimplematch,getSymbolDatabase,isEnabled,isLoopScope,link,next,strAt,tokAt,varId] noreturn:[dereferenceInvalidIteratorError,findmatch,tokAt]
checkDereferenceInvalidIterator2 call:[Match,astIsIntegral,astParent,astSibling,back_inserter,begin,copy_if,dereferenceInvalidIteratorError,end,expressionString,find_if,front,getLifetimeObjValue,hasKnownIntValue,isContainerSizeValue,isEnabled,isImpossible,isInconclusive,isIteratorEndValue,isIteratorStartValue,isIteratorValue,isPointerDeRef,link,next,outOfBoundsError,tokens,values] noreturn:[astParent,astSibling,dereferenceInvalidIteratorError,isContainerSizeValue,outOfBoundsError]
dereferenceInvalidIteratorError global:[CWE825] call:[eitherTheConditionIsRedundant,empty,errmsgcond,expressionString,getErrorPath,isEnabled,isInconclusive,isKnown,reportError,string] noreturn:[reportError]
dereferenceInvalidIteratorError global:[CWE825] call:[reportError] noreturn:[reportError]
readingEmptyStlContainer2 call:[Match,errorSeverity,getContainerSizeValue,getSymbolDatabase,getYield,isEnabled,isInconclusive,isName,next,readingEmptyStlContainerError,strAt,valueType] noreturn:[readingEmptyStlContainerError]
readingEmptyStlContainerError global:[CWE398] call:[eitherTheConditionIsRedundant,errorSeverity,getErrorPath,reportError,str,string] noreturn:[reportError]
useStlAlgorithmError global:[CWE398] call:[reportError] noreturn:[reportError]
isEarlyExit call:[findmatch,findsimplematch,link,next,str]
singleStatement call:[findsimplematch,link,next,simpleMatch,str]
singleAssignInScope call:[Match,astOperand1,findmatch,isVariableChanged,next,singleStatement,tokAt,varId]
singleMemberCallInScope call:[Match,astOperand1,findmatch,isVariableChanged,link,linkAt,next,simpleMatch,str,tokAt,varId]
singleIncrementInScope call:[Match,next,str,tokAt,varId] noreturn:[tokAt]
singleConditionalInScope call:[findmatch,isVariableChanged,link,linkAt,next,simpleMatch,str]
addByOne call:[Match,getValue,hasKnownIntValue,tokAt]
accumulateBoolLiteral call:[Match,hasKnownIntValue,tokAt]
accumulateBool call:[Match,simpleMatch]
hasVarIds call:[astOperand1,astOperand2,varId]
flipMinMax
minmaxCompare call:[Match,astOperand1,flipMinMax,hasVarIds,varId] noreturn:[flipMinMax]
useStlAlgorithm call:[Match,accumulateBool,accumulateBoolLiteral,addByOne,astOperand1,astOperand2,findmatch,getSymbolDatabase,hasVarIds,isEarlyExit,isEnabled,link,minmaxCompare,next,previous,simpleMatch,singleAssignInScope,singleConditionalInScope,singleIncrementInScope,singleMemberCallInScope,str,tokAt,useStlAlgorithmError,varId] noreturn:[minmaxCompare,useStlAlgorithmError]
knownEmptyContainerError global:[CWE398] call:[astIsIterator,expressionString,reportError,string] noreturn:[reportError]
isKnownEmptyContainer call:[isContainerSizeValue,isKnown,values]
knownEmptyContainer call:[Match,astOperand2,empty,getArgIteratorInfo,getArguments,getSymbolDatabase,isEnabled,isKnownEmptyContainer,knownEmptyContainerError,link,next,simpleMatch,size,str] noreturn:[knownEmptyContainerError]
isMutex call:[Match,nameToken,typeDecl] noreturn:[Match]
isLockGuard call:[Match,nameToken,typeDecl] noreturn:[Match]
isLocalMutex call:[isLockGuard,isRValueReference,isReference,isStatic,scope]
globalLockGuardError global:[CWE833] call:[reportError] noreturn:[reportError]
localMutexError global:[CWE667] call:[reportError] noreturn:[reportError]
checkMutexes call:[Match,declarationId,getSymbolDatabase,globalLockGuardError,insert,isGlobal,isLocalMutex,isLockGuard,isMutex,isStatic,localMutexError,next,scope,tokAt,variable] noreturn:[globalLockGuardError,localMutexError]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
