isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
CWE
operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
FwdAnalysis
Result
Result
operator()
operator()
operator()
operator() call:[abs]
operator()
Value
equalValue call:[sameToken]
visitValue call:[f]
operator() call:[compare] noreturn:[compare]
operator() call:[bind,move,ref,visitValue] noreturn:[visitValue]
compareValue call:[assert,bind,isSymbolicValue,move,ref,sameToken,visitValue]
operator== call:[equalValue]
operator!=
equalTo call:[bind,ref,visitValue]
decreaseRange call:[visitValue] noreturn:[visitValue]
invertBound
invertRange call:[decreaseRange,invertBound] noreturn:[decreaseRange]
isIntValue
isTokValue
isFloatValue
isMovedValue
isUninitValue
isContainerSizeValue
isLifetimeValue
isBufferSizeValue
isIteratorValue
isIteratorStartValue
isIteratorEndValue
isSymbolicValue
isLocalLifetimeValue
isArgumentLifetimeValue
isSubFunctionLifetimeValue
isNonValue call:[isLifetimeValue,isMovedValue,isUninitValue] noreturn:[isLifetimeValue]
setKnown
isKnown
setPossible
isPossible
isImpossible
setImpossible
setInconclusive
isInconclusive
changeKnownToPossible call:[isKnown]
errorSeverity
LifetimeToken
LifetimeToken
LifetimeToken
setAddressOf
setInconclusive
isClass call:[setFlag] noreturn:[setFlag]
isFunction call:[setFlag] noreturn:[setFlag]
isVariable call:[setFlag] noreturn:[setFlag]
isAlias call:[setFlag] noreturn:[setFlag]
isSpecialization call:[setFlag] noreturn:[setFlag]
isPartialSpecialization call:[setFlag] noreturn:[setFlag]
isForwardDeclaration call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
getFlag call:[return] noreturn:[return]
setFlag
operator==
token
token
scope
name
fullName
nameToken
paramEnd
paramEnd
isClass call:[getFlag] noreturn:[getFlag]
isFunction call:[getFlag] noreturn:[getFlag]
isVariable call:[getFlag] noreturn:[getFlag]
isAlias call:[getFlag] noreturn:[getFlag]
isSpecialization call:[getFlag] noreturn:[getFlag]
isPartialSpecialization call:[getFlag] noreturn:[getFlag]
isForwardDeclaration call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isSameFamily call:[return]
ScopeInfo2
TokenImpl
str call:[update_property_info] noreturn:[update_property_info]
str
tokAt call:[tokAt]
linkAt call:[linkAt]
simpleMatch call:[simpleMatch] noreturn:[simpleMatch]
valueType
argumentType call:[Match,astParent] noreturn:[astParent]
tokType
tokType call:[setFlag] noreturn:[setFlag]
isKeyword
isName call:[getFlag] noreturn:[getFlag]
isNameOnly
isLiteral call:[getFlag] noreturn:[getFlag]
isNumber
isEnumerator
isOp call:[isAssignmentOp,isConstOp,return] noreturn:[return]
isConstOp call:[isArithmeticalOp,return] noreturn:[return]
isExtendedOp call:[isConstOp]
isArithmeticalOp
isComparisonOp
isAssignmentOp
isBoolean
isIncDecOp
isBinaryOp call:[astOperand1,astOperand2]
isUnaryOp call:[astOperand1,astOperand2]
flags
flags
isUnsigned call:[getFlag] noreturn:[getFlag]
isUnsigned call:[setFlag] noreturn:[setFlag]
isSigned call:[getFlag] noreturn:[getFlag]
isSigned call:[setFlag] noreturn:[setFlag]
isPointerCompare call:[getFlag] noreturn:[getFlag]
isPointerCompare call:[setFlag] noreturn:[setFlag]
isLong call:[getFlag] noreturn:[getFlag]
isLong call:[setFlag] noreturn:[setFlag]
isStandardType call:[getFlag] noreturn:[getFlag]
isStandardType call:[setFlag] noreturn:[setFlag]
isExpandedMacro call:[getFlag] noreturn:[getFlag]
isExpandedMacro call:[setFlag] noreturn:[setFlag]
isCast call:[getFlag] noreturn:[getFlag]
isCast call:[setFlag] noreturn:[setFlag]
isAttributeConstructor call:[getFlag] noreturn:[getFlag]
isAttributeConstructor call:[setFlag] noreturn:[setFlag]
isAttributeDestructor call:[getFlag] noreturn:[getFlag]
isAttributeDestructor call:[setFlag] noreturn:[setFlag]
isAttributeUnused call:[getFlag] noreturn:[getFlag]
isAttributeUnused call:[setFlag] noreturn:[setFlag]
isAttributeUsed call:[getFlag] noreturn:[getFlag]
isAttributeUsed call:[setFlag] noreturn:[setFlag]
isAttributePure call:[getFlag] noreturn:[getFlag]
isAttributePure call:[setFlag] noreturn:[setFlag]
isAttributeConst call:[getFlag] noreturn:[getFlag]
isAttributeConst call:[setFlag] noreturn:[setFlag]
isAttributeNoreturn call:[getFlag] noreturn:[getFlag]
isAttributeNoreturn call:[setFlag] noreturn:[setFlag]
isAttributeNothrow call:[getFlag] noreturn:[getFlag]
isAttributeNothrow call:[setFlag] noreturn:[setFlag]
isAttributePacked call:[getFlag] noreturn:[getFlag]
isAttributePacked call:[setFlag] noreturn:[setFlag]
isAttributeNodiscard call:[getFlag] noreturn:[getFlag]
isAttributeNodiscard call:[setFlag] noreturn:[setFlag]
isAttributeMaybeUnused call:[getFlag] noreturn:[getFlag]
isAttributeMaybeUnused call:[setFlag] noreturn:[setFlag]
setCppcheckAttribute call:[setCppcheckAttribute] noreturn:[setCppcheckAttribute]
getCppcheckAttribute call:[getCppcheckAttribute] noreturn:[getCppcheckAttribute]
hasCppcheckAttributes
isControlFlowKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[setFlag] noreturn:[setFlag]
isComplex call:[getFlag] noreturn:[getFlag]
isComplex call:[setFlag] noreturn:[setFlag]
isEnumType call:[getFlag] noreturn:[getFlag]
isEnumType call:[setFlag] noreturn:[setFlag]
isAtAddress call:[getFlag] noreturn:[getFlag]
isAtAddress call:[setFlag] noreturn:[setFlag]
isIncompleteVar call:[getFlag] noreturn:[getFlag]
isIncompleteVar call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
isExternC call:[getFlag] noreturn:[getFlag]
isExternC call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclComma call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclComma call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclEq call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclEq call:[setFlag] noreturn:[setFlag]
isImplicitInt call:[getFlag] noreturn:[getFlag]
isImplicitInt call:[setFlag] noreturn:[setFlag]
isInline call:[getFlag] noreturn:[getFlag]
isInline call:[setFlag] noreturn:[setFlag]
isTemplate call:[getFlag] noreturn:[getFlag]
isTemplate call:[setFlag] noreturn:[setFlag]
isBitfield
bits
templateSimplifierPointers
templateSimplifierPointer call:[insert] noreturn:[insert]
setBits
isUtf8 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf16 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf32 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isCChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isCMultiChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isTemplateArg call:[getFlag] noreturn:[getFlag]
isTemplateArg call:[setFlag] noreturn:[setFlag]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findmatch call:[findmatch]
findmatch call:[findmatch]
fileIndex
fileIndex
linenr
linenr
column
column
next
previous
varId
varId call:[isStandardType,tokType,update_property_info] noreturn:[isStandardType,update_property_info]
exprId
exprId
forDebug
forDebugVarId call:[forDebug]
forDebugExprId call:[forDebug]
forPrintOut call:[forDebug]
link call:[update_property_info] noreturn:[update_property_info]
link
scope
scope
function
variable call:[tokType] noreturn:[tokType]
variable
type
enumerator
enumerator call:[tokType] noreturn:[tokType]
progressValue
originalName global:[emptyString]
values
originalName call:[string] noreturn:[string]
getKnownIntValue call:[front]
removeValues call:[remove_if] noreturn:[remove_if]
index
next
previous
getFlag call:[return] noreturn:[return]
setFlag
astOperand1
astOperand1
astOperand2
astOperand2
astParent
astParent
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astTop
astTop
clearAst
clearValueFlow
astString call:[astString] noreturn:[astString]
setCpp11init
isCpp11init
Standards
setC
getC
setCPP
getCPP
Error
Error
Error
getAllocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
getDeallocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
allocId call:[getAllocDealloc]
deallocId call:[getAllocDealloc]
setalloc
setdealloc
setrealloc
setnoreturn
ismemory call:[return] noreturn:[return]
ismemory call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
Container
getAction call:[end,find]
getYield call:[end,find]
ArgumentChecks
IteratorInfo
MinSize
Function
isboolargbad call:[getarg]
isargformatstr call:[getarg]
isargstrz call:[getarg]
validarg global:[emptyString] call:[getarg]
isInt call:[isInt] noreturn:[isInt]
getArgIteratorInfo call:[getarg]
argminsizes call:[getarg]
markupExtensions
isexporter call:[end,find] noreturn:[end]
isexportedprefix call:[end,find,isPrefix,return] noreturn:[return]
isexportedsuffix call:[end,find,isSuffix,return] noreturn:[return]
isreflection call:[end,find] noreturn:[end]
reflectionArgument call:[end,find]
podtype call:[end,find,return]
PlatformType
operator== call:[return] noreturn:[return]
operator!=
platform_type call:[end,find,return]
platform_type call:[end,find,platform_type,return]
addPrefix call:[insert] noreturn:[insert]
addSuffix call:[insert] noreturn:[insert]
isPrefix call:[end,find,return] noreturn:[return]
isSuffix call:[end,find,return] noreturn:[return]
CodeBlock
setStart
setEnd
setOffset
addBlock call:[insert] noreturn:[insert]
start
end
offset
isBlock call:[end,find] noreturn:[end]
getAllocDealloc call:[end,find,return]
min_value
max_value call:[return]
Platform
isIntValue call:[max_value,min_value] noreturn:[max_value]
isIntValue call:[max_value]
isLongValue call:[max_value,min_value] noreturn:[max_value]
isLongValue call:[max_value]
isLongLongValue call:[max_value]
isWindowsPlatform
platformString call:[platformString] noreturn:[platformString]
platformString
unsignedCharMax call:[max_value] noreturn:[max_value]
signedCharMax call:[max_value] noreturn:[max_value]
signedCharMin call:[min_value] noreturn:[min_value]
operator() call:[caseInsensitiveStringCompare]
FileSettings
cppcheckDefines
getFileName
Suppression
Suppression
Suppression
operator=
operator<
isLocal call:[empty,find_first_of]
isSameParameters
TimerResultsIntf
TimerResultsData
seconds
TimerResults
Rule
SafeChecks
clear
configurationExcluded call:[compare,length]
posix call:[begin,end,find] noreturn:[end]
terminate
terminated
Dimension
BaseInfo
operator<
FriendInfo
Type call:[next,str,tokAt] noreturn:[next]
type global:[emptyString] call:[str]
isTypeAlias call:[str]
Enumerator
getFlag call:[return] noreturn:[return]
setFlag
Variable call:[evaluate] noreturn:[evaluate]
nameToken
typeStartToken
typeEndToken
name global:[emptyString] call:[str] noreturn:[str]
declarationId call:[varId] noreturn:[varId]
index
isPublic
isProtected
isPrivate
isGlobal
isNamespace
isArgument
isLocal call:[isExtern,return] noreturn:[isExtern]
isMutable call:[getFlag] noreturn:[getFlag]
isVolatile call:[getFlag] noreturn:[getFlag]
isStatic call:[getFlag] noreturn:[getFlag]
isExtern call:[getFlag] noreturn:[getFlag]
isConst call:[getFlag] noreturn:[getFlag]
isThrow
isClass call:[getFlag] noreturn:[getFlag]
isArray call:[getFlag] noreturn:[getFlag]
isPointer call:[getFlag] noreturn:[getFlag]
isPointerToArray call:[getFlag,isPointer] noreturn:[getFlag]
isArrayOrPointer call:[getFlag] noreturn:[getFlag]
isReference call:[getFlag] noreturn:[getFlag]
isRValueReference call:[getFlag] noreturn:[getFlag]
hasDefault call:[getFlag] noreturn:[getFlag]
isInit call:[getFlag] noreturn:[getFlag]
type
typeScope
scope
dimensions
dimension
dimensionKnown
isStlType call:[getFlag] noreturn:[getFlag]
isStlStringType call:[getFlag] noreturn:[getFlag]
isSmartPointer call:[getFlag] noreturn:[getFlag]
isStlType call:[isStlType,strAt] noreturn:[strAt]
isStlType call:[end,find,isStlType,strAt] noreturn:[end]
isFloatingType call:[getFlag] noreturn:[getFlag]
isEnumType call:[isEnumType,type] noreturn:[isEnumType]
isMaybeUnused call:[getFlag] noreturn:[getFlag]
valueType
accessControl
type
getFlag call:[return] noreturn:[return]
setFlag
name call:[str] noreturn:[str]
argCount call:[size] noreturn:[size]
minArgCount call:[size]
initializedArgCount
isLambda
isConstructor
isDestructor
isAttributeConstructor call:[isAttributeConstructor] noreturn:[isAttributeConstructor]
isAttributeDestructor call:[isAttributeDestructor] noreturn:[isAttributeDestructor]
isAttributePure call:[isAttributePure] noreturn:[isAttributePure]
isAttributeConst call:[isAttributeConst] noreturn:[isAttributeConst]
isAttributeNoreturn call:[isAttributeNoreturn] noreturn:[isAttributeNoreturn]
isAttributeNothrow call:[isAttributeNothrow] noreturn:[isAttributeNothrow]
isAttributeNodiscard call:[isAttributeNodiscard] noreturn:[isAttributeNodiscard]
hasBody call:[getFlag] noreturn:[getFlag]
isInline call:[getFlag] noreturn:[getFlag]
isConst call:[getFlag] noreturn:[getFlag]
hasVirtualSpecifier call:[getFlag] noreturn:[getFlag]
isPure call:[getFlag] noreturn:[getFlag]
isStatic call:[getFlag] noreturn:[getFlag]
isStaticLocal call:[getFlag] noreturn:[getFlag]
isExtern call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isExplicit call:[getFlag] noreturn:[getFlag]
isDefault call:[getFlag] noreturn:[getFlag]
isDelete call:[getFlag] noreturn:[getFlag]
isNoExcept call:[getFlag] noreturn:[getFlag]
isThrow call:[getFlag] noreturn:[getFlag]
hasOverrideSpecifier call:[getFlag] noreturn:[getFlag]
hasFinalSpecifier call:[getFlag] noreturn:[getFlag]
isOperator call:[getFlag] noreturn:[getFlag]
hasLvalRefQualifier call:[getFlag] noreturn:[getFlag]
hasRvalRefQualifier call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isVolatile call:[getFlag] noreturn:[getFlag]
hasTrailingReturnType call:[getFlag] noreturn:[getFlag]
hasBody call:[setFlag] noreturn:[setFlag]
isInlineKeyword call:[getFlag] noreturn:[getFlag]
isEscapeFunction call:[getFlag] noreturn:[getFlag]
isEscapeFunction call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
returnDefEnd call:[findmatch,hasTrailingReturnType] noreturn:[findmatch]
isInline call:[setFlag] noreturn:[setFlag]
isConst call:[setFlag] noreturn:[setFlag]
hasVirtualSpecifier call:[setFlag] noreturn:[setFlag]
isPure call:[setFlag] noreturn:[setFlag]
isStatic call:[setFlag] noreturn:[setFlag]
isStaticLocal call:[setFlag] noreturn:[setFlag]
isExtern call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
isExplicit call:[setFlag] noreturn:[setFlag]
isDefault call:[setFlag] noreturn:[setFlag]
isDelete call:[setFlag] noreturn:[setFlag]
isNoExcept call:[setFlag] noreturn:[setFlag]
isThrow call:[setFlag] noreturn:[setFlag]
isOperator call:[setFlag] noreturn:[setFlag]
hasLvalRefQualifier call:[setFlag] noreturn:[setFlag]
hasRvalRefQualifier call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isVolatile call:[setFlag] noreturn:[setFlag]
hasTrailingReturnType call:[setFlag] noreturn:[setFlag]
isInlineKeyword call:[setFlag] noreturn:[setFlag]
setBodyStartEnd call:[link,push_back] noreturn:[push_back]
isAnonymous call:[compare,isdigit,size] noreturn:[isdigit]
findEnumerator call:[str]
isNestedIn
nestedInFunction
isClassOrStruct call:[return] noreturn:[return]
isClassOrStructOrUnion call:[return] noreturn:[return]
isExecutable
isLoopScope
isLocal call:[return] noreturn:[return]
findRecordInNestedList call:[findRecordInNestedList]
findType call:[findType]
addFunction call:[back,insert,make_pair,push_back,str] noreturn:[insert]
ValueType
ValueType
ValueType
ValueType
isPrimitive call:[return] noreturn:[return]
isIntegral call:[return] noreturn:[return]
isFloat call:[return] noreturn:[return]
isEnum
findType call:[findType]
findScope call:[findScope]
isVarId call:[size] noreturn:[size]
getVariableFromVarId call:[at] noreturn:[at]
variableList
setSettings
getSettings
isC
isCPP
front
front
back
back
getFiles
TokenRange
ConstTokenRange
Token call:[TokenImpl] noreturn:[TokenImpl]
Token
until call:[ConstTokenRange] noreturn:[ConstTokenRange]
update_property_info global:[controlFlowKeywords] call:[empty,end,find,find_first_of,isCharLiteral,isKeyword,isStringLiteral,isalpha,isdigit,length,setFlag,size,strchr,tokType,update_property_char_string_literal,update_property_isStandardType] noreturn:[tokType,update_property_isStandardType]
update_property_isStandardType global:[stdTypes] call:[end,find,isStandardType,size,tokType] noreturn:[tokType]
update_property_char_string_literal call:[isLong,isPrefixStringCharLiteral] noreturn:[isLong]
isUpperCaseName call:[isName,islower]
concatStr call:[append,find,getStringLiteral,insert,isCChar,isStringLiteral,pop_back,substr,update_property_info] noreturn:[insert,update_property_info]
strValue call:[assert,erase,find,getStringLiteral,ret,substr] noreturn:[substr]
deleteNext call:[link,next,previous] noreturn:[link,previous]
deletePrevious call:[link,next,previous] noreturn:[link,next]
swapWithNext call:[swap,token] noreturn:[swap,token]
takeData call:[link,tokType,token] noreturn:[link,token]
deleteThis call:[deleteNext,deletePrevious,link,str,takeData] noreturn:[deleteNext,deletePrevious,str]
replace call:[next,previous] noreturn:[next,previous]
tokAt call:[next,previous]
linkAt call:[InternalError,link,tokAt] noreturn:[InternalError,link]
strAt global:[emptyString] call:[tokAt]
multiComparePercent call:[InternalError,isArithmeticalOp,isAssignmentOp,isBoolean,isComparisonOp,isConstOp,isKeyword,isName,isNumber,isOp,str,tokType,varId] noreturn:[InternalError]
multiCompare call:[c_str,multiComparePercent,str,while]
simpleMatch call:[c_str,length,memchr,next,strchr,strncmp] noreturn:[next]
firstWordEquals call:[return] noreturn:[return]
chrInFirstWord
Match call:[c_str,chrInFirstWord,firstWordEquals,length,multiCompare,next,str] noreturn:[next]
getStrLength call:[assert,begin,end,getStringLiteral,str]
getStrArraySize call:[assert,getStringLiteral,size,str,tokType]
getStrSize call:[assert,getSizeOf,getStrArraySize,tokType,valueType,vt] noreturn:[getSizeOf]
getCharAt call:[assert,begin,end,getStringLiteral,ret,str]
move call:[next,previous]
nextArgument call:[Match,link,next,str] noreturn:[link,next]
nextArgumentBeforeCreateLinks2 call:[Match,findClosingBracket,link,next,str] noreturn:[link,next]
nextTemplateArgument call:[Match,link,next,str] noreturn:[link,next]
isOperator call:[link,strAt] noreturn:[link]
findClosingBracket call:[Match,end,find,insert,isName,isOperator,link,next,previous,simpleMatch,str,strAt,templateParameter,tokAt] noreturn:[insert]
findClosingBracket call:[findClosingBracket]
findOpeningBracket call:[Match,link,previous,str]
findOpeningBracket call:[findOpeningBracket]
findsimplematch call:[next,simpleMatch]
findsimplematch call:[next,simpleMatch]
findmatch call:[Match,next]
findmatch call:[Match,next]
function call:[isLambda,tokType] noreturn:[tokType]
insertToken call:[Match,Token,append,empty,findOpeningBracket,insert,length,linkAt,next,originalName,previous,scopeInfo,simpleMatch,str,strAt,substr,tokAt] noreturn:[Token,append,findOpeningBracket,insert,next,originalName,previous,scopeInfo,substr,tokAt]
eraseTokens call:[deleteNext,next] noreturn:[deleteNext]
createMutualLinks call:[assert,link] noreturn:[link]
printOut call:[forPrintOut,stringifyList]
printOut call:[forPrintOut,stringifyList]
printLines call:[forDebugExprId,linenr,next,stringifyList] noreturn:[next]
stringify call:[find,isComplex,isExpandedMacro,isLong,isName,isSigned,isUnsigned,to_string] noreturn:[to_string]
stringify call:[stringify] noreturn:[stringify]
stringifyList call:[at,fileIndex,linenr,next,size,stringify,to_string] noreturn:[at,linenr,to_string]
stringifyList call:[stringifyList] noreturn:[stringifyList]
stringifyList call:[stringifyList] noreturn:[stringifyList]
stringifyList call:[stringifyList] noreturn:[stringifyList]
astParent call:[InternalError,astOperand1,astOperand2,astParent] noreturn:[InternalError,astParent]
astOperand1 call:[astParent,astTop] noreturn:[astParent]
astOperand2 call:[astParent,astTop] noreturn:[astParent]
goToLeftParenthesis call:[link,next,str] noreturn:[link]
goToRightParenthesis call:[link,previous,str] noreturn:[link]
findExpressionStartEndTokens call:[Match,astOperand1,astOperand2,findLambdaEndToken,goToLeftParenthesis,goToRightParenthesis,isUnaryPreOp,link,precedes,simpleMatch,str] noreturn:[astOperand1,link]
isCalculation call:[Match,astOperand1,astOperand2,empty,isNumber,pop,push,str,top,varId] noreturn:[push]
isUnaryPreOp call:[Match,astOperand1,astOperand2]
stringFromTokenRange call:[Match,empty,isLiteral,isLong,isUnsigned,next,originalName,sprintf,str,tokType] noreturn:[next,originalName,str]
expressionString call:[findExpressionStartEndTokens,stringFromTokenRange] noreturn:[stringFromTokenRange]
astStringXml call:[astOperand1,astOperand2,astStringXml,empty,function,str,strindent,toString,values,varId,variable] noreturn:[astStringXml]
printAst call:[astString,astStringVerbose,astStringXml,column,end,fileIndex,find,insert,linenr,link,next,scope,str] noreturn:[link]
indent
astStringVerboseRecursive call:[astStringVerboseRecursive,function,indent,isExpandedMacro,str] noreturn:[astStringVerboseRecursive,str]
astStringVerbose call:[astStringVerboseRecursive]
astStringZ3 call:[astOperand1,astOperand2,astStringZ3,str] noreturn:[str]
printValueFlow call:[empty,expressionString,front,isImpossible,isInconclusive,isKnown,isPossible,linenr,next,size,str,toString,valueType]
getValueLE call:[findValue,isImpossible,isIntValue] noreturn:[findValue]
getValueGE call:[findValue,isImpossible,isIntValue] noreturn:[findValue]
getInvalidValue call:[begin,end,isEnabled,isFloatArgValid,isFloatValue,isImpossible,isInconclusive,isIntArgValid,isIntValue]
getValueTokenMinStrSize call:[begin,end,getStrSize,isTokValue,tokType]
getValueTokenMaxStrLength call:[begin,end,getStrLength,isTokValue,tokType]
getfunctionscope
getValueTokenDeadPointer call:[astOperand1,begin,end,getfunctionscope,isName,isReference,isStatic,isTokValue,scope,str,values,variable]
isAdjacent call:[abs]
removePointValue call:[decreaseRange,remove] noreturn:[decreaseRange,remove]
removeContradiction call:[compareValue,equalValue,isImpossible,isKnown,isNonValue,isSymbolicValue,max,min,remove,removePointValue,sameToken] noreturn:[compareValue,remove]
removeAdjacentValues call:[adjacent_find,erase,for_each,isAdjacent,next] noreturn:[erase,isAdjacent,next]
mergeAdjacent call:[assert,begin,clear,compareValue,empty,end,isAdjacent,isNonValue,isSymbolicValue,push_back,rbegin,removeAdjacentValues,rend,sameToken,sort] noreturn:[compareValue,push_back,removeAdjacentValues]
removeOverlaps call:[equalValue,isNonValue,mergeAdjacent,remove_if] noreturn:[mergeAdjacent,remove_if]
removeContradictions call:[removeContradiction,removeOverlaps] noreturn:[removeOverlaps]
sameValueType call:[exprId,isSymbolicValue] noreturn:[exprId]
addValue call:[begin,end,equalValue,isImpossible,isInconclusive,isIntValue,isKnown,isLifetimeValue,isTokValue,push_back,push_front,removeContradictions,remove_if,sameValueType,size,str,v] noreturn:[push_back,push_front,remove_if,sameValueType]
assignProgressValues call:[next]
assignIndexes call:[next]
setValueType
type call:[isEnumType,tokType] noreturn:[isEnumType,tokType]
typeOf call:[Match,all_of,astOperand1,astOperand2,begin,empty,end,front,function,getArgumentVars,getLHSVariableToken,getTokenArgumentFunction,previous,scope,simpleMatch,type,typeOf,variable] noreturn:[type,typeOf]
typeDecl call:[Match,astOperand1,astOperand2,declEndToken,declarationId,function,next,previous,returnDefEnd,scope,simpleMatch,tokAt,typeDecl,typeEndToken,typeOf,typeStartToken,variable] noreturn:[tokAt,typeDecl]
typeStr call:[empty,str,stringifyList,typeDecl,valueType] noreturn:[stringifyList]
scopeInfo
scopeInfo
hasKnownIntValue call:[any_of,begin,end,isIntValue,isKnown] noreturn:[any_of,isIntValue]
hasKnownValue call:[any_of,begin,end,mem_fn] noreturn:[any_of]
hasKnownValue call:[any_of,begin,end,isKnown] noreturn:[any_of]
hasKnownSymbolicValue call:[any_of,begin,end,exprId,isKnown,isSymbolicValue] noreturn:[any_of,exprId]
getKnownValue call:[begin,end,find_if,isKnown]
isImpossibleIntValue call:[isImpossible,isIntValue]
getValue call:[begin,end,find_if,isImpossible,isIntValue]
getMaxValue call:[isImpossible,isIntValue]
getMovedValue call:[begin,end,find_if,isImpossible,isMovedValue]
getContainerSizeValue call:[begin,end,find_if,isContainerSizeValue,isImpossible]
TokenImpl call:[token] noreturn:[token]
setCppcheckAttribute
getCppcheckAttribute
findTypeEnd call:[Match,link,next] noreturn:[link,next]
findTypeEnd call:[findTypeEnd] noreturn:[findTypeEnd]
findLambdaEndScope call:[Match,findTypeEnd,link,linkAt,next,simpleMatch] noreturn:[link,linkAt,next]
findLambdaEndScope call:[findLambdaEndScope] noreturn:[findLambdaEndScope]
TokenRangeBase < Token , typename std :: enable_if < std :: is_convertible < Token * , const Token * > :: value > :: type >
TokenIterator
TokenIterator
operator++ call:[next]
operator==
operator!=
operator*
begin call:[TokenIterator] noreturn:[TokenIterator]
end call:[TokenIterator] noreturn:[TokenIterator]
TokenRangeBase < const Token , typename std :: enable_if < std :: is_convertible < const Token * , const Token * > :: value > :: type >
TokenIterator
TokenIterator
operator++ call:[next]
operator==
operator!=
operator*
begin call:[TokenIterator] noreturn:[TokenIterator]
end call:[TokenIterator] noreturn:[TokenIterator]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
