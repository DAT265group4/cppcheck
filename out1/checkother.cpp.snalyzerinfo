CWE
Check
Check call:[instances,remove] noreturn:[remove]
name
FileInfo
FileInfo
toString call:[string] noreturn:[string]
getFileInfo
loadFileInfoFromXml
analyseWholeProgram
reportError call:[CWE,reportError] noreturn:[reportError]
reportError call:[callstack,reportError] noreturn:[reportError]
reportError call:[CWE,reportError] noreturn:[reportError]
operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
CheckOther
CheckOther
runChecks call:[checkAccessOfMovedVariable,checkCastIntToCharAndBack,checkCharVariable,checkCommaSeparatedReturn,checkComparePointers,checkComparisonFunctionIsAlwaysTrueOrFalse,checkConstPointer,checkConstVariable,checkDuplicateBranch,checkDuplicateExpression,checkEvaluationOrder,checkFuncArgNamesDifferent,checkIncompleteArrayFill,checkIncompleteStatement,checkInterlockedDecrement,checkInvalidFree,checkKnownArgument,checkMisusedScopedObject,checkModuloOfOne,checkNanInArithmeticExpression,checkNegativeBitwiseShift,checkOther,checkOverlappingWrite,checkPassByReference,checkPipeParameterSize,checkRedundantAssignment,checkRedundantAssignmentInSwitch,checkRedundantCopy,checkRedundantPointerOp,checkShadowVariables,checkSignOfUnsignedVariable,checkSuspiciousCaseInSwitch,checkSuspiciousSemicolon,checkUnreachableCode,checkUnusedLabel,checkVarFuncNullUB,checkVariableScope,checkZeroDivision,clarifyCalculation,clarifyStatement,invalidPointerCast,warningOldStylePointerCast] noreturn:[checkOverlappingWrite]
getErrorMessages call:[accessMovedError,c,charBitOpError,checkCastIntToCharAndBackError,checkComparisonFunctionIsAlwaysTrueOrFalseError,checkModuloOfOneError,checkPipeParameterSizeError,clarifyCalculationError,clarifyStatementError,commaSeparatedReturnError,comparePointersError,constStatementError,constVariableError,cstyleCastError,duplicateAssignExpressionError,duplicateBranchError,duplicateBreakError,duplicateExpressionError,duplicateExpressionTernaryError,duplicateValueTernaryError,funcArgNamesDifferent,funcArgOrderDifferent,incompleteArrayFillError,invalidFreeError,invalidPointerCastError,knownArgumentError,misusedScopeObjectError,nanInArithmeticExpressionError,negativeBitwiseShiftError,oppositeExpressionError,overlappingWriteFunction,overlappingWriteUnion,passedByValueError,pointerLessThanZeroError,pointerPositiveError,raceAfterInterlockedDecrementError,redundantAssignmentError,redundantAssignmentInSwitchError,redundantBitwiseOperationInSwitchError,redundantCopyError,redundantCopyInSwitchError,redundantInitializationError,redundantPointerOpError,selfAssignmentError,shadowError,signedCharArrayIndexError,suspiciousCaseInSwitchError,suspiciousSemicolonError,unknownEvaluationOrder,unknownSignCharArrayIndexError,unreachableCodeError,unsignedLessThanZeroError,unsignedPositiveError,unusedLabelError,varFuncNullUBError,variableScopeError,zerodivError] noreturn:[checkModuloOfOneError]
myName
classInfo
getFileName
Suppression
Suppression
Suppression
operator=
operator<
isLocal call:[empty,find_first_of]
isSameParameters
FileLocation
FileLocation
FileLocation
getinfo
setinfo
shortMessage
verboseMessage
symbolNames
ErrorLogger
ErrorLogger call:[close,is_open,plistFooter] noreturn:[close]
reportProgress
reportInfo call:[reportErr] noreturn:[reportErr]
plistFooter
FwdAnalysis
Result
Result
isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
operator()
operator()
operator()
operator() call:[abs]
operator()
Value
equalValue call:[sameToken]
visitValue call:[f]
operator() call:[compare] noreturn:[compare]
operator() call:[bind,move,ref,visitValue] noreturn:[visitValue]
compareValue call:[assert,bind,isSymbolicValue,move,ref,sameToken,visitValue]
operator== call:[equalValue]
operator!=
equalTo call:[bind,ref,visitValue]
decreaseRange call:[visitValue] noreturn:[visitValue]
invertBound
invertRange call:[decreaseRange,invertBound] noreturn:[decreaseRange]
isIntValue
isTokValue
isFloatValue
isMovedValue
isUninitValue
isContainerSizeValue
isLifetimeValue
isBufferSizeValue
isIteratorValue
isIteratorStartValue
isIteratorEndValue
isSymbolicValue
isLocalLifetimeValue
isArgumentLifetimeValue
isSubFunctionLifetimeValue
isNonValue call:[isLifetimeValue,isMovedValue,isUninitValue] noreturn:[isLifetimeValue]
setKnown
isKnown
setPossible
isPossible
isImpossible
setImpossible
setInconclusive
isInconclusive
changeKnownToPossible call:[isKnown]
errorSeverity
LifetimeToken
LifetimeToken
LifetimeToken
setAddressOf
setInconclusive
Location
UnsafeUsage
CallBase
CallBase
NestedCall
min_value
max_value call:[return]
Platform
isIntValue call:[max_value,min_value] noreturn:[max_value]
isIntValue call:[max_value]
isLongValue call:[max_value,min_value] noreturn:[max_value]
isLongValue call:[max_value]
isLongLongValue call:[max_value]
isWindowsPlatform
platformString call:[platformString] noreturn:[platformString]
platformString
unsignedCharMax call:[max_value] noreturn:[max_value]
signedCharMax call:[max_value] noreturn:[max_value]
signedCharMin call:[min_value] noreturn:[min_value]
operator() call:[caseInsensitiveStringCompare]
FileSettings
cppcheckDefines
Standards
setC
getC
setCPP
getCPP
Error
Error
Error
getAllocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
getDeallocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
allocId call:[getAllocDealloc]
deallocId call:[getAllocDealloc]
setalloc
setdealloc
setrealloc
setnoreturn
ismemory call:[return] noreturn:[return]
ismemory call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
Container
getAction call:[end,find]
getYield call:[end,find]
ArgumentChecks
IteratorInfo
MinSize
Function
isboolargbad call:[getarg]
isargformatstr call:[getarg]
isargstrz call:[getarg]
validarg global:[emptyString] call:[getarg]
isInt call:[isInt] noreturn:[isInt]
getArgIteratorInfo call:[getarg]
argminsizes call:[getarg]
markupExtensions
isexporter call:[end,find] noreturn:[end]
isexportedprefix call:[end,find,isPrefix,return] noreturn:[return]
isexportedsuffix call:[end,find,isSuffix,return] noreturn:[return]
isreflection call:[end,find] noreturn:[end]
reflectionArgument call:[end,find]
podtype call:[end,find,return]
PlatformType
operator== call:[return] noreturn:[return]
operator!=
platform_type call:[end,find,return]
platform_type call:[end,find,platform_type,return]
addPrefix call:[insert] noreturn:[insert]
addSuffix call:[insert] noreturn:[insert]
isPrefix call:[end,find,return] noreturn:[return]
isSuffix call:[end,find,return] noreturn:[return]
CodeBlock
setStart
setEnd
setOffset
addBlock call:[insert] noreturn:[insert]
start
end
offset
isBlock call:[end,find] noreturn:[end]
getAllocDealloc call:[end,find,return]
TimerResultsIntf
TimerResultsData
seconds
TimerResults
Rule
SafeChecks
clear
configurationExcluded call:[compare,length]
posix call:[begin,end,find] noreturn:[end]
terminate
terminated
VariableValue
CheckUninitVar
CheckUninitVar
runChecks call:[check,checkUninitVar,valueFlowUninit] noreturn:[valueFlowUninit]
uninitvarError call:[uninitvarError] noreturn:[uninitvarError]
uninitvarError call:[uninitdataError,uninitvarError] noreturn:[uninitdataError,uninitvarError]
getErrorMessages call:[c,uninitStructMemberError,uninitdataError,uninitstringError,uninitvarError] noreturn:[uninitStructMemberError]
myName
classInfo
isClass call:[setFlag] noreturn:[setFlag]
isFunction call:[setFlag] noreturn:[setFlag]
isVariable call:[setFlag] noreturn:[setFlag]
isAlias call:[setFlag] noreturn:[setFlag]
isSpecialization call:[setFlag] noreturn:[setFlag]
isPartialSpecialization call:[setFlag] noreturn:[setFlag]
isForwardDeclaration call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
getFlag call:[return] noreturn:[return]
setFlag
operator==
token
token
scope
name
fullName
nameToken
paramEnd
paramEnd
isClass call:[getFlag] noreturn:[getFlag]
isFunction call:[getFlag] noreturn:[getFlag]
isVariable call:[getFlag] noreturn:[getFlag]
isAlias call:[getFlag] noreturn:[getFlag]
isSpecialization call:[getFlag] noreturn:[getFlag]
isPartialSpecialization call:[getFlag] noreturn:[getFlag]
isForwardDeclaration call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isSameFamily call:[return]
ScopeInfo2
TokenImpl
str call:[update_property_info] noreturn:[update_property_info]
str
tokAt call:[tokAt]
linkAt call:[linkAt]
simpleMatch call:[simpleMatch] noreturn:[simpleMatch]
valueType
argumentType call:[Match,astParent] noreturn:[astParent]
tokType
tokType call:[setFlag] noreturn:[setFlag]
isKeyword
isName call:[getFlag] noreturn:[getFlag]
isNameOnly
isLiteral call:[getFlag] noreturn:[getFlag]
isNumber
isEnumerator
isOp call:[isAssignmentOp,isConstOp,return] noreturn:[return]
isConstOp call:[isArithmeticalOp,return] noreturn:[return]
isExtendedOp call:[isConstOp]
isArithmeticalOp
isComparisonOp
isAssignmentOp
isBoolean
isIncDecOp
isBinaryOp call:[astOperand1,astOperand2]
isUnaryOp call:[astOperand1,astOperand2]
flags
flags
isUnsigned call:[getFlag] noreturn:[getFlag]
isUnsigned call:[setFlag] noreturn:[setFlag]
isSigned call:[getFlag] noreturn:[getFlag]
isSigned call:[setFlag] noreturn:[setFlag]
isPointerCompare call:[getFlag] noreturn:[getFlag]
isPointerCompare call:[setFlag] noreturn:[setFlag]
isLong call:[getFlag] noreturn:[getFlag]
isLong call:[setFlag] noreturn:[setFlag]
isStandardType call:[getFlag] noreturn:[getFlag]
isStandardType call:[setFlag] noreturn:[setFlag]
isExpandedMacro call:[getFlag] noreturn:[getFlag]
isExpandedMacro call:[setFlag] noreturn:[setFlag]
isCast call:[getFlag] noreturn:[getFlag]
isCast call:[setFlag] noreturn:[setFlag]
isAttributeConstructor call:[getFlag] noreturn:[getFlag]
isAttributeConstructor call:[setFlag] noreturn:[setFlag]
isAttributeDestructor call:[getFlag] noreturn:[getFlag]
isAttributeDestructor call:[setFlag] noreturn:[setFlag]
isAttributeUnused call:[getFlag] noreturn:[getFlag]
isAttributeUnused call:[setFlag] noreturn:[setFlag]
isAttributeUsed call:[getFlag] noreturn:[getFlag]
isAttributeUsed call:[setFlag] noreturn:[setFlag]
isAttributePure call:[getFlag] noreturn:[getFlag]
isAttributePure call:[setFlag] noreturn:[setFlag]
isAttributeConst call:[getFlag] noreturn:[getFlag]
isAttributeConst call:[setFlag] noreturn:[setFlag]
isAttributeNoreturn call:[getFlag] noreturn:[getFlag]
isAttributeNoreturn call:[setFlag] noreturn:[setFlag]
isAttributeNothrow call:[getFlag] noreturn:[getFlag]
isAttributeNothrow call:[setFlag] noreturn:[setFlag]
isAttributePacked call:[getFlag] noreturn:[getFlag]
isAttributePacked call:[setFlag] noreturn:[setFlag]
isAttributeNodiscard call:[getFlag] noreturn:[getFlag]
isAttributeNodiscard call:[setFlag] noreturn:[setFlag]
isAttributeMaybeUnused call:[getFlag] noreturn:[getFlag]
isAttributeMaybeUnused call:[setFlag] noreturn:[setFlag]
setCppcheckAttribute call:[setCppcheckAttribute] noreturn:[setCppcheckAttribute]
getCppcheckAttribute call:[getCppcheckAttribute] noreturn:[getCppcheckAttribute]
hasCppcheckAttributes
isControlFlowKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[setFlag] noreturn:[setFlag]
isComplex call:[getFlag] noreturn:[getFlag]
isComplex call:[setFlag] noreturn:[setFlag]
isEnumType call:[getFlag] noreturn:[getFlag]
isEnumType call:[setFlag] noreturn:[setFlag]
isAtAddress call:[getFlag] noreturn:[getFlag]
isAtAddress call:[setFlag] noreturn:[setFlag]
isIncompleteVar call:[getFlag] noreturn:[getFlag]
isIncompleteVar call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
isExternC call:[getFlag] noreturn:[getFlag]
isExternC call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclComma call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclComma call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclEq call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclEq call:[setFlag] noreturn:[setFlag]
isImplicitInt call:[getFlag] noreturn:[getFlag]
isImplicitInt call:[setFlag] noreturn:[setFlag]
isInline call:[getFlag] noreturn:[getFlag]
isInline call:[setFlag] noreturn:[setFlag]
isTemplate call:[getFlag] noreturn:[getFlag]
isTemplate call:[setFlag] noreturn:[setFlag]
isBitfield
bits
templateSimplifierPointers
templateSimplifierPointer call:[insert] noreturn:[insert]
setBits
isUtf8 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf16 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf32 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isCChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isCMultiChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isTemplateArg call:[getFlag] noreturn:[getFlag]
isTemplateArg call:[setFlag] noreturn:[setFlag]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findmatch call:[findmatch]
findmatch call:[findmatch]
fileIndex
fileIndex
linenr
linenr
column
column
next
previous
varId
varId call:[isStandardType,tokType,update_property_info] noreturn:[isStandardType,update_property_info]
exprId
exprId
forDebug
forDebugVarId call:[forDebug]
forDebugExprId call:[forDebug]
forPrintOut call:[forDebug]
link call:[update_property_info] noreturn:[update_property_info]
link
scope
scope
function
variable call:[tokType] noreturn:[tokType]
variable
type
enumerator
enumerator call:[tokType] noreturn:[tokType]
progressValue
originalName global:[emptyString]
values
originalName call:[string] noreturn:[string]
getKnownIntValue call:[front]
removeValues call:[remove_if] noreturn:[remove_if]
index
next
previous
getFlag call:[return] noreturn:[return]
setFlag
astOperand1
astOperand1
astOperand2
astOperand2
astParent
astParent
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astTop
astTop
clearAst
clearValueFlow
astString call:[astString] noreturn:[astString]
setCpp11init
isCpp11init
Dimension
BaseInfo
operator<
FriendInfo
Type call:[next,str,tokAt] noreturn:[next]
type global:[emptyString] call:[str]
isTypeAlias call:[str]
Enumerator
getFlag call:[return] noreturn:[return]
setFlag
Variable call:[evaluate] noreturn:[evaluate]
nameToken
typeStartToken
typeEndToken
name global:[emptyString] call:[str] noreturn:[str]
declarationId call:[varId] noreturn:[varId]
index
isPublic
isProtected
isPrivate
isGlobal
isNamespace
isArgument
isLocal call:[isExtern,return] noreturn:[isExtern]
isMutable call:[getFlag] noreturn:[getFlag]
isVolatile call:[getFlag] noreturn:[getFlag]
isStatic call:[getFlag] noreturn:[getFlag]
isExtern call:[getFlag] noreturn:[getFlag]
isConst call:[getFlag] noreturn:[getFlag]
isThrow
isClass call:[getFlag] noreturn:[getFlag]
isArray call:[getFlag] noreturn:[getFlag]
isPointer call:[getFlag] noreturn:[getFlag]
isPointerToArray call:[getFlag,isPointer] noreturn:[getFlag]
isArrayOrPointer call:[getFlag] noreturn:[getFlag]
isReference call:[getFlag] noreturn:[getFlag]
isRValueReference call:[getFlag] noreturn:[getFlag]
hasDefault call:[getFlag] noreturn:[getFlag]
isInit call:[getFlag] noreturn:[getFlag]
type
typeScope
scope
dimensions
dimension
dimensionKnown
isStlType call:[getFlag] noreturn:[getFlag]
isStlStringType call:[getFlag] noreturn:[getFlag]
isSmartPointer call:[getFlag] noreturn:[getFlag]
isStlType call:[isStlType,strAt] noreturn:[strAt]
isStlType call:[end,find,isStlType,strAt] noreturn:[end]
isFloatingType call:[getFlag] noreturn:[getFlag]
isEnumType call:[isEnumType,type] noreturn:[isEnumType]
isMaybeUnused call:[getFlag] noreturn:[getFlag]
valueType
accessControl
type
getFlag call:[return] noreturn:[return]
setFlag
name call:[str] noreturn:[str]
argCount call:[size] noreturn:[size]
minArgCount call:[size]
initializedArgCount
isLambda
isConstructor
isDestructor
isAttributeConstructor call:[isAttributeConstructor] noreturn:[isAttributeConstructor]
isAttributeDestructor call:[isAttributeDestructor] noreturn:[isAttributeDestructor]
isAttributePure call:[isAttributePure] noreturn:[isAttributePure]
isAttributeConst call:[isAttributeConst] noreturn:[isAttributeConst]
isAttributeNoreturn call:[isAttributeNoreturn] noreturn:[isAttributeNoreturn]
isAttributeNothrow call:[isAttributeNothrow] noreturn:[isAttributeNothrow]
isAttributeNodiscard call:[isAttributeNodiscard] noreturn:[isAttributeNodiscard]
hasBody call:[getFlag] noreturn:[getFlag]
isInline call:[getFlag] noreturn:[getFlag]
isConst call:[getFlag] noreturn:[getFlag]
hasVirtualSpecifier call:[getFlag] noreturn:[getFlag]
isPure call:[getFlag] noreturn:[getFlag]
isStatic call:[getFlag] noreturn:[getFlag]
isStaticLocal call:[getFlag] noreturn:[getFlag]
isExtern call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isExplicit call:[getFlag] noreturn:[getFlag]
isDefault call:[getFlag] noreturn:[getFlag]
isDelete call:[getFlag] noreturn:[getFlag]
isNoExcept call:[getFlag] noreturn:[getFlag]
isThrow call:[getFlag] noreturn:[getFlag]
hasOverrideSpecifier call:[getFlag] noreturn:[getFlag]
hasFinalSpecifier call:[getFlag] noreturn:[getFlag]
isOperator call:[getFlag] noreturn:[getFlag]
hasLvalRefQualifier call:[getFlag] noreturn:[getFlag]
hasRvalRefQualifier call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isVolatile call:[getFlag] noreturn:[getFlag]
hasTrailingReturnType call:[getFlag] noreturn:[getFlag]
hasBody call:[setFlag] noreturn:[setFlag]
isInlineKeyword call:[getFlag] noreturn:[getFlag]
isEscapeFunction call:[getFlag] noreturn:[getFlag]
isEscapeFunction call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
returnDefEnd call:[findmatch,hasTrailingReturnType] noreturn:[findmatch]
isInline call:[setFlag] noreturn:[setFlag]
isConst call:[setFlag] noreturn:[setFlag]
hasVirtualSpecifier call:[setFlag] noreturn:[setFlag]
isPure call:[setFlag] noreturn:[setFlag]
isStatic call:[setFlag] noreturn:[setFlag]
isStaticLocal call:[setFlag] noreturn:[setFlag]
isExtern call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
isExplicit call:[setFlag] noreturn:[setFlag]
isDefault call:[setFlag] noreturn:[setFlag]
isDelete call:[setFlag] noreturn:[setFlag]
isNoExcept call:[setFlag] noreturn:[setFlag]
isThrow call:[setFlag] noreturn:[setFlag]
isOperator call:[setFlag] noreturn:[setFlag]
hasLvalRefQualifier call:[setFlag] noreturn:[setFlag]
hasRvalRefQualifier call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isVolatile call:[setFlag] noreturn:[setFlag]
hasTrailingReturnType call:[setFlag] noreturn:[setFlag]
isInlineKeyword call:[setFlag] noreturn:[setFlag]
setBodyStartEnd call:[link,push_back] noreturn:[push_back]
isAnonymous call:[compare,isdigit,size] noreturn:[isdigit]
findEnumerator call:[str]
isNestedIn
nestedInFunction
isClassOrStruct call:[return] noreturn:[return]
isClassOrStructOrUnion call:[return] noreturn:[return]
isExecutable
isLoopScope
isLocal call:[return] noreturn:[return]
findRecordInNestedList call:[findRecordInNestedList]
findType call:[findType]
addFunction call:[back,insert,make_pair,push_back,str] noreturn:[insert]
ValueType
ValueType
ValueType
ValueType
isPrimitive call:[return] noreturn:[return]
isIntegral call:[return] noreturn:[return]
isFloat call:[return] noreturn:[return]
isEnum
findType call:[findType]
findScope call:[findScope]
isVarId call:[size] noreturn:[size]
getVariableFromVarId call:[at] noreturn:[at]
variableList
setSettings
getSettings
isC
isCPP
front
front
back
back
getFiles
find call:[find] noreturn:[find]
end call:[end] noreturn:[end]
map
getVarId
setTimerResults
isC call:[isC] noreturn:[isC]
isCPP call:[isCPP] noreturn:[isCPP]
setPreprocessor
getPreprocessor
codeWithTemplates
setSettings call:[setSettings] noreturn:[setSettings]
getSymbolDatabase
varIdCount
tokens call:[front] noreturn:[front]
isMaxTime
getSettings
newVarId
checkCastIntToCharAndBack call:[Match,checkCastIntToCharAndBackError,end,find,getSymbolDatabase,isCPP,isEnabled,isSigned,next,str,strAt,tokAt,typeEndToken,varId,variable] noreturn:[checkCastIntToCharAndBackError,strAt]
checkCastIntToCharAndBackError global:[CWE197] call:[reportError] noreturn:[reportError]
clarifyCalculation call:[Match,astOperand1,astOperand2,clarifyCalculationError,getSymbolDatabase,hasKnownIntValue,isArithmeticalOp,isBinaryOp,isCalculation,isEnabled,isEnum,isNumber,link,next,str,tokType,valueType] noreturn:[link]
clarifyCalculationError global:[CWE783] call:[calc,reportError,s1,s2] noreturn:[reportError]
clarifyStatement call:[Match,astOperand1,astParent,clarifyStatementError,getSymbolDatabase,isEnabled,next,previous,str] noreturn:[clarifyStatementError,previous]
clarifyStatementError global:[CWE783] call:[reportError] noreturn:[reportError]
checkSuspiciousSemicolon call:[getSymbolDatabase,isEnabled,isExpandedMacro,linenr,previous,simpleMatch,suspiciousSemicolonError,tokAt] noreturn:[suspiciousSemicolonError]
suspiciousSemicolonError global:[CWE398] call:[reportError,str,string] noreturn:[reportError]
warningOldStylePointerCast call:[Match,cstyleCastError,front,getSymbolDatabase,hasKnownIntValue,isCPP,isConstructor,isEnabled,next,strAt,tokAt,type,values] noreturn:[cstyleCastError,next]
cstyleCastError global:[CWE398] call:[reportError] noreturn:[reportError]
invalidPointerCast call:[Match,astOperand1,astOperand2,getSymbolDatabase,invalidPointerCastError,isEnabled,isIntegral,linkAt,next,simpleMatch,str,valueType] noreturn:[astOperand1,astOperand2,invalidPointerCastError]
invalidPointerCastError global:[CWE704] call:[reportError] noreturn:[reportError]
checkPipeParameterSize call:[Match,checkPipeParameterSizeError,dimension,getSymbolDatabase,isArgument,isArray,next,posix,str,toString,tokAt,variable] noreturn:[checkPipeParameterSizeError]
checkPipeParameterSizeError global:[CWE686] call:[reportError] noreturn:[reportError]
checkRedundantAssignment call:[Match,astOperand1,astOperand2,astParent,expressionString,findExpressionStartEndTokens,fwdAnalysis,getSymbolDatabase,hasKnownIntValue,hasOperand,isAssignmentOp,isCPP,isCast,isEnabled,isNullOperand,isNullValue,isReference,isSplittedVarDeclEq,isStatic,linkAt,name,next,reassign,redundantAssignmentError,redundantAssignmentInSwitchError,redundantInitializationError,simpleMatch,str,tokAt,valueType,varId,variable,visitAstNodes] noreturn:[linkAt,next,redundantAssignmentError,redundantAssignmentInSwitchError,redundantInitializationError]
redundantCopyError global:[CWE563] call:[reportError] noreturn:[reportError]
redundantCopyInSwitchError global:[CWE563] call:[reportError] noreturn:[reportError]
redundantAssignmentError global:[CWE563] call:[reportError] noreturn:[reportError]
redundantInitializationError global:[CWE563] call:[reportError] noreturn:[reportError]
redundantAssignmentInSwitchError global:[CWE563] call:[reportError] noreturn:[reportError]
isFunctionOrBreakPattern call:[Match]
checkRedundantAssignmentInSwitch call:[Match,astOperand2,clear,end,erase,find,getSymbolDatabase,isEnabled,isFunctionOrBreakPattern,link,next,previous,redundantBitwiseOperationInSwitchError,str,strAt,tokAt,varId] noreturn:[clear,erase,redundantBitwiseOperationInSwitchError]
redundantBitwiseOperationInSwitchError call:[reportError] noreturn:[reportError]
checkSuspiciousCaseInSwitch call:[Match,getSymbolDatabase,isEnabled,next,str,suspiciousCaseInSwitchError] noreturn:[suspiciousCaseInSwitchError]
suspiciousCaseInSwitchError global:[CWE398] call:[reportError] noreturn:[reportError]
checkUnreachableCode call:[Match,astParent,duplicateBreakError,findmatch,findsimplematch,function,getSymbolDatabase,isEnabled,isKeyword,isnoreturn,linenr,link,linkAt,next,previous,scope,simpleMatch,str,strAt,tokAt,unreachableCodeError] noreturn:[duplicateBreakError,findmatch,link,next,previous,tokAt,unreachableCodeError]
duplicateBreakError global:[CWE561] call:[reportError] noreturn:[reportError]
unreachableCodeError global:[CWE561] call:[reportError] noreturn:[reportError]
checkVariableScope call:[Match,astOperand2,astParent,checkInnerScope,declarationId,findmatch,getSymbolDatabase,hasIfdef,isBoolean,isC,isConst,isEnabled,isExpandedMacro,isLocal,isNumber,isPointer,isReference,isStandardType,link,linkAt,name,nameToken,next,previous,scope,simpleMatch,str,tokAt,tokType,typeStartToken,varId,variable,variableList,variableScopeError] noreturn:[link,variableScopeError]
checkInnerScope call:[Match,checkInnerScope,declarationId,isArray,isLoopScope,isName,isPointer,link,linkAt,next,previous,scope,simpleMatch,str,strAt,tokAt,varId] noreturn:[linkAt]
variableScopeError global:[CWE398] call:[reportError] noreturn:[reportError]
checkCommaSeparatedReturn call:[Match,commaSeparatedReturnError,isEnabled,isExpandedMacro,linenr,link,next,str,tokens] noreturn:[commaSeparatedReturnError,link,next]
commaSeparatedReturnError global:[CWE398] call:[reportError] noreturn:[reportError]
estimateSize call:[dimension,estimateSize,isArray,isPointer,isReference,isStatic,sizeOfType,type,typeStartToken,valueType] noreturn:[dimension,estimateSize,sizeOfType]
canBeConst call:[Match,astOperand1,astOperand2,astParent,declarationId,function,getArgumentVar,isAssignmentOp,isConst,isConstOp,isLikelyStreamRead,isReference,isStatic,isUnaryOp,link,nameToken,next,previous,scope,simpleMatch,str,tokAt,varId,variable] noreturn:[link,previous]
checkPassByReference call:[canBeConst,declEndToken,estimateSize,getSymbolDatabase,hasVirtualSpecifier,isArgument,isArray,isC,isClass,isConst,isEnabled,isEnumType,isExternC,isPointer,isReference,link,name,nameToken,passedByValueError,scope,strAt,type,valueType,variableList] noreturn:[passedByValueError]
passedByValueError global:[CWE398] call:[reportError] noreturn:[reportError]
isUnusedVariable call:[Match,declEndToken,declarationId,findmatch,next,scope,tokAt] noreturn:[findmatch,tokAt]
isVariableMutableInInitializer call:[Match,astParent,isClass,isConst,isReference,next,previous,varId,variable]
checkConstVariable call:[Match,any_of,astOperand1,astOperand2,astParent,begin,constVariableError,constructorMemberInitialization,declarationId,end,findReturns,findmatch,function,getParentLifetime,getSymbolDatabase,hasLifetimeToken,isAliased,isArgument,isArray,isC,isCPP,isCast,isConst,isConstructor,isEnabled,isEnumType,isGlobal,isImplicitlyVirtual,isPointer,isRValueReference,isReference,isStatic,isUnusedVariable,isVariableChanged,isVariableMutableInInitializer,isVolatile,linkAt,nameToken,next,previous,returnsConst,returnsReference,scope,simpleMatch,valueType,varId,variable,variableList] noreturn:[astOperand2,astParent,constVariableError,hasLifetimeToken]
checkConstPointer call:[Match,astOperand1,astOperand2,astParent,constVariableError,declarationId,dimensions,end,find,hasVirtualSpecifier,insert,isArgument,isArray,isCPP,isEnabled,isImplicitlyVirtual,isLocal,isReference,isUnaryOp,isVariableChanged,nameToken,next,scope,simpleMatch,size,tokens,valueType,variable] noreturn:[constVariableError,insert]
constVariableError global:[CWE398] call:[c_str,isArgument,name,nameToken,push_back,push_front,reportError,string,varname,vartype] noreturn:[reportError]
checkCharVariable call:[Match,astIsSignedChar,astIsUnknownSignChar,astOperand1,astOperand2,astParent,charBitOpError,getMaxValue,getSymbolDatabase,getValueGE,getValueLE,isArray,isBinaryOp,isEnabled,isKnown,isPointer,next,signedCharArrayIndexError,simpleMatch,str,unknownSignCharArrayIndexError,valueType,variable] noreturn:[charBitOpError,getValueGE,signedCharArrayIndexError,unknownSignCharArrayIndexError]
signedCharArrayIndexError global:[CWE128] call:[reportError] noreturn:[reportError]
unknownSignCharArrayIndexError global:[CWE758] call:[reportError] noreturn:[reportError]
charBitOpError global:[CWE398] call:[reportError] noreturn:[reportError]
isType call:[Match,astOperand2,isType,link,simpleMatch] noreturn:[isType]
isVarDeclOp call:[Match,astOperand1,astOperand2,isType,nameToken,variable] noreturn:[isType]
isConstStatement call:[Match,astIsIntegral,astOperand1,astOperand2,isCPPCast,isConstStatement,isExpandedMacro,isVarDeclOp,previous,simpleMatch] noreturn:[isConstStatement]
isVoidStmt call:[Match,astOperand1,link,previous,simpleMatch] noreturn:[Match,astOperand1]
isConstTop call:[Match,astOperand1,astOperand2,astParent,astTop,previous,simpleMatch]
checkIncompleteStatement call:[Match,astOperand1,astParent,astTop,constStatementError,isAssignmentOp,isCPP,isConstStatement,isConstTop,isEnabled,isExecutable,isIntegral,isNumber,isVoidStmt,next,nextAfterAstRightmostLeaf,previous,scope,simpleMatch,str,tokType,tokens,valueType,visitAstNodes] noreturn:[constStatementError]
constStatementError global:[CWE398] call:[Match,astOperand1,astOperand2,isCast,isNumber,reportError,simpleMatch,str,string] noreturn:[astOperand1,reportError]
checkZeroDivision call:[astOperand1,astOperand2,getValue,isEnabled,isIntegral,next,str,tokens,valueType,zerodivError] noreturn:[zerodivError]
zerodivError global:[CWE369] call:[eitherTheConditionIsRedundant,errorSeverity,getErrorPath,isInconclusive,linenr,reportError,str] noreturn:[reportError]
checkNanInArithmeticExpression call:[Match,astOperand2,astParent,isEnabled,nanInArithmeticExpressionError,next,simpleMatch,str,tokens] noreturn:[nanInArithmeticExpressionError]
nanInArithmeticExpressionError global:[CWE369] call:[reportError] noreturn:[reportError]
checkMisusedScopedObject call:[Match,function,getSymbolDatabase,isC,isConstructor,isEnabled,linkAt,misusedScopeObjectError,next,str,type] noreturn:[next]
misusedScopeObjectError global:[CWE563] call:[reportError] noreturn:[reportError]
getSingleExpressionInBlock call:[astTop,nextAfterAstRightmostLeaf,simpleMatch]
checkDuplicateBranch call:[astOperand1,astOperand2,duplicateBranchError,empty,getSingleExpressionInBlock,getSymbolDatabase,isCPP,isEnabled,isExpandedMacro,isSameExpression,linkAt,next,simpleMatch,str,stringifyList,tokAt] noreturn:[duplicateBranchError]
duplicateBranchError global:[CWE398] call:[emplace_back,reportError] noreturn:[reportError]
checkInvalidFree call:[Match,end,erase,find,findmatch,getSymbolDatabase,insert,invalidFreeError,isEnabled,isFunctionConst,linkAt,make_pair,next,str,strAt,tokAt,varId] noreturn:[erase,findmatch,insert,invalidFreeError]
invalidFreeError call:[CWE,reportError] noreturn:[reportError]
notconst call:[isConst] noreturn:[isConst]
getConstFunctions call:[begin,end,find_if,push_back,splice,str] noreturn:[push_back,splice]
checkDuplicateExpression call:[Match,astIsFloat,astOperand1,astOperand2,astParent,duplicateAssignExpressionError,duplicateExpressionError,duplicateExpressionTernaryError,duplicateValueTernaryError,empty,expressionString,findsimplematch,getConstFunctions,getSymbolDatabase,isArithmeticalOp,isCPP,isConstExpression,isConstVarExpression,isEnabled,isEqualKnownValue,isOp,isOppositeExpression,isSameExpression,isUnaryOp,isUniqueExpression,isWithoutSideEffects,next,oppositeExpressionError,previous,scope,selfAssignmentError,simpleMatch,str,tokAt,tokType,valueType,values,varId] noreturn:[astOperand1,astParent,duplicateAssignExpressionError,duplicateExpressionError,duplicateExpressionTernaryError,duplicateValueTernaryError,oppositeExpressionError,selfAssignmentError,tokAt]
oppositeExpressionError global:[CWE398] call:[emplace_back,reportError,str] noreturn:[reportError]
duplicateExpressionError global:[CWE398] call:[Match,emplace_back,expressionString,isArithmeticalOp,reportError,str] noreturn:[reportError]
duplicateAssignExpressionError global:[CWE398] call:[reportError,str] noreturn:[reportError]
duplicateExpressionTernaryError global:[CWE398] call:[emplace_back,reportError] noreturn:[reportError]
duplicateValueTernaryError global:[CWE398] call:[reportError] noreturn:[reportError]
selfAssignmentError global:[CWE398] call:[reportError] noreturn:[reportError]
checkComparisonFunctionIsAlwaysTrueOrFalse call:[Match,checkComparisonFunctionIsAlwaysTrueOrFalseError,getSymbolDatabase,isEnabled,isName,next,str,strAt,tokAt,varId] noreturn:[checkComparisonFunctionIsAlwaysTrueOrFalseError]
checkComparisonFunctionIsAlwaysTrueOrFalseError global:[CWE570,CWE571] call:[reportError] noreturn:[reportError]
checkSignOfUnsignedVariable call:[comparisonNonZeroExpressionLessThanZero,expressionString,getSymbolDatabase,isEnabled,next,pointerLessThanZeroError,pointerPositiveError,testIfNonZeroExpressionIsPositive,unsignedLessThanZeroError,unsignedPositiveError,valueType] noreturn:[pointerLessThanZeroError,pointerPositiveError,unsignedLessThanZeroError,unsignedPositiveError]
comparisonNonZeroExpressionLessThanZero call:[Match,astOperand1,astOperand2,getValue,isComparisonOp,isKnown,valueType] noreturn:[astOperand1,astOperand2]
testIfNonZeroExpressionIsPositive call:[astOperand1,astOperand2,getValue,isComparisonOp,isKnown,simpleMatch,valueType] noreturn:[astOperand1,astOperand2]
unsignedLessThanZeroError global:[CWE570] call:[getErrorPath,reportError] noreturn:[reportError]
pointerLessThanZeroError global:[CWE570] call:[getErrorPath,reportError] noreturn:[reportError]
unsignedPositiveError global:[CWE570] call:[getErrorPath,reportError] noreturn:[reportError]
pointerPositiveError global:[CWE570] call:[getErrorPath,reportError] noreturn:[reportError]
constructorTakesReference call:[argCount,getArgumentVar,isConstructor,isReference]
checkRedundantCopy call:[Match,astOperand2,constructorTakesReference,function,getSymbolDatabase,isC,isClass,isConst,isEnabled,isPointer,isReference,isStlType,link,nameToken,next,previous,redundantCopyError,str,strAt,type,typeScope,variableList] noreturn:[redundantCopyError]
redundantCopyError global:[CWE398] call:[reportError] noreturn:[reportError]
isNegative call:[getValueLE,valueType] noreturn:[getValueLE]
checkNegativeBitwiseShift call:[Match,astOperand1,astOperand2,astParent,isCPP,isEnabled,isIntegral,isNegative,negativeBitwiseShiftError,next,tokens,valueType] noreturn:[negativeBitwiseShiftError]
negativeBitwiseShiftError global:[CWE758] call:[reportError] noreturn:[reportError]
checkIncompleteArrayFill call:[Match,dimension,dimensions,empty,estimateSize,getSymbolDatabase,incompleteArrayFillError,isArray,isEnabled,isPointer,linkAt,name,next,sizeOfType,str,strAt,toLongNumber,tokAt,type,typeStartToken,valueType,variable] noreturn:[estimateSize,incompleteArrayFillError]
incompleteArrayFillError global:[CWE131] call:[reportError] noreturn:[reportError]
checkVarFuncNullUB call:[Match,argCount,function,getSymbolDatabase,isEnabled,isName,link,next,previous,simpleMatch,str,tokAt,varFuncNullUBError] noreturn:[link,previous,varFuncNullUBError]
varFuncNullUBError global:[CWE475] call:[reportError] noreturn:[reportError]
checkRedundantPointerOp call:[astOperand1,isEnabled,isExpandedMacro,isPointer,isUnaryOp,link,name,next,redundantPointerOpError,str,tokens,variable] noreturn:[link,redundantPointerOpError]
redundantPointerOpError global:[CWE398] call:[reportError] noreturn:[reportError]
checkInterlockedDecrement call:[Match,isName,isWindowsPlatform,link,next,raceAfterInterlockedDecrementError,str,strAt,tokAt,tokens] noreturn:[raceAfterInterlockedDecrementError]
raceAfterInterlockedDecrementError global:[CWE362] call:[reportError] noreturn:[reportError]
checkUnusedLabel call:[Match,c_str,findsimplematch,getSymbolDatabase,hasIfdef,isEnabled,isExecutable,next,previous,scope,size,strAt,tmp,unusedLabelError] noreturn:[unusedLabelError]
unusedLabelError global:[CWE398,emptyString] call:[isEnabled,reportError,str] noreturn:[reportError]
checkEvaluationOrder call:[Match,astOperand1,astOperand2,astParent,expressionString,getSymbolDatabase,isAssignmentOp,isCPP,isEnabled,isSameExpression,link,next,nextArgument,previous,selfAssignmentError,simpleMatch,str,strAt,unknownEvaluationOrder,visitAstNodes] noreturn:[astParent,nextArgument,selfAssignmentError]
unknownEvaluationOrder global:[CWE768] call:[expressionString,reportError,string] noreturn:[reportError]
checkAccessOfMovedVariable call:[accessMovedError,checkUninitVar,constructorMemberInitialization,getMovedValue,getSymbolDatabase,isCPP,isEnabled,isInconclusive,isMovedParameterAllowedForInconclusiveFunction,isVariableChangedByFunctionCall,isVariableUsage,next,originalName,str,strAt] noreturn:[accessMovedError]
isMovedParameterAllowedForInconclusiveFunction call:[link,simpleMatch,tokAt]
accessMovedError global:[CWE672] call:[errmsg,getErrorPath,reportError] noreturn:[reportError]
checkFuncArgNamesDifferent call:[Match,argCount,declarations,definitions,funcArgNamesDifferent,funcArgOrderDifferent,getArgumentVar,getSymbolDatabase,isEnabled,link,name,nameToken,next,nextArgument,simpleMatch,str,varId] noreturn:[funcArgNamesDifferent,link,nameToken,next]
funcArgNamesDifferent global:[CWE628] call:[reportError,str,string,toString] noreturn:[reportError]
funcArgOrderDifferent global:[CWE683] call:[reportError,size,str] noreturn:[reportError,str]
findShadowed call:[findShadowed,isExecutable,linenr,name,nameToken] noreturn:[findShadowed,nameToken]
checkShadowVariables call:[findShadowed,getSymbolDatabase,isEnabled,isExecutable,isExpandedMacro,linenr,name,nameToken,shadowError,varId] noreturn:[shadowError]
shadowError global:[CWE398] call:[c_str,char,push_back,reportError,str,substr,toupper] noreturn:[reportError]
isVariableExpression call:[Match,astOperand1,astOperand2,hasKnownIntValue,isVariableExpression,simpleMatch] noreturn:[hasKnownIntValue,isVariableExpression]
checkKnownArgument call:[Match,astOperand1,astOperand2,astParent,begin,empty,end,expressionString,find,front,getSymbolDatabase,hasKnownIntValue,isCPPCast,isConstVarExpression,isEnabled,isIntegral,isVariableExpression,knownArgumentError,next,previous,simpleMatch,str,tolower,transform,valueType,values,visitAstNodes] noreturn:[astOperand2,knownArgumentError,tolower,visitAstNodes]
knownArgumentError global:[CWE570] call:[expressionString,getErrorPath,reportError,str,to_string] noreturn:[reportError]
checkComparePointers call:[Match,astIsPointer,astOperand1,astOperand2,comparePointersError,getLifetimeObjValue,getSymbolDatabase,isLocalLifetimeValue,isRValueReference,isReference,next,varId,variable] noreturn:[comparePointersError]
comparePointersError global:[CWE570] call:[begin,emplace_back,end,insert,nameToken,reportError,simpleMatch,variable] noreturn:[insert,reportError]
checkModuloOfOne call:[astOperand1,astOperand2,checkModuloOfOneError,getValue,isEnabled,isIntegral,isKnown,next,str,tokens,valueType] noreturn:[checkModuloOfOneError]
checkModuloOfOneError call:[reportError] noreturn:[reportError]
getBufAndOffset call:[Match,astOperand1,astOperand2,getKnownIntValue,hasKnownIntValue,isBinaryOp,isUnaryOp,simpleMatch,valueType] noreturn:[astOperand1,astOperand2]
checkOverlappingWrite call:[Match,astOperand1,astOperand2,getArguments,getBufAndOffset,getKnownIntValue,getNonOverlappingData,getSymbolDatabase,hasKnownIntValue,isAssignmentOp,isBinaryOp,isCPP,isSameExpression,next,overlappingWriteFunction,overlappingWriteUnion,simpleMatch,size,str,typeScope,variable,visitAstNodes] noreturn:[overlappingWriteFunction,overlappingWriteUnion]
overlappingWriteUnion call:[reportError] noreturn:[reportError]
overlappingWriteFunction call:[reportError,str] noreturn:[reportError]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
