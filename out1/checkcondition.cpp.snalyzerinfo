CWE
Check
Check call:[instances,remove] noreturn:[remove]
name
FileInfo
FileInfo
toString call:[string] noreturn:[string]
getFileInfo
loadFileInfoFromXml
analyseWholeProgram
reportError call:[CWE,reportError] noreturn:[reportError]
reportError call:[callstack,reportError] noreturn:[reportError]
reportError call:[CWE,reportError] noreturn:[reportError]
isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
CheckCondition
CheckCondition
runChecks call:[alwaysTrueFalse,assignIf,checkAssignmentInCondition,checkBadBitmaskCheck,checkCompareValueOutOfTypeRange,checkCondition,checkDuplicateConditionalAssign,checkIncorrectLogicOperator,checkInvalidTestForOverflow,checkModuloAlwaysTrueFalse,checkPointerAdditionResultNotNull,clarifyCondition,comparison,duplicateCondition,multiCondition,multiCondition2] noreturn:[checkCompareValueOutOfTypeRange]
getErrorMessages global:[emptyString] call:[alwaysTrueFalseError,assignIfError,assignmentInCondition,badBitmaskCheckError,c,clarifyConditionError,compareValueOutOfTypeRangeError,comparisonError,duplicateConditionError,duplicateConditionalAssignError,identicalConditionAfterEarlyExitError,identicalInnerConditionError,incorrectLogicOperatorError,invalidTestForOverflow,mismatchingBitAndError,moduloAlwaysTrueFalseError,oppositeInnerConditionError,overlappingElseIfConditionError,pointerAdditionResultNotNullError,redundantConditionError] noreturn:[compareValueOutOfTypeRangeError]
myName
classInfo
FwdAnalysis
Result
Result
min_value
max_value call:[return]
Platform
isIntValue call:[max_value,min_value] noreturn:[max_value]
isIntValue call:[max_value]
isLongValue call:[max_value,min_value] noreturn:[max_value]
isLongValue call:[max_value]
isLongLongValue call:[max_value]
isWindowsPlatform
platformString call:[platformString] noreturn:[platformString]
platformString
unsignedCharMax call:[max_value] noreturn:[max_value]
signedCharMax call:[max_value] noreturn:[max_value]
signedCharMin call:[min_value] noreturn:[min_value]
operator() call:[caseInsensitiveStringCompare]
FileSettings
cppcheckDefines
Standards
setC
getC
setCPP
getCPP
Error
Error
Error
getAllocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
getDeallocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
allocId call:[getAllocDealloc]
deallocId call:[getAllocDealloc]
setalloc
setdealloc
setrealloc
setnoreturn
ismemory call:[return] noreturn:[return]
ismemory call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
Container
getAction call:[end,find]
getYield call:[end,find]
ArgumentChecks
IteratorInfo
MinSize
Function
isboolargbad call:[getarg]
isargformatstr call:[getarg]
isargstrz call:[getarg]
validarg global:[emptyString] call:[getarg]
isInt call:[isInt] noreturn:[isInt]
getArgIteratorInfo call:[getarg]
argminsizes call:[getarg]
markupExtensions
isexporter call:[end,find] noreturn:[end]
isexportedprefix call:[end,find,isPrefix,return] noreturn:[return]
isexportedsuffix call:[end,find,isSuffix,return] noreturn:[return]
isreflection call:[end,find] noreturn:[end]
reflectionArgument call:[end,find]
podtype call:[end,find,return]
PlatformType
operator== call:[return] noreturn:[return]
operator!=
platform_type call:[end,find,return]
platform_type call:[end,find,platform_type,return]
addPrefix call:[insert] noreturn:[insert]
addSuffix call:[insert] noreturn:[insert]
isPrefix call:[end,find,return] noreturn:[return]
isSuffix call:[end,find,return] noreturn:[return]
CodeBlock
setStart
setEnd
setOffset
addBlock call:[insert] noreturn:[insert]
start
end
offset
isBlock call:[end,find] noreturn:[end]
getAllocDealloc call:[end,find,return]
getFileName
Suppression
Suppression
Suppression
operator=
operator<
isLocal call:[empty,find_first_of]
isSameParameters
TimerResultsIntf
TimerResultsData
seconds
TimerResults
Rule
SafeChecks
clear
configurationExcluded call:[compare,length]
posix call:[begin,end,find] noreturn:[end]
terminate
terminated
operator()
operator()
operator()
operator() call:[abs]
operator()
Value
equalValue call:[sameToken]
visitValue call:[f]
operator() call:[compare] noreturn:[compare]
operator() call:[bind,move,ref,visitValue] noreturn:[visitValue]
compareValue call:[assert,bind,isSymbolicValue,move,ref,sameToken,visitValue]
operator== call:[equalValue]
operator!=
equalTo call:[bind,ref,visitValue]
decreaseRange call:[visitValue] noreturn:[visitValue]
invertBound
invertRange call:[decreaseRange,invertBound] noreturn:[decreaseRange]
isIntValue
isTokValue
isFloatValue
isMovedValue
isUninitValue
isContainerSizeValue
isLifetimeValue
isBufferSizeValue
isIteratorValue
isIteratorStartValue
isIteratorEndValue
isSymbolicValue
isLocalLifetimeValue
isArgumentLifetimeValue
isSubFunctionLifetimeValue
isNonValue call:[isLifetimeValue,isMovedValue,isUninitValue] noreturn:[isLifetimeValue]
setKnown
isKnown
setPossible
isPossible
isImpossible
setImpossible
setInconclusive
isInconclusive
changeKnownToPossible call:[isKnown]
errorSeverity
LifetimeToken
LifetimeToken
LifetimeToken
setAddressOf
setInconclusive
isClass call:[setFlag] noreturn:[setFlag]
isFunction call:[setFlag] noreturn:[setFlag]
isVariable call:[setFlag] noreturn:[setFlag]
isAlias call:[setFlag] noreturn:[setFlag]
isSpecialization call:[setFlag] noreturn:[setFlag]
isPartialSpecialization call:[setFlag] noreturn:[setFlag]
isForwardDeclaration call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
getFlag call:[return] noreturn:[return]
setFlag
operator==
token
token
scope
name
fullName
nameToken
paramEnd
paramEnd
isClass call:[getFlag] noreturn:[getFlag]
isFunction call:[getFlag] noreturn:[getFlag]
isVariable call:[getFlag] noreturn:[getFlag]
isAlias call:[getFlag] noreturn:[getFlag]
isSpecialization call:[getFlag] noreturn:[getFlag]
isPartialSpecialization call:[getFlag] noreturn:[getFlag]
isForwardDeclaration call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isSameFamily call:[return]
ScopeInfo2
TokenImpl
str call:[update_property_info] noreturn:[update_property_info]
str
tokAt call:[tokAt]
linkAt call:[linkAt]
simpleMatch call:[simpleMatch] noreturn:[simpleMatch]
valueType
argumentType call:[Match,astParent] noreturn:[astParent]
tokType
tokType call:[setFlag] noreturn:[setFlag]
isKeyword
isName call:[getFlag] noreturn:[getFlag]
isNameOnly
isLiteral call:[getFlag] noreturn:[getFlag]
isNumber
isEnumerator
isOp call:[isAssignmentOp,isConstOp,return] noreturn:[return]
isConstOp call:[isArithmeticalOp,return] noreturn:[return]
isExtendedOp call:[isConstOp]
isArithmeticalOp
isComparisonOp
isAssignmentOp
isBoolean
isIncDecOp
isBinaryOp call:[astOperand1,astOperand2]
isUnaryOp call:[astOperand1,astOperand2]
flags
flags
isUnsigned call:[getFlag] noreturn:[getFlag]
isUnsigned call:[setFlag] noreturn:[setFlag]
isSigned call:[getFlag] noreturn:[getFlag]
isSigned call:[setFlag] noreturn:[setFlag]
isPointerCompare call:[getFlag] noreturn:[getFlag]
isPointerCompare call:[setFlag] noreturn:[setFlag]
isLong call:[getFlag] noreturn:[getFlag]
isLong call:[setFlag] noreturn:[setFlag]
isStandardType call:[getFlag] noreturn:[getFlag]
isStandardType call:[setFlag] noreturn:[setFlag]
isExpandedMacro call:[getFlag] noreturn:[getFlag]
isExpandedMacro call:[setFlag] noreturn:[setFlag]
isCast call:[getFlag] noreturn:[getFlag]
isCast call:[setFlag] noreturn:[setFlag]
isAttributeConstructor call:[getFlag] noreturn:[getFlag]
isAttributeConstructor call:[setFlag] noreturn:[setFlag]
isAttributeDestructor call:[getFlag] noreturn:[getFlag]
isAttributeDestructor call:[setFlag] noreturn:[setFlag]
isAttributeUnused call:[getFlag] noreturn:[getFlag]
isAttributeUnused call:[setFlag] noreturn:[setFlag]
isAttributeUsed call:[getFlag] noreturn:[getFlag]
isAttributeUsed call:[setFlag] noreturn:[setFlag]
isAttributePure call:[getFlag] noreturn:[getFlag]
isAttributePure call:[setFlag] noreturn:[setFlag]
isAttributeConst call:[getFlag] noreturn:[getFlag]
isAttributeConst call:[setFlag] noreturn:[setFlag]
isAttributeNoreturn call:[getFlag] noreturn:[getFlag]
isAttributeNoreturn call:[setFlag] noreturn:[setFlag]
isAttributeNothrow call:[getFlag] noreturn:[getFlag]
isAttributeNothrow call:[setFlag] noreturn:[setFlag]
isAttributePacked call:[getFlag] noreturn:[getFlag]
isAttributePacked call:[setFlag] noreturn:[setFlag]
isAttributeNodiscard call:[getFlag] noreturn:[getFlag]
isAttributeNodiscard call:[setFlag] noreturn:[setFlag]
isAttributeMaybeUnused call:[getFlag] noreturn:[getFlag]
isAttributeMaybeUnused call:[setFlag] noreturn:[setFlag]
setCppcheckAttribute call:[setCppcheckAttribute] noreturn:[setCppcheckAttribute]
getCppcheckAttribute call:[getCppcheckAttribute] noreturn:[getCppcheckAttribute]
hasCppcheckAttributes
isControlFlowKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[setFlag] noreturn:[setFlag]
isComplex call:[getFlag] noreturn:[getFlag]
isComplex call:[setFlag] noreturn:[setFlag]
isEnumType call:[getFlag] noreturn:[getFlag]
isEnumType call:[setFlag] noreturn:[setFlag]
isAtAddress call:[getFlag] noreturn:[getFlag]
isAtAddress call:[setFlag] noreturn:[setFlag]
isIncompleteVar call:[getFlag] noreturn:[getFlag]
isIncompleteVar call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
isExternC call:[getFlag] noreturn:[getFlag]
isExternC call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclComma call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclComma call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclEq call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclEq call:[setFlag] noreturn:[setFlag]
isImplicitInt call:[getFlag] noreturn:[getFlag]
isImplicitInt call:[setFlag] noreturn:[setFlag]
isInline call:[getFlag] noreturn:[getFlag]
isInline call:[setFlag] noreturn:[setFlag]
isTemplate call:[getFlag] noreturn:[getFlag]
isTemplate call:[setFlag] noreturn:[setFlag]
isBitfield
bits
templateSimplifierPointers
templateSimplifierPointer call:[insert] noreturn:[insert]
setBits
isUtf8 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf16 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf32 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isCChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isCMultiChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isTemplateArg call:[getFlag] noreturn:[getFlag]
isTemplateArg call:[setFlag] noreturn:[setFlag]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findmatch call:[findmatch]
findmatch call:[findmatch]
fileIndex
fileIndex
linenr
linenr
column
column
next
previous
varId
varId call:[isStandardType,tokType,update_property_info] noreturn:[isStandardType,update_property_info]
exprId
exprId
forDebug
forDebugVarId call:[forDebug]
forDebugExprId call:[forDebug]
forPrintOut call:[forDebug]
link call:[update_property_info] noreturn:[update_property_info]
link
scope
scope
function
variable call:[tokType] noreturn:[tokType]
variable
type
enumerator
enumerator call:[tokType] noreturn:[tokType]
progressValue
originalName global:[emptyString]
values
originalName call:[string] noreturn:[string]
getKnownIntValue call:[front]
removeValues call:[remove_if] noreturn:[remove_if]
index
next
previous
getFlag call:[return] noreturn:[return]
setFlag
astOperand1
astOperand1
astOperand2
astOperand2
astParent
astParent
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astTop
astTop
clearAst
clearValueFlow
astString call:[astString] noreturn:[astString]
setCpp11init
isCpp11init
Dimension
BaseInfo
operator<
FriendInfo
Type call:[next,str,tokAt] noreturn:[next]
type global:[emptyString] call:[str]
isTypeAlias call:[str]
Enumerator
getFlag call:[return] noreturn:[return]
setFlag
Variable call:[evaluate] noreturn:[evaluate]
nameToken
typeStartToken
typeEndToken
name global:[emptyString] call:[str] noreturn:[str]
declarationId call:[varId] noreturn:[varId]
index
isPublic
isProtected
isPrivate
isGlobal
isNamespace
isArgument
isLocal call:[isExtern,return] noreturn:[isExtern]
isMutable call:[getFlag] noreturn:[getFlag]
isVolatile call:[getFlag] noreturn:[getFlag]
isStatic call:[getFlag] noreturn:[getFlag]
isExtern call:[getFlag] noreturn:[getFlag]
isConst call:[getFlag] noreturn:[getFlag]
isThrow
isClass call:[getFlag] noreturn:[getFlag]
isArray call:[getFlag] noreturn:[getFlag]
isPointer call:[getFlag] noreturn:[getFlag]
isPointerToArray call:[getFlag,isPointer] noreturn:[getFlag]
isArrayOrPointer call:[getFlag] noreturn:[getFlag]
isReference call:[getFlag] noreturn:[getFlag]
isRValueReference call:[getFlag] noreturn:[getFlag]
hasDefault call:[getFlag] noreturn:[getFlag]
isInit call:[getFlag] noreturn:[getFlag]
type
typeScope
scope
dimensions
dimension
dimensionKnown
isStlType call:[getFlag] noreturn:[getFlag]
isStlStringType call:[getFlag] noreturn:[getFlag]
isSmartPointer call:[getFlag] noreturn:[getFlag]
isStlType call:[isStlType,strAt] noreturn:[strAt]
isStlType call:[end,find,isStlType,strAt] noreturn:[end]
isFloatingType call:[getFlag] noreturn:[getFlag]
isEnumType call:[isEnumType,type] noreturn:[isEnumType]
isMaybeUnused call:[getFlag] noreturn:[getFlag]
valueType
accessControl
type
getFlag call:[return] noreturn:[return]
setFlag
name call:[str] noreturn:[str]
argCount call:[size] noreturn:[size]
minArgCount call:[size]
initializedArgCount
isLambda
isConstructor
isDestructor
isAttributeConstructor call:[isAttributeConstructor] noreturn:[isAttributeConstructor]
isAttributeDestructor call:[isAttributeDestructor] noreturn:[isAttributeDestructor]
isAttributePure call:[isAttributePure] noreturn:[isAttributePure]
isAttributeConst call:[isAttributeConst] noreturn:[isAttributeConst]
isAttributeNoreturn call:[isAttributeNoreturn] noreturn:[isAttributeNoreturn]
isAttributeNothrow call:[isAttributeNothrow] noreturn:[isAttributeNothrow]
isAttributeNodiscard call:[isAttributeNodiscard] noreturn:[isAttributeNodiscard]
hasBody call:[getFlag] noreturn:[getFlag]
isInline call:[getFlag] noreturn:[getFlag]
isConst call:[getFlag] noreturn:[getFlag]
hasVirtualSpecifier call:[getFlag] noreturn:[getFlag]
isPure call:[getFlag] noreturn:[getFlag]
isStatic call:[getFlag] noreturn:[getFlag]
isStaticLocal call:[getFlag] noreturn:[getFlag]
isExtern call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isExplicit call:[getFlag] noreturn:[getFlag]
isDefault call:[getFlag] noreturn:[getFlag]
isDelete call:[getFlag] noreturn:[getFlag]
isNoExcept call:[getFlag] noreturn:[getFlag]
isThrow call:[getFlag] noreturn:[getFlag]
hasOverrideSpecifier call:[getFlag] noreturn:[getFlag]
hasFinalSpecifier call:[getFlag] noreturn:[getFlag]
isOperator call:[getFlag] noreturn:[getFlag]
hasLvalRefQualifier call:[getFlag] noreturn:[getFlag]
hasRvalRefQualifier call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isVolatile call:[getFlag] noreturn:[getFlag]
hasTrailingReturnType call:[getFlag] noreturn:[getFlag]
hasBody call:[setFlag] noreturn:[setFlag]
isInlineKeyword call:[getFlag] noreturn:[getFlag]
isEscapeFunction call:[getFlag] noreturn:[getFlag]
isEscapeFunction call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
returnDefEnd call:[findmatch,hasTrailingReturnType] noreturn:[findmatch]
isInline call:[setFlag] noreturn:[setFlag]
isConst call:[setFlag] noreturn:[setFlag]
hasVirtualSpecifier call:[setFlag] noreturn:[setFlag]
isPure call:[setFlag] noreturn:[setFlag]
isStatic call:[setFlag] noreturn:[setFlag]
isStaticLocal call:[setFlag] noreturn:[setFlag]
isExtern call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
isExplicit call:[setFlag] noreturn:[setFlag]
isDefault call:[setFlag] noreturn:[setFlag]
isDelete call:[setFlag] noreturn:[setFlag]
isNoExcept call:[setFlag] noreturn:[setFlag]
isThrow call:[setFlag] noreturn:[setFlag]
isOperator call:[setFlag] noreturn:[setFlag]
hasLvalRefQualifier call:[setFlag] noreturn:[setFlag]
hasRvalRefQualifier call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isVolatile call:[setFlag] noreturn:[setFlag]
hasTrailingReturnType call:[setFlag] noreturn:[setFlag]
isInlineKeyword call:[setFlag] noreturn:[setFlag]
setBodyStartEnd call:[link,push_back] noreturn:[push_back]
isAnonymous call:[compare,isdigit,size] noreturn:[isdigit]
findEnumerator call:[str]
isNestedIn
nestedInFunction
isClassOrStruct call:[return] noreturn:[return]
isClassOrStructOrUnion call:[return] noreturn:[return]
isExecutable
isLoopScope
isLocal call:[return] noreturn:[return]
findRecordInNestedList call:[findRecordInNestedList]
findType call:[findType]
addFunction call:[back,insert,make_pair,push_back,str] noreturn:[insert]
ValueType
ValueType
ValueType
ValueType
isPrimitive call:[return] noreturn:[return]
isIntegral call:[return] noreturn:[return]
isFloat call:[return] noreturn:[return]
isEnum
findType call:[findType]
findScope call:[findScope]
isVarId call:[size] noreturn:[size]
getVariableFromVarId call:[at] noreturn:[at]
variableList
setSettings
getSettings
isC
isCPP
front
front
back
back
getFiles
find call:[find] noreturn:[find]
end call:[end] noreturn:[end]
map
getVarId
setTimerResults
isC call:[isC] noreturn:[isC]
isCPP call:[isCPP] noreturn:[isCPP]
setPreprocessor
getPreprocessor
codeWithTemplates
setSettings call:[setSettings] noreturn:[setSettings]
getSymbolDatabase
varIdCount
tokens call:[front] noreturn:[front]
isMaxTime
getSettings
newVarId
CheckOther
CheckOther
runChecks call:[checkAccessOfMovedVariable,checkCastIntToCharAndBack,checkCharVariable,checkCommaSeparatedReturn,checkComparePointers,checkComparisonFunctionIsAlwaysTrueOrFalse,checkConstPointer,checkConstVariable,checkDuplicateBranch,checkDuplicateExpression,checkEvaluationOrder,checkFuncArgNamesDifferent,checkIncompleteArrayFill,checkIncompleteStatement,checkInterlockedDecrement,checkInvalidFree,checkKnownArgument,checkMisusedScopedObject,checkModuloOfOne,checkNanInArithmeticExpression,checkNegativeBitwiseShift,checkOther,checkOverlappingWrite,checkPassByReference,checkPipeParameterSize,checkRedundantAssignment,checkRedundantAssignmentInSwitch,checkRedundantCopy,checkRedundantPointerOp,checkShadowVariables,checkSignOfUnsignedVariable,checkSuspiciousCaseInSwitch,checkSuspiciousSemicolon,checkUnreachableCode,checkUnusedLabel,checkVarFuncNullUB,checkVariableScope,checkZeroDivision,clarifyCalculation,clarifyStatement,invalidPointerCast,warningOldStylePointerCast] noreturn:[checkOverlappingWrite]
getErrorMessages call:[accessMovedError,c,charBitOpError,checkCastIntToCharAndBackError,checkComparisonFunctionIsAlwaysTrueOrFalseError,checkModuloOfOneError,checkPipeParameterSizeError,clarifyCalculationError,clarifyStatementError,commaSeparatedReturnError,comparePointersError,constStatementError,constVariableError,cstyleCastError,duplicateAssignExpressionError,duplicateBranchError,duplicateBreakError,duplicateExpressionError,duplicateExpressionTernaryError,duplicateValueTernaryError,funcArgNamesDifferent,funcArgOrderDifferent,incompleteArrayFillError,invalidFreeError,invalidPointerCastError,knownArgumentError,misusedScopeObjectError,nanInArithmeticExpressionError,negativeBitwiseShiftError,oppositeExpressionError,overlappingWriteFunction,overlappingWriteUnion,passedByValueError,pointerLessThanZeroError,pointerPositiveError,raceAfterInterlockedDecrementError,redundantAssignmentError,redundantAssignmentInSwitchError,redundantBitwiseOperationInSwitchError,redundantCopyError,redundantCopyInSwitchError,redundantInitializationError,redundantPointerOpError,selfAssignmentError,shadowError,signedCharArrayIndexError,suspiciousCaseInSwitchError,suspiciousSemicolonError,unknownEvaluationOrder,unknownSignCharArrayIndexError,unreachableCodeError,unsignedLessThanZeroError,unsignedPositiveError,unusedLabelError,varFuncNullUBError,variableScopeError,zerodivError] noreturn:[checkModuloOfOneError]
myName
classInfo
diag call:[Match,astParent,count,insert] noreturn:[astParent,insert]
isAliased call:[Match,end,find,next,tokAt,tokens,varId]
assignIf call:[Match,assignIfParseScope,at,declarationId,findsimplematch,isEnabled,isLocal,next,previous,str,strAt,toLongNumber,tokAt,tokens,variable] noreturn:[assignIfParseScope,toLongNumber]
isParameterChanged call:[Match,function,getArgumentVar,isConst,isPointer,isReference,link,previous,str] noreturn:[link]
assignIfParseScope call:[Match,assignIfError,assignIfParseScope,condition,isAssignmentOp,isCPP,isParameterChanged,isVariableChanged,link,linkAt,mismatchingBitAndError,next,op,simpleMatch,str,strAt,string,toLongNumber,tokAt] noreturn:[assignIfError,assignIfParseScope,mismatchingBitAndError]
assignIfError global:[CWE398] call:[diag,reportError,string,tokAt] noreturn:[reportError]
mismatchingBitAndError global:[CWE398] call:[reportError,str] noreturn:[reportError]
getnumchildren call:[astOperand1,astOperand2,getnumchildren,isNumber,push_back,str,toLongNumber] noreturn:[getnumchildren,push_back]
inBooleanFunction call:[Match,isLocal,next,scope] noreturn:[Match,next]
checkBadBitmaskCheck call:[Match,astOperand1,astOperand2,astParent,badBitmaskCheckError,front,hasKnownIntValue,inBooleanFunction,isEnabled,next,str,tokens,typeStartToken,values,variable] noreturn:[badBitmaskCheckError]
badBitmaskCheckError global:[CWE571] call:[reportError] noreturn:[reportError]
comparison call:[Match,astOperand1,astOperand2,comparisonError,getnumchildren,isComparisonOp,isEnabled,isNumber,next,op,str,swap,toLongNumber,tokens,valueType] noreturn:[comparisonError,swap]
comparisonError global:[CWE398] call:[errmsg,reportError,str] noreturn:[reportError]
isOverlappingCond call:[Match,astOperand1,astOperand2,isCPP,isNegative,isNumber,isSameExpression,return,str,swap,toLongNumber] noreturn:[return,swap]
duplicateCondition call:[astOperand2,duplicateConditionError,getSymbolDatabase,hasKnownIntValue,isCPP,isEnabled,isExpressionChanged,isSameExpression,link,linkAt,next,simpleMatch,tokAt] noreturn:[duplicateConditionError]
duplicateConditionError global:[CWE398] call:[diag,emplace_back,reportError] noreturn:[reportError]
multiCondition call:[astOperand2,getSymbolDatabase,isCPP,isEnabled,isOppositeCond,isOverlappingCond,linenr,link,linkAt,next,oppositeElseIfConditionError,overlappingElseIfConditionError,simpleMatch,tokAt] noreturn:[oppositeElseIfConditionError,overlappingElseIfConditionError]
overlappingElseIfConditionError global:[CWE398] call:[diag,reportError,str] noreturn:[reportError]
oppositeElseIfConditionError global:[CWE398] call:[diag,emplace_back,linenr,reportError,str] noreturn:[reportError]
isNonConstFunctionCall call:[astOperand1,function,isConst,isFunctionConst,next,str,variable] noreturn:[astOperand1]
multiCondition2 call:[Match,astOperand1,astOperand2,astParent,begin,end,find,findmatch,findsimplematch,function,getSymbolDatabase,hasIfdef,hasKnownIntValue,identicalConditionAfterEarlyExitError,identicalInnerConditionError,insert,isAliased,isArgument,isCPP,isConst,isEnabled,isExpressionChangedAt,isIntegral,isLikelyStreamRead,isLocal,isName,isNonConstFunctionCall,isOppositeCond,isParameterChanged,isPointer,isReference,isSameExpression,isUnaryOp,isVariableChanged,isVariablesChanged,link,linkAt,next,oppositeInnerConditionError,previous,push_back,scope,simpleMatch,str,tokAt,valueType,varId,variable,visitAstNodes] noreturn:[astOperand1,astOperand2,astParent,findmatch,identicalInnerConditionError,linkAt,next,oppositeInnerConditionError,push_back,visitAstNodes]
innerSmtString call:[astOperand1,astTop,str] noreturn:[str]
oppositeInnerConditionError global:[CWE398] call:[diag,emplace_back,expressionString,innerSmtString,msg,reportError,s1,s2] noreturn:[reportError]
identicalInnerConditionError global:[CWE398] call:[diag,emplace_back,expressionString,innerSmtString,msg,reportError,s1,s2] noreturn:[reportError]
identicalConditionAfterEarlyExitError global:[CWE398] call:[astParent,cond,diag,emplace_back,expressionString,reportError,simpleMatch,valueType] noreturn:[reportError]
invertOperatorForOperandSwap
checkIntRelation call:[return]
checkFloatRelation call:[return]
getvalue3 < double > call:[return]
parseComparison call:[astOperand1,astOperand2,enumerator,invertOperatorForOperandSwap,isComparisonOp,isExpandedMacro,isFloat,isInt,isLiteral,str,toString] noreturn:[astOperand1,str,toString]
conditionString call:[astParent,isComparisonOp,isName,str,string]
conditionString call:[Match,astOperand1,astOperand2,conditionString,expressionString,isComparisonOp,isName,parseComparison,str] noreturn:[conditionString,expressionString]
checkIncorrectLogicOperator call:[Match,alwaysTrue,astIsFloat,astOperand1,astOperand2,checkFloatRelation,checkIntRelation,conditionString,expr1,expr2,expr3,expressionString,getSymbolDatabase,getvalue < double >,getvalue < long long >,getvalue < unsigned long long >,incorrectLogicOperatorError,isCPP,isEnabled,isFloat,isOppositeCond,isSameExpression,length,max,next,parseComparison,redundantConditionError,str,toDoubleNumber,toLongNumber] noreturn:[astOperand2,checkFloatRelation,checkIntRelation,incorrectLogicOperatorError,redundantConditionError]
incorrectLogicOperatorError global:[CWE570,CWE571] call:[diag,emplace_back,reportError] noreturn:[reportError]
redundantConditionError global:[CWE398] call:[diag,reportError] noreturn:[reportError]
checkModuloAlwaysTrueFalse call:[Match,astOperand1,astOperand2,getSymbolDatabase,isComparisonOp,isEnabled,isLessEqual,moduloAlwaysTrueFalseError,next,simpleMatch,str] noreturn:[astOperand2,moduloAlwaysTrueFalseError]
moduloAlwaysTrueFalseError global:[CWE398] call:[reportError] noreturn:[reportError]
countPar call:[next,str]
clarifyCondition call:[Match,astOperand1,astOperand2,astParent,clarifyConditionError,countPar,getSymbolDatabase,isC,isComparisonOp,isEnabled,isName,isNumber,isUnaryOp,link,nameToken,next,simpleMatch,str,strAt,tokAt,tokType,valueType,variable] noreturn:[clarifyConditionError,link]
clarifyConditionError global:[CWE398] call:[reportError] noreturn:[reportError]
alwaysTrueFalse call:[Match,alwaysTrueFalseError,astOperand1,astOperand2,astParent,astTop,comparisonNonZeroExpressionLessThanZero,diag,front,function,getSymbolDatabase,hasKnownIntValue,isArithmeticalOp,isCPP,isComparisonOp,isConstVarExpression,isConstexpr,isEnabled,isExpandedMacro,isNumber,isSameExpression,link,next,precedes,previous,simpleMatch,str,testIfNonZeroExpressionIsPositive,values,visitAstNodes] noreturn:[alwaysTrueFalseError,astOperand1,astOperand2,astParent]
alwaysTrueFalseError global:[CWE570,CWE571] call:[expressionString,getErrorPath,reportError,string] noreturn:[reportError]
checkInvalidTestForOverflow call:[Match,astOperand1,astOperand2,astSibling,getKnownIntValue,hasKnownIntValue,invalidTestForOverflow,isBinaryOp,isCPP,isEnabled,isIntegral,isNumber,isSameExpression,next,str,tokens,valueType,varId]
invalidTestForOverflow global:[uncheckedErrorConditionCWE] call:[expressionString,reportError,string] noreturn:[reportError]
checkPointerAdditionResultNotNull call:[astOperand1,astOperand2,getSymbolDatabase,getValue,hasKnownIntValue,isComparisonOp,isEnabled,isExpandedMacro,next,pointerAdditionResultNotNullError,str,valueType] noreturn:[astOperand1,astOperand2,pointerAdditionResultNotNullError]
pointerAdditionResultNotNullError call:[expressionString,reportError] noreturn:[reportError]
checkDuplicateConditionalAssign call:[Match,astOperand1,astOperand2,astTop,duplicateConditionalAssignError,getSymbolDatabase,isCPP,isEnabled,isSameExpression,link,next,nextAfterAstRightmostLeaf,previous,simpleMatch,str] noreturn:[duplicateConditionalAssignError]
duplicateConditionalAssignError global:[CWE398] call:[emplace_back,expressionString,reportError,str] noreturn:[emplace_back,reportError]
checkAssignmentInCondition call:[Match,assignmentInCondition,astOperand1,astParent,getSymbolDatabase,isEnabled,next,previous,simpleMatch,str,valueType] noreturn:[assignmentInCondition]
assignmentInCondition global:[CWE571] call:[expressionString,reportError] noreturn:[reportError]
checkCompareValueOutOfTypeRange call:[astOperand1,astOperand2,astSibling,compareValueOutOfTypeRangeError,getKnownIntValue,getSymbolDatabase,hasKnownIntValue,isBinaryOp,isComparisonOp,isEnabled,next,str,valueType] noreturn:[compareValueOutOfTypeRangeError]
compareValueOutOfTypeRangeError global:[CWE398] call:[reportError,to_string] noreturn:[reportError]
getvalue < double > call:[getvalue3 < double >,lowest,max] noreturn:[max]
getvalue < unsigned long long > call:[getvalue3 < unsigned long long >,lowest,max] noreturn:[max]
getvalue < long long > call:[getvalue3 < long long >,lowest,max] noreturn:[max]
getvalue3 < unsigned long long > call:[max,min]
getvalue3 < long long > call:[max,min]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
