operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
min_value
max_value call:[return]
Platform
isIntValue call:[max_value,min_value] noreturn:[max_value]
isIntValue call:[max_value]
isLongValue call:[max_value,min_value] noreturn:[max_value]
isLongValue call:[max_value]
isLongLongValue call:[max_value]
isWindowsPlatform
platformString call:[platformString] noreturn:[platformString]
platformString
unsignedCharMax call:[max_value] noreturn:[max_value]
signedCharMax call:[max_value] noreturn:[max_value]
signedCharMin call:[min_value] noreturn:[min_value]
operator() call:[caseInsensitiveStringCompare]
FileSettings
cppcheckDefines
isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
CWE
Standards
setC
getC
setCPP
getCPP
Error
Error
Error
getAllocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
getDeallocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
allocId call:[getAllocDealloc]
deallocId call:[getAllocDealloc]
setalloc
setdealloc
setrealloc
setnoreturn
ismemory call:[return] noreturn:[return]
ismemory call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
Container
getAction call:[end,find]
getYield call:[end,find]
ArgumentChecks
IteratorInfo
MinSize
Function
isboolargbad call:[getarg]
isargformatstr call:[getarg]
isargstrz call:[getarg]
validarg global:[emptyString] call:[getarg]
isInt call:[isInt] noreturn:[isInt]
getArgIteratorInfo call:[getarg]
argminsizes call:[getarg]
markupExtensions
isexporter call:[end,find] noreturn:[end]
isexportedprefix call:[end,find,isPrefix,return] noreturn:[return]
isexportedsuffix call:[end,find,isSuffix,return] noreturn:[return]
isreflection call:[end,find] noreturn:[end]
reflectionArgument call:[end,find]
podtype call:[end,find,return]
PlatformType
operator== call:[return] noreturn:[return]
operator!=
platform_type call:[end,find,return]
platform_type call:[end,find,platform_type,return]
addPrefix call:[insert] noreturn:[insert]
addSuffix call:[insert] noreturn:[insert]
isPrefix call:[end,find,return] noreturn:[return]
isSuffix call:[end,find,return] noreturn:[return]
CodeBlock
setStart
setEnd
setOffset
addBlock call:[insert] noreturn:[insert]
start
end
offset
isBlock call:[end,find] noreturn:[end]
getAllocDealloc call:[end,find,return]
getFileName
Suppression
Suppression
Suppression
operator=
operator<
isLocal call:[empty,find_first_of]
isSameParameters
TimerResultsIntf
TimerResultsData
seconds
TimerResults
Rule
SafeChecks
clear
configurationExcluded call:[compare,length]
posix call:[begin,end,find] noreturn:[end]
terminate
terminated
FileLocation
FileLocation
FileLocation
getinfo
setinfo
shortMessage
verboseMessage
symbolNames
ErrorLogger
ErrorLogger call:[close,is_open,plistFooter] noreturn:[close]
reportProgress
reportInfo call:[reportErr] noreturn:[reportErr]
plistFooter
assertEquals call:[assertEqualsFailed,str] noreturn:[assertEqualsFailed]
setVerbose
setMultiline
bughuntingReport
TestFixture
FwdAnalysis
Result
Result
operator()
operator()
operator()
operator() call:[abs]
operator()
Value
equalValue call:[sameToken]
visitValue call:[f]
operator() call:[compare] noreturn:[compare]
operator() call:[bind,move,ref,visitValue] noreturn:[visitValue]
compareValue call:[assert,bind,isSymbolicValue,move,ref,sameToken,visitValue]
operator== call:[equalValue]
operator!=
equalTo call:[bind,ref,visitValue]
decreaseRange call:[visitValue] noreturn:[visitValue]
invertBound
invertRange call:[decreaseRange,invertBound] noreturn:[decreaseRange]
isIntValue
isTokValue
isFloatValue
isMovedValue
isUninitValue
isContainerSizeValue
isLifetimeValue
isBufferSizeValue
isIteratorValue
isIteratorStartValue
isIteratorEndValue
isSymbolicValue
isLocalLifetimeValue
isArgumentLifetimeValue
isSubFunctionLifetimeValue
isNonValue call:[isLifetimeValue,isMovedValue,isUninitValue] noreturn:[isLifetimeValue]
setKnown
isKnown
setPossible
isPossible
isImpossible
setImpossible
setInconclusive
isInconclusive
changeKnownToPossible call:[isKnown]
errorSeverity
LifetimeToken
LifetimeToken
LifetimeToken
setAddressOf
setInconclusive
isClass call:[setFlag] noreturn:[setFlag]
isFunction call:[setFlag] noreturn:[setFlag]
isVariable call:[setFlag] noreturn:[setFlag]
isAlias call:[setFlag] noreturn:[setFlag]
isSpecialization call:[setFlag] noreturn:[setFlag]
isPartialSpecialization call:[setFlag] noreturn:[setFlag]
isForwardDeclaration call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
getFlag call:[return] noreturn:[return]
setFlag
operator==
token
token
scope
name
fullName
nameToken
paramEnd
paramEnd
isClass call:[getFlag] noreturn:[getFlag]
isFunction call:[getFlag] noreturn:[getFlag]
isVariable call:[getFlag] noreturn:[getFlag]
isAlias call:[getFlag] noreturn:[getFlag]
isSpecialization call:[getFlag] noreturn:[getFlag]
isPartialSpecialization call:[getFlag] noreturn:[getFlag]
isForwardDeclaration call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isSameFamily call:[return]
ScopeInfo2
TokenImpl
str call:[update_property_info] noreturn:[update_property_info]
str
tokAt call:[tokAt]
linkAt call:[linkAt]
simpleMatch call:[simpleMatch] noreturn:[simpleMatch]
valueType
argumentType call:[Match,astParent] noreturn:[astParent]
tokType
tokType call:[setFlag] noreturn:[setFlag]
isKeyword
isName call:[getFlag] noreturn:[getFlag]
isNameOnly
isLiteral call:[getFlag] noreturn:[getFlag]
isNumber
isEnumerator
isOp call:[isAssignmentOp,isConstOp,return] noreturn:[return]
isConstOp call:[isArithmeticalOp,return] noreturn:[return]
isExtendedOp call:[isConstOp]
isArithmeticalOp
isComparisonOp
isAssignmentOp
isBoolean
isIncDecOp
isBinaryOp call:[astOperand1,astOperand2]
isUnaryOp call:[astOperand1,astOperand2]
flags
flags
isUnsigned call:[getFlag] noreturn:[getFlag]
isUnsigned call:[setFlag] noreturn:[setFlag]
isSigned call:[getFlag] noreturn:[getFlag]
isSigned call:[setFlag] noreturn:[setFlag]
isPointerCompare call:[getFlag] noreturn:[getFlag]
isPointerCompare call:[setFlag] noreturn:[setFlag]
isLong call:[getFlag] noreturn:[getFlag]
isLong call:[setFlag] noreturn:[setFlag]
isStandardType call:[getFlag] noreturn:[getFlag]
isStandardType call:[setFlag] noreturn:[setFlag]
isExpandedMacro call:[getFlag] noreturn:[getFlag]
isExpandedMacro call:[setFlag] noreturn:[setFlag]
isCast call:[getFlag] noreturn:[getFlag]
isCast call:[setFlag] noreturn:[setFlag]
isAttributeConstructor call:[getFlag] noreturn:[getFlag]
isAttributeConstructor call:[setFlag] noreturn:[setFlag]
isAttributeDestructor call:[getFlag] noreturn:[getFlag]
isAttributeDestructor call:[setFlag] noreturn:[setFlag]
isAttributeUnused call:[getFlag] noreturn:[getFlag]
isAttributeUnused call:[setFlag] noreturn:[setFlag]
isAttributeUsed call:[getFlag] noreturn:[getFlag]
isAttributeUsed call:[setFlag] noreturn:[setFlag]
isAttributePure call:[getFlag] noreturn:[getFlag]
isAttributePure call:[setFlag] noreturn:[setFlag]
isAttributeConst call:[getFlag] noreturn:[getFlag]
isAttributeConst call:[setFlag] noreturn:[setFlag]
isAttributeNoreturn call:[getFlag] noreturn:[getFlag]
isAttributeNoreturn call:[setFlag] noreturn:[setFlag]
isAttributeNothrow call:[getFlag] noreturn:[getFlag]
isAttributeNothrow call:[setFlag] noreturn:[setFlag]
isAttributePacked call:[getFlag] noreturn:[getFlag]
isAttributePacked call:[setFlag] noreturn:[setFlag]
isAttributeNodiscard call:[getFlag] noreturn:[getFlag]
isAttributeNodiscard call:[setFlag] noreturn:[setFlag]
isAttributeMaybeUnused call:[getFlag] noreturn:[getFlag]
isAttributeMaybeUnused call:[setFlag] noreturn:[setFlag]
setCppcheckAttribute call:[setCppcheckAttribute] noreturn:[setCppcheckAttribute]
getCppcheckAttribute call:[getCppcheckAttribute] noreturn:[getCppcheckAttribute]
hasCppcheckAttributes
isControlFlowKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[setFlag] noreturn:[setFlag]
isComplex call:[getFlag] noreturn:[getFlag]
isComplex call:[setFlag] noreturn:[setFlag]
isEnumType call:[getFlag] noreturn:[getFlag]
isEnumType call:[setFlag] noreturn:[setFlag]
isAtAddress call:[getFlag] noreturn:[getFlag]
isAtAddress call:[setFlag] noreturn:[setFlag]
isIncompleteVar call:[getFlag] noreturn:[getFlag]
isIncompleteVar call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
isExternC call:[getFlag] noreturn:[getFlag]
isExternC call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclComma call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclComma call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclEq call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclEq call:[setFlag] noreturn:[setFlag]
isImplicitInt call:[getFlag] noreturn:[getFlag]
isImplicitInt call:[setFlag] noreturn:[setFlag]
isInline call:[getFlag] noreturn:[getFlag]
isInline call:[setFlag] noreturn:[setFlag]
isTemplate call:[getFlag] noreturn:[getFlag]
isTemplate call:[setFlag] noreturn:[setFlag]
isBitfield
bits
templateSimplifierPointers
templateSimplifierPointer call:[insert] noreturn:[insert]
setBits
isUtf8 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf16 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf32 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isCChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isCMultiChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isTemplateArg call:[getFlag] noreturn:[getFlag]
isTemplateArg call:[setFlag] noreturn:[setFlag]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findmatch call:[findmatch]
findmatch call:[findmatch]
fileIndex
fileIndex
linenr
linenr
column
column
next
previous
varId
varId call:[isStandardType,tokType,update_property_info] noreturn:[isStandardType,update_property_info]
exprId
exprId
forDebug
forDebugVarId call:[forDebug]
forDebugExprId call:[forDebug]
forPrintOut call:[forDebug]
link call:[update_property_info] noreturn:[update_property_info]
link
scope
scope
function
variable call:[tokType] noreturn:[tokType]
variable
type
enumerator
enumerator call:[tokType] noreturn:[tokType]
progressValue
originalName global:[emptyString]
values
originalName call:[string] noreturn:[string]
getKnownIntValue call:[front]
removeValues call:[remove_if] noreturn:[remove_if]
index
next
previous
getFlag call:[return] noreturn:[return]
setFlag
astOperand1
astOperand1
astOperand2
astOperand2
astParent
astParent
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astTop
astTop
clearAst
clearValueFlow
astString call:[astString] noreturn:[astString]
setCpp11init
isCpp11init
setSettings
getSettings
isC
isCPP
front
front
back
back
getFiles
find call:[find] noreturn:[find]
end call:[end] noreturn:[end]
map
getVarId
setTimerResults
isC call:[isC] noreturn:[isC]
isCPP call:[isCPP] noreturn:[isCPP]
setPreprocessor
getPreprocessor
codeWithTemplates
setSettings call:[setSettings] noreturn:[setSettings]
getSymbolDatabase
varIdCount
tokens call:[front] noreturn:[front]
isMaxTime
getSettings
newVarId
givenACodeSampleToTokenize call:[createTokens,iss,tokenize] noreturn:[createTokens,tokenize]
tokens call:[tokens] noreturn:[tokens]
SimpleSuppressor
reportOut call:[reportOut] noreturn:[reportOut]
reportErr call:[empty,isSuppressed,reportErr,toSuppressionsErrorMessage] noreturn:[reportErr]
TestToken
run call:[canFindMatchingBracketsInnerPair,canFindMatchingBracketsNeedsOpen,canFindMatchingBracketsOuterPair,canFindMatchingBracketsWithTooManyClosing,canFindMatchingBracketsWithTooManyOpening,charTypes,concatStr,deleteFirst,deleteLast,eraseTokens,expressionString,findClosingBracket,getCharAt,getStrLength,getStrSize,hasKnownIntValue,isArithmeticalOp,isAssignmentOp,isConstOp,isExtendedOp,isNameGuarantees1,isNameGuarantees2,isNameGuarantees3,isNameGuarantees4,isNameGuarantees5,isNameGuarantees6,isOp,isStandardType,literals,matchAny,matchBoolean,matchChar,matchCompOp,matchConstOp,matchNothingOrAnyNotElse,matchNumeric,matchOp,matchOr,matchSingleChar,matchStr,matchType,matchVarid,multiCompare,multiCompare2,multiCompare3,multiCompare4,multiCompare5,nextArgument,nextprevious,operators,prepareTest,setVerbose,strValue,stringTypes,updateProperties,while] noreturn:[canFindMatchingBracketsInnerPair,canFindMatchingBracketsNeedsOpen,canFindMatchingBracketsOuterPair,canFindMatchingBracketsWithTooManyClosing,canFindMatchingBracketsWithTooManyOpening,charTypes,concatStr,deleteFirst,deleteLast,eraseTokens,expressionString,findClosingBracket,getCharAt,getStrLength,getStrSize,hasKnownIntValue,isArithmeticalOp,isAssignmentOp,isConstOp,isExtendedOp,isNameGuarantees1,isNameGuarantees2,isNameGuarantees3,isNameGuarantees4,isNameGuarantees5,isNameGuarantees6,isOp,isStandardType,literals,matchAny,matchBoolean,matchChar,matchCompOp,matchConstOp,matchNothingOrAnyNotElse,matchNumeric,matchOp,matchOr,matchSingleChar,matchStr,matchType,matchVarid,multiCompare,multiCompare2,multiCompare3,multiCompare4,multiCompare5,nextArgument,nextprevious,operators,strValue,stringTypes,updateProperties,while]
nextprevious call:[Token,assertEquals,deleteTokens,insertToken,next,previous,str,tokAt] noreturn:[deleteTokens]
MatchCheck_ call:[Match,assert_,c_str,istr,next,tokenize,tokenizer,tokens] noreturn:[Match,assert_]
multiCompare call:[assertEquals,multiCompare,str]
multiCompare2 call:[Match,assertEquals,tokens,toks]
multiCompare3 call:[Match,assertEquals,num,numparen,tokens,toks,toks2,toks3,toks4]
multiCompare4 call:[Match,assertEquals,tokAt,tokType,tokens,var]
multiCompare5 call:[assertEquals,multiCompare,str]
charTypes call:[assertEquals,isCChar,isCMultiChar,isLong,isUtf16,isUtf32,isUtf8,str]
stringTypes call:[assertEquals,isCChar,isCMultiChar,isLong,isUtf16,isUtf32,isUtf8,str]
getStrLength call:[assertEquals,getStrLength,str]
getStrSize call:[assertEquals,getStrSize,sizeof,str]
getCharAt call:[assertEquals,getCharAt,str]
strValue call:[assertEquals,str,strValue]
concatStr call:[assertEquals,assert_,concatStr,isCChar,isLong,isUtf8,str,strValue]
deleteLast call:[assertEquals,deleteNext,insertToken,next,tok]
deleteFirst call:[assertEquals,deletePrevious,insertToken,previous,tok]
nextArgument call:[assertEquals,example1,example2,example3,example4,nextArgument,simpleMatch,tokAt,tokens]
eraseTokens call:[assertEquals,code,eraseTokens,next,stringifyList,tokAt,tokens]
matchAny call:[Match,assertEquals,tokens,varBitOrVar,varLogOrVar]
matchSingleChar call:[Match,assertEquals,singleChar,str,tokens]
matchNothingOrAnyNotElse call:[Match,assertEquals,empty_String,ifSemicolon,ifSemicolonElse,ifSemicolonSomething,justElse,tokens]
matchType call:[Match,assertEquals,isVar,noType1_c,noType1_cpp,noType2,tokens,type]
matchChar call:[Match,assertEquals,chr1,chr2,noChr,tokens]
matchCompOp call:[Match,assertEquals,comp1,comp2,noComp,tokens]
matchStr call:[Match,assertEquals,emptyStr,noStr1,noStr2,str,tokens]
matchVarid call:[Match,assertEquals,assertThrowFail,tokens,var,while] noreturn:[assertThrowFail]
matchNumeric call:[Match,assertEquals,binary,decimal,doublePrecision,floatingPoint,hexadecimal,negative,negativeNull,negativeSignedLong,nonNumeric,octal,positive,positiveNull,positiveSignedLong,signedLong,tokens,unsignedInt,unsignedLong,unsignedLongLong]
matchBoolean call:[Match,assertEquals,negative,positive,tokens,yes]
matchOr call:[Match,assertEquals,bitwiseOr,bitwiseOrAssignment,logicalAnd,logicalOr,simpleMatch,tokens]
append_vector call:[begin,end,insert] noreturn:[insert]
matchOp call:[MatchCheck_,append_vector,assertEquals,begin,end] noreturn:[assertEquals]
matchConstOp call:[MatchCheck_,append_vector,assertEquals,begin,end] noreturn:[assertEquals]
isArithmeticalOp call:[append_vector,assertEquals,begin,end,isArithmeticalOp,str] noreturn:[assertEquals]
isOp call:[append_vector,assertEquals,begin,end,isOp,str] noreturn:[assertEquals]
isConstOp call:[append_vector,assertEquals,begin,end,isConstOp,str] noreturn:[assertEquals]
isExtendedOp call:[append_vector,assertEquals,begin,end,isExtendedOp,str] noreturn:[assertEquals]
isAssignmentOp call:[append_vector,assertEquals,begin,end,isAssignmentOp,str] noreturn:[assertEquals]
operators call:[assertEquals,begin,end,str,tokType]
literals call:[assert_,str,tokType]
isStandardType call:[assertEquals,begin,emplace_back,end,isStandardType,str,varId] noreturn:[assertEquals]
updateProperties call:[assertEquals,isName,isNumber,str]
isNameGuarantees1 call:[assertEquals,isName,str]
isNameGuarantees2 call:[assertEquals,isName,str]
isNameGuarantees3 call:[assertEquals,isName,str]
isNameGuarantees4 call:[assertEquals,isName,isNumber,str]
isNameGuarantees5 call:[assertEquals,isName,isNumber,str]
isNameGuarantees6 call:[assertEquals,isName,str]
canFindMatchingBracketsNeedsOpen call:[assert_,findClosingBracket,tokens,var]
canFindMatchingBracketsInnerPair call:[assertEquals,assert_,findClosingBracket,str,tokAt,tokens,var]
canFindMatchingBracketsOuterPair call:[assertEquals,assert_,findClosingBracket,str,tokAt,tokens,var]
canFindMatchingBracketsWithTooManyClosing call:[assertEquals,assert_,findClosingBracket,next,str,tokAt,tokens,var]
canFindMatchingBracketsWithTooManyOpening call:[assert_,findClosingBracket,next,str,tokAt,tokens,var]
findClosingBracket call:[assert_,findClosingBracket,next,simpleMatch,tokens,var]
expressionString call:[assertEquals,data3,data4,data5,data6,expressionString,findsimplematch,next,tokAt,tokens,var1,var2]
hasKnownIntValue call:[addValue,assertEquals,hasKnownIntValue,setKnown,v1,v2]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
