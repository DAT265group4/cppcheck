isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
CWE
operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
value call:[InternalError,isFloat,isInt,isIntHex,size,toDoubleNumber,toLongNumber] noreturn:[InternalError]
str call:[isinf,isnan,precision,ret,return,size,str,substr] noreturn:[str,substr]
promote call:[isFloat,isInt]
calc call:[InternalError,abs,getDoubleValue,isFloat,min,promote,temp] noreturn:[InternalError]
compare call:[getDoubleValue,isFloat,promote,temp]
add call:[isInt,temp]
shiftLeft call:[InternalError,isInt,ret] noreturn:[InternalError]
shiftRight call:[InternalError,isInt,ret] noreturn:[InternalError]
toULongNumber call:[InternalError,atof,c_str,isBin,isFloat,isIntHex,isOct,length,max,stoull,what] noreturn:[InternalError,max]
encodeMultiChar
normalizeCharacterLiteral call:[InternalError,isOctalDigit,push_back,size,toLongNumber,toULongNumber] noreturn:[InternalError,push_back]
toLongNumber call:[InternalError,characterLiteralToLL,isBin,isCharLiteral,isFloat,isIntHex,isOct,length,max,min,return,stoull,toDoubleNumber,what] noreturn:[InternalError,characterLiteralToLL,max,min]
myStod call:[begin,digitval,find,int,pow,return,tolower] noreturn:[pow]
floatHexToDoubleNumber call:[back,begin,end,find_first_of,myStod,pow]
toDoubleNumber call:[InternalError,characterLiteralToLL,classic,floatHexToDoubleNumber,imbue,isCharLiteral,isFloatHex,isIntHex,isNullValue,istr,toLongNumber,what] noreturn:[InternalError,characterLiteralToLL,floatHexToDoubleNumber]
toString < double > call:[find,precision,str] noreturn:[str]
isFloat call:[isDecimalFloat,isFloatHex] noreturn:[isFloatHex]
isDecimalFloat call:[begin,empty,end,isdigit,return] noreturn:[return]
isNegative call:[empty,return] noreturn:[return]
isPositive call:[empty,isNegative] noreturn:[isNegative]
isValidIntegerSuffixIt call:[return] noreturn:[return]
isValidIntegerSuffix call:[begin,end,isValidIntegerSuffixIt] noreturn:[isValidIntegerSuffixIt]
isOct call:[begin,empty,end,isOctalDigit,isValidIntegerSuffixIt] noreturn:[isValidIntegerSuffixIt]
isIntHex call:[begin,empty,end,isValidIntegerSuffixIt,isxdigit] noreturn:[isValidIntegerSuffixIt]
isFloatHex call:[begin,empty,end,isdigit,isxdigit,return]
isBin call:[begin,empty,end,isValidIntegerSuffixIt] noreturn:[isValidIntegerSuffixIt]
isDec call:[begin,empty,end,isValidIntegerSuffixIt,isdigit] noreturn:[isValidIntegerSuffixIt]
isInt call:[isBin,isDec,isIntHex,isOct] noreturn:[isBin]
getSuffix call:[size]
intsuffix call:[empty,getSuffix]
add call:[intsuffix,isInt,toDoubleNumber,toLongNumber,toString < double >] noreturn:[intsuffix,toString < double >]
subtract call:[intsuffix,isInt,toDoubleNumber,toLongNumber,toString < double >] noreturn:[intsuffix,toString < double >]
incdec call:[InternalError,add,string,subtract] noreturn:[InternalError,add,subtract]
divide call:[InternalError,abs,intsuffix,isInt,isNullValue,isPositive,min,toDoubleNumber,toLongNumber,toString < double >] noreturn:[InternalError,intsuffix,toString < double >]
multiply call:[intsuffix,isInt,toDoubleNumber,toLongNumber,toString < double >] noreturn:[intsuffix,toString < double >]
mod call:[InternalError,fmod,intsuffix,isInt,toDoubleNumber,toLongNumber,toString < double >] noreturn:[InternalError,intsuffix,toString < double >]
calculate call:[InternalError,add,divide,intsuffix,mod,multiply,string,subtract,toLongNumber,toString < double >] noreturn:[InternalError]
sin call:[sin,toDoubleNumber,toString < double >] noreturn:[toString < double >]
cos call:[cos,toDoubleNumber,toString < double >] noreturn:[toString < double >]
tan call:[tan,toDoubleNumber,toString < double >] noreturn:[toString < double >]
abs call:[isNegative,length,substr] noreturn:[substr]
isEqual call:[toDoubleNumber,toString < double >] noreturn:[toString < double >]
isNotEqual call:[isEqual] noreturn:[isEqual]
isGreater call:[toDoubleNumber] noreturn:[toDoubleNumber]
isGreaterEqual call:[toDoubleNumber] noreturn:[toDoubleNumber]
isLess call:[toDoubleNumber] noreturn:[toDoubleNumber]
isLessEqual call:[toDoubleNumber] noreturn:[toDoubleNumber]
isNullValue call:[empty,isFloat,isFloatHex,isInt,isIntHex,isdigit,isxdigit]
isOctalDigit call:[return] noreturn:[return]
isDigitSeparator call:[isDigitSeparator,isxdigit,size]
operator+ call:[calc] noreturn:[calc]
operator- call:[calc] noreturn:[calc]
operator* call:[calc] noreturn:[calc]
operator/ call:[calc] noreturn:[calc]
operator% call:[calc] noreturn:[calc]
operator& call:[calc] noreturn:[calc]
operator| call:[calc] noreturn:[calc]
operator^ call:[calc] noreturn:[calc]
operator<< call:[shiftLeft] noreturn:[shiftLeft]
operator>> call:[shiftRight] noreturn:[shiftRight]
