CWE
Check
Check call:[instances,remove] noreturn:[remove]
name
FileInfo
FileInfo
toString call:[string] noreturn:[string]
getFileInfo
loadFileInfoFromXml
analyseWholeProgram
reportError call:[CWE,reportError] noreturn:[reportError]
reportError call:[callstack,reportError] noreturn:[reportError]
reportError call:[CWE,reportError] noreturn:[reportError]
CheckUnusedVar
CheckUnusedVar
runChecks call:[checkFunctionVariableUsage,checkStructMemberUsage,checkUnusedVar] noreturn:[checkFunctionVariableUsage]
getErrorMessages call:[allocatedButUnusedVariableError,c,unassignedVariableError,unreadVariableError,unusedStructMemberError,unusedVariableError] noreturn:[unusedStructMemberError]
myName
classInfo
setDirectives
getDirectives
setFile0
operator()
operator()
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
contains call:[begin,end,find] noreturn:[end]
operator()
endsWith call:[back,empty]
endsWith call:[compare,return,size]
endsWith call:[endsWith] noreturn:[endsWith]
isPrefixStringCharLiteral call:[compare,endsWith,length,size]
isStringCharLiteral call:[isPrefixStringCharLiteral]
isStringLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
isCharLiteral call:[isStringCharLiteral] noreturn:[isStringCharLiteral]
getStringCharLiteral call:[find,size,substr] noreturn:[substr]
getStringLiteral call:[getStringCharLiteral,isStringLiteral] noreturn:[getStringCharLiteral]
getCharLiteral call:[getStringCharLiteral,isCharLiteral] noreturn:[getStringCharLiteral]
getOrdinalText
min_value
max_value call:[return]
Platform
isIntValue call:[max_value,min_value] noreturn:[max_value]
isIntValue call:[max_value]
isLongValue call:[max_value,min_value] noreturn:[max_value]
isLongValue call:[max_value]
isLongLongValue call:[max_value]
isWindowsPlatform
platformString call:[platformString] noreturn:[platformString]
platformString
unsignedCharMax call:[max_value] noreturn:[max_value]
signedCharMax call:[max_value] noreturn:[max_value]
signedCharMin call:[min_value] noreturn:[min_value]
operator() call:[caseInsensitiveStringCompare]
FileSettings
cppcheckDefines
isInt
isFloat
getDoubleValue call:[isFloat]
toString call:[str] noreturn:[str]
Standards
setC
getC
setCPP
getCPP
Error
Error
Error
getAllocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
getDeallocFuncInfo call:[getAllocDealloc] noreturn:[getAllocDealloc]
allocId call:[getAllocDealloc]
deallocId call:[getAllocDealloc]
setalloc
setdealloc
setrealloc
setnoreturn
ismemory call:[return] noreturn:[return]
ismemory call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
isresource call:[return] noreturn:[return]
Container
getAction call:[end,find]
getYield call:[end,find]
ArgumentChecks
IteratorInfo
MinSize
Function
isboolargbad call:[getarg]
isargformatstr call:[getarg]
isargstrz call:[getarg]
validarg global:[emptyString] call:[getarg]
isInt call:[isInt] noreturn:[isInt]
getArgIteratorInfo call:[getarg]
argminsizes call:[getarg]
markupExtensions
isexporter call:[end,find] noreturn:[end]
isexportedprefix call:[end,find,isPrefix,return] noreturn:[return]
isexportedsuffix call:[end,find,isSuffix,return] noreturn:[return]
isreflection call:[end,find] noreturn:[end]
reflectionArgument call:[end,find]
podtype call:[end,find,return]
PlatformType
operator== call:[return] noreturn:[return]
operator!=
platform_type call:[end,find,return]
platform_type call:[end,find,platform_type,return]
addPrefix call:[insert] noreturn:[insert]
addSuffix call:[insert] noreturn:[insert]
isPrefix call:[end,find,return] noreturn:[return]
isSuffix call:[end,find,return] noreturn:[return]
CodeBlock
setStart
setEnd
setOffset
addBlock call:[insert] noreturn:[insert]
start
end
offset
isBlock call:[end,find] noreturn:[end]
getAllocDealloc call:[end,find,return]
getFileName
Suppression
Suppression
Suppression
operator=
operator<
isLocal call:[empty,find_first_of]
isSameParameters
TimerResultsIntf
TimerResultsData
seconds
TimerResults
Rule
SafeChecks
clear
configurationExcluded call:[compare,length]
posix call:[begin,end,find] noreturn:[end]
terminate
terminated
FileLocation
FileLocation
FileLocation
getinfo
setinfo
shortMessage
verboseMessage
symbolNames
ErrorLogger
ErrorLogger call:[close,is_open,plistFooter] noreturn:[close]
reportProgress
reportInfo call:[reportErr] noreturn:[reportErr]
plistFooter
assertEquals call:[assertEqualsFailed,str] noreturn:[assertEqualsFailed]
setVerbose
setMultiline
bughuntingReport
TestFixture
FwdAnalysis
Result
Result
operator()
operator()
operator()
operator() call:[abs]
operator()
Value
equalValue call:[sameToken]
visitValue call:[f]
operator() call:[compare] noreturn:[compare]
operator() call:[bind,move,ref,visitValue] noreturn:[visitValue]
compareValue call:[assert,bind,isSymbolicValue,move,ref,sameToken,visitValue]
operator== call:[equalValue]
operator!=
equalTo call:[bind,ref,visitValue]
decreaseRange call:[visitValue] noreturn:[visitValue]
invertBound
invertRange call:[decreaseRange,invertBound] noreturn:[decreaseRange]
isIntValue
isTokValue
isFloatValue
isMovedValue
isUninitValue
isContainerSizeValue
isLifetimeValue
isBufferSizeValue
isIteratorValue
isIteratorStartValue
isIteratorEndValue
isSymbolicValue
isLocalLifetimeValue
isArgumentLifetimeValue
isSubFunctionLifetimeValue
isNonValue call:[isLifetimeValue,isMovedValue,isUninitValue] noreturn:[isLifetimeValue]
setKnown
isKnown
setPossible
isPossible
isImpossible
setImpossible
setInconclusive
isInconclusive
changeKnownToPossible call:[isKnown]
errorSeverity
LifetimeToken
LifetimeToken
LifetimeToken
setAddressOf
setInconclusive
isClass call:[setFlag] noreturn:[setFlag]
isFunction call:[setFlag] noreturn:[setFlag]
isVariable call:[setFlag] noreturn:[setFlag]
isAlias call:[setFlag] noreturn:[setFlag]
isSpecialization call:[setFlag] noreturn:[setFlag]
isPartialSpecialization call:[setFlag] noreturn:[setFlag]
isForwardDeclaration call:[setFlag] noreturn:[setFlag]
isVariadic call:[setFlag] noreturn:[setFlag]
isFriend call:[setFlag] noreturn:[setFlag]
getFlag call:[return] noreturn:[return]
setFlag
operator==
token
token
scope
name
fullName
nameToken
paramEnd
paramEnd
isClass call:[getFlag] noreturn:[getFlag]
isFunction call:[getFlag] noreturn:[getFlag]
isVariable call:[getFlag] noreturn:[getFlag]
isAlias call:[getFlag] noreturn:[getFlag]
isSpecialization call:[getFlag] noreturn:[getFlag]
isPartialSpecialization call:[getFlag] noreturn:[getFlag]
isForwardDeclaration call:[getFlag] noreturn:[getFlag]
isVariadic call:[getFlag] noreturn:[getFlag]
isFriend call:[getFlag] noreturn:[getFlag]
isSameFamily call:[return]
ScopeInfo2
TokenImpl
str call:[update_property_info] noreturn:[update_property_info]
str
tokAt call:[tokAt]
linkAt call:[linkAt]
simpleMatch call:[simpleMatch] noreturn:[simpleMatch]
valueType
argumentType call:[Match,astParent] noreturn:[astParent]
tokType
tokType call:[setFlag] noreturn:[setFlag]
isKeyword
isName call:[getFlag] noreturn:[getFlag]
isNameOnly
isLiteral call:[getFlag] noreturn:[getFlag]
isNumber
isEnumerator
isOp call:[isAssignmentOp,isConstOp,return] noreturn:[return]
isConstOp call:[isArithmeticalOp,return] noreturn:[return]
isExtendedOp call:[isConstOp]
isArithmeticalOp
isComparisonOp
isAssignmentOp
isBoolean
isIncDecOp
isBinaryOp call:[astOperand1,astOperand2]
isUnaryOp call:[astOperand1,astOperand2]
flags
flags
isUnsigned call:[getFlag] noreturn:[getFlag]
isUnsigned call:[setFlag] noreturn:[setFlag]
isSigned call:[getFlag] noreturn:[getFlag]
isSigned call:[setFlag] noreturn:[setFlag]
isPointerCompare call:[getFlag] noreturn:[getFlag]
isPointerCompare call:[setFlag] noreturn:[setFlag]
isLong call:[getFlag] noreturn:[getFlag]
isLong call:[setFlag] noreturn:[setFlag]
isStandardType call:[getFlag] noreturn:[getFlag]
isStandardType call:[setFlag] noreturn:[setFlag]
isExpandedMacro call:[getFlag] noreturn:[getFlag]
isExpandedMacro call:[setFlag] noreturn:[setFlag]
isCast call:[getFlag] noreturn:[getFlag]
isCast call:[setFlag] noreturn:[setFlag]
isAttributeConstructor call:[getFlag] noreturn:[getFlag]
isAttributeConstructor call:[setFlag] noreturn:[setFlag]
isAttributeDestructor call:[getFlag] noreturn:[getFlag]
isAttributeDestructor call:[setFlag] noreturn:[setFlag]
isAttributeUnused call:[getFlag] noreturn:[getFlag]
isAttributeUnused call:[setFlag] noreturn:[setFlag]
isAttributeUsed call:[getFlag] noreturn:[getFlag]
isAttributeUsed call:[setFlag] noreturn:[setFlag]
isAttributePure call:[getFlag] noreturn:[getFlag]
isAttributePure call:[setFlag] noreturn:[setFlag]
isAttributeConst call:[getFlag] noreturn:[getFlag]
isAttributeConst call:[setFlag] noreturn:[setFlag]
isAttributeNoreturn call:[getFlag] noreturn:[getFlag]
isAttributeNoreturn call:[setFlag] noreturn:[setFlag]
isAttributeNothrow call:[getFlag] noreturn:[getFlag]
isAttributeNothrow call:[setFlag] noreturn:[setFlag]
isAttributePacked call:[getFlag] noreturn:[getFlag]
isAttributePacked call:[setFlag] noreturn:[setFlag]
isAttributeNodiscard call:[getFlag] noreturn:[getFlag]
isAttributeNodiscard call:[setFlag] noreturn:[setFlag]
isAttributeMaybeUnused call:[getFlag] noreturn:[getFlag]
isAttributeMaybeUnused call:[setFlag] noreturn:[setFlag]
setCppcheckAttribute call:[setCppcheckAttribute] noreturn:[setCppcheckAttribute]
getCppcheckAttribute call:[getCppcheckAttribute] noreturn:[getCppcheckAttribute]
hasCppcheckAttributes
isControlFlowKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[getFlag] noreturn:[getFlag]
isOperatorKeyword call:[setFlag] noreturn:[setFlag]
isComplex call:[getFlag] noreturn:[getFlag]
isComplex call:[setFlag] noreturn:[setFlag]
isEnumType call:[getFlag] noreturn:[getFlag]
isEnumType call:[setFlag] noreturn:[setFlag]
isAtAddress call:[getFlag] noreturn:[getFlag]
isAtAddress call:[setFlag] noreturn:[setFlag]
isIncompleteVar call:[getFlag] noreturn:[getFlag]
isIncompleteVar call:[setFlag] noreturn:[setFlag]
isConstexpr call:[getFlag] noreturn:[getFlag]
isConstexpr call:[setFlag] noreturn:[setFlag]
isExternC call:[getFlag] noreturn:[getFlag]
isExternC call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclComma call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclComma call:[setFlag] noreturn:[setFlag]
isSplittedVarDeclEq call:[getFlag] noreturn:[getFlag]
isSplittedVarDeclEq call:[setFlag] noreturn:[setFlag]
isImplicitInt call:[getFlag] noreturn:[getFlag]
isImplicitInt call:[setFlag] noreturn:[setFlag]
isInline call:[getFlag] noreturn:[getFlag]
isInline call:[setFlag] noreturn:[setFlag]
isTemplate call:[getFlag] noreturn:[getFlag]
isTemplate call:[setFlag] noreturn:[setFlag]
isBitfield
bits
templateSimplifierPointers
templateSimplifierPointer call:[insert] noreturn:[insert]
setBits
isUtf8 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf16 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isUtf32 call:[isPrefixStringCharLiteral,return] noreturn:[return]
isCChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isCMultiChar call:[isPrefixStringCharLiteral,length,return] noreturn:[return]
isTemplateArg call:[getFlag] noreturn:[getFlag]
isTemplateArg call:[setFlag] noreturn:[setFlag]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findsimplematch call:[findsimplematch] noreturn:[findsimplematch]
findsimplematch call:[findsimplematch]
findmatch call:[findmatch]
findmatch call:[findmatch]
fileIndex
fileIndex
linenr
linenr
column
column
next
previous
varId
varId call:[isStandardType,tokType,update_property_info] noreturn:[isStandardType,update_property_info]
exprId
exprId
forDebug
forDebugVarId call:[forDebug]
forDebugExprId call:[forDebug]
forPrintOut call:[forDebug]
link call:[update_property_info] noreturn:[update_property_info]
link
scope
scope
function
variable call:[tokType] noreturn:[tokType]
variable
type
enumerator
enumerator call:[tokType] noreturn:[tokType]
progressValue
originalName global:[emptyString]
values
originalName call:[string] noreturn:[string]
getKnownIntValue call:[front]
removeValues call:[remove_if] noreturn:[remove_if]
index
next
previous
getFlag call:[return] noreturn:[return]
setFlag
astOperand1
astOperand1
astOperand2
astOperand2
astParent
astParent
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astSibling call:[astOperand1,astOperand2,astParent] noreturn:[astOperand1,astOperand2]
astTop
astTop
clearAst
clearValueFlow
astString call:[astString] noreturn:[astString]
setCpp11init
isCpp11init
setSettings
getSettings
isC
isCPP
front
front
back
back
getFiles
find call:[find] noreturn:[find]
end call:[end] noreturn:[end]
map
getVarId
setTimerResults
isC call:[isC] noreturn:[isC]
isCPP call:[isCPP] noreturn:[isCPP]
setPreprocessor
getPreprocessor
codeWithTemplates
setSettings call:[setSettings] noreturn:[setSettings]
getSymbolDatabase
varIdCount
tokens call:[front] noreturn:[front]
isMaxTime
getSettings
newVarId
TestUnusedVar
run call:[argument,argumentClass,bracesInitCpp11,c_str,chainedAssignment,cleanFunction,complainMissingLib,crash1,crash2,emptyclass,emptystruct,enable,escapeAlias,globalData,isRecordTypeWithoutSideEffects,lambdaFunction,load,localVarClass,localVarSmartPtr,localVarStd,localvar1,localvar10,localvar11,localvar12,localvar13,localvar14,localvar15,localvar16,localvar17,localvar18,localvar19,localvar2,localvar20,localvar21,localvar22,localvar23,localvar24,localvar25,localvar26,localvar27,localvar28,localvar29,localvar3,localvar30,localvar31,localvar32,localvar33,localvar34,localvar35,localvar36,localvar37,localvar38,localvar39,localvar4,localvar40,localvar41,localvar42,localvar43,localvar44,localvar45,localvar46,localvar47,localvar48,localvar49,localvar5,localvar50,localvar51,localvar52,localvar53,localvar54,localvar55,localvar56,localvar57,localvar58,localvar59,localvar6,localvar60,localvar8,localvar9,localvarAddr,localvarAnd,localvarAssignInWhile,localvarCast,localvarClass,localvarCpp11Initialization,localvarCppInitialization,localvarDeclaredInIf,localvarDelete,localvarFor,localvarForEach,localvarFuncPtr,localvarFunction,localvarIf,localvarIfElse,localvarIfNOT,localvarInvert,localvarLambda,localvarNULL,localvarOp,localvarOpAssign,localvarRangeBasedFor,localvarShift1,localvarShift3,localvarStruct1,localvarStruct10,localvarStruct11,localvarStruct12,localvarStruct2,localvarStruct3,localvarStruct5,localvarStruct6,localvarStruct7,localvarStruct8,localvarStruct9,localvarStructArray,localvarSwitch,localvarTemplate,localvarUnion1,localvarUnused,localvarUnusedGoto,localvaralias1,localvaralias10,localvaralias11,localvaralias12,localvaralias13,localvaralias14,localvaralias15,localvaralias16,localvaralias17,localvaralias18,localvaralias2,localvaralias3,localvaralias4,localvaralias5,localvaralias6,localvaralias7,localvaralias8,localvaralias9,localvararray1,localvararray2,localvararray3,localvararray4,localvararray5,localvarasm,localvarconst1,localvarconst2,localvardynamic1,localvardynamic2,localvardynamic3,localvarextern,localvarloops,localvarmaybeunused,localvarreturn,localvarstatic,localvarstring1,localvarstring2,localvarthrow,namespaces,prepareTest,setVerbose,structmember1,structmember10,structmember11,structmember12,structmember13,structmember14,structmember15,structmember16,structmember2,structmember3,structmember4,structmember5,structmember6,structmember7,structmember8,structmember9,structmember_extern,structmember_sizeof,usingNamespace,volatileData,while] noreturn:[argument,argumentClass,bracesInitCpp11,chainedAssignment,cleanFunction,crash1,crash2,emptyclass,emptystruct,escapeAlias,globalData,isRecordTypeWithoutSideEffects,lambdaFunction,localVarClass,localVarSmartPtr,localVarStd,localvar1,localvar10,localvar11,localvar12,localvar13,localvar14,localvar15,localvar16,localvar17,localvar18,localvar19,localvar2,localvar20,localvar21,localvar22,localvar23,localvar24,localvar25,localvar26,localvar27,localvar28,localvar29,localvar3,localvar30,localvar31,localvar32,localvar33,localvar34,localvar35,localvar36,localvar37,localvar38,localvar39,localvar4,localvar40,localvar41,localvar42,localvar43,localvar44,localvar45,localvar46,localvar47,localvar48,localvar49,localvar5,localvar50,localvar51,localvar52,localvar53,localvar54,localvar55,localvar56,localvar57,localvar58,localvar59,localvar6,localvar60,localvar8,localvar9,localvarAddr,localvarAnd,localvarAssignInWhile,localvarCast,localvarClass,localvarCpp11Initialization,localvarCppInitialization,localvarDeclaredInIf,localvarDelete,localvarFor,localvarForEach,localvarFuncPtr,localvarFunction,localvarIf,localvarIfElse,localvarIfNOT,localvarInvert,localvarLambda,localvarNULL,localvarOp,localvarOpAssign,localvarRangeBasedFor,localvarShift1,localvarShift3,localvarStruct1,localvarStruct10,localvarStruct11,localvarStruct12,localvarStruct2,localvarStruct3,localvarStruct5,localvarStruct6,localvarStruct7,localvarStruct8,localvarStruct9,localvarStructArray,localvarSwitch,localvarTemplate,localvarUnion1,localvarUnused,localvarUnusedGoto,localvaralias1,localvaralias10,localvaralias11,localvaralias12,localvaralias13,localvaralias14,localvaralias15,localvaralias16,localvaralias17,localvaralias18,localvaralias2,localvaralias3,localvaralias4,localvaralias5,localvaralias6,localvaralias7,localvaralias8,localvaralias9,localvararray1,localvararray2,localvararray3,localvararray4,localvararray5,localvarasm,localvarconst1,localvarconst2,localvardynamic1,localvardynamic2,localvardynamic3,localvarextern,localvarloops,localvarmaybeunused,localvarreturn,localvarstatic,localvarstring1,localvarstring2,localvarthrow,namespaces,structmember1,structmember10,structmember11,structmember12,structmember13,structmember14,structmember15,structmember16,structmember2,structmember3,structmember4,structmember5,structmember6,structmember7,structmember8,structmember9,structmember_extern,structmember_sizeof,usingNamespace,volatileData,while]
checkStructMemberUsage_ global:[errout] call:[assert_,checkStructMemberUsage,checkUnusedVar,istr,preprocessor,setDirectives,setPreprocessor,str,tokenize,tokenizer] noreturn:[checkStructMemberUsage,setDirectives]
isRecordTypeWithoutSideEffects global:[errout] call:[assertEquals,functionVariableUsage_,str,todoAssertEquals]
cleanFunction global:[errout] call:[assertEquals,functionVariableUsage_,str]
emptyclass global:[errout] call:[assertEquals,functionVariableUsage_,str]
emptystruct global:[errout] call:[assertEquals,functionVariableUsage_,str]
structmember1 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember2 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember3 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember4 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember5 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember6 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember7 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember8 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember9 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember10 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember11 global:[errout] call:[assertEquals,checkStructMemberUsage_,str,todoAssertEquals] noreturn:[todoAssertEquals]
structmember12 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember13 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember14 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember15 global:[errout] call:[assertEquals,checkStructMemberUsage_,emplace_back,str]
structmember_extern global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember_sizeof global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
structmember16 global:[errout] call:[assertEquals,checkStructMemberUsage_,str]
functionVariableUsage_ global:[errout] call:[assert_,checkFunctionVariableUsage,checkUnusedVar,istr,str,tokenize,tokenizer] noreturn:[checkFunctionVariableUsage]
localvar1 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar2 global:[errout] call:[assertEquals,functionVariableUsage_,str,todoAssertEquals]
localvar3 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar4 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar5 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar6 global:[errout] call:[assertEquals,functionVariableUsage_,str,todoAssertEquals] noreturn:[todoAssertEquals]
localvar8 global:[errout] call:[assertEquals,functionVariableUsage_,str,todoAssertEquals]
localvar9 call:[functionVariableUsage_] noreturn:[functionVariableUsage_]
localvar10 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar11 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar12 global:[errout] call:[assertEquals,functionVariableUsage_,str,todoAssertEquals] noreturn:[todoAssertEquals]
localvar13 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar14 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar15 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar16 global:[errout] call:[assertEquals,functionVariableUsage_,str,todoAssertEquals]
localvar17 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar18 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar19 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar20 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar21 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar22 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar23 call:[functionVariableUsage_] noreturn:[functionVariableUsage_]
localvar24 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar25 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar26 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar27 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar28 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar29 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar30 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar31 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar32 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar33 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar34 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar35 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar36 global:[errout] call:[assertEquals,functionVariableUsage_,str,todoAssertEquals] noreturn:[todoAssertEquals]
localvar37 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar38 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar39 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar40 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar41 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar42 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar43 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar44 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar45 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar46 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar47 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar48 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar49 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar50 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar51 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar52 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar53 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar54 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar55 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar56 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar57 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar58 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar59 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvar60 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarloops global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias1 global:[errout] call:[assertEquals,functionVariableUsage_,str] noreturn:[functionVariableUsage_]
localvaralias2 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias3 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias4 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias5 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias6 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias7 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias8 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias9 global:[errout] call:[assertEquals,functionVariableUsage_,str] noreturn:[functionVariableUsage_]
localvaralias10 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias11 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias12 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias13 global:[errout] call:[assertEquals,functionVariableUsage_,str,todoAssertEquals] noreturn:[todoAssertEquals]
localvaralias14 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias15 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias16 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias17 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvaralias18 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarasm global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStruct1 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStruct2 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStruct3 global:[errout] call:[functionVariableUsage_,str,todoAssertEquals] noreturn:[todoAssertEquals]
localvarStruct5 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStruct6 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStruct7 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStruct8 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStruct9 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStruct10 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStruct11 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStruct12 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarStructArray global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarUnion1 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarOp global:[errout] call:[assertEquals,c_str,code,functionVariableUsage_,str,string]
localvarInvert global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarIf global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarIfElse global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarDeclaredInIf global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarOpAssign global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarFor global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarForEach global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarShift1 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarShift3 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarCast global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarClass global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarUnused global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarFunction global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarstatic global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarextern global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvardynamic1 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvardynamic2 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvardynamic3 call:[functionVariableUsage_] noreturn:[functionVariableUsage_]
localvararray1 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvararray2 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvararray3 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvararray4 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvararray5 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarstring1 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarstring2 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarconst1 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarconst2 global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarreturn global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarmaybeunused global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarthrow global:[errout] call:[assertEquals,functionVariableUsage_,str]
localVarStd global:[errout] call:[assertEquals,functionVariableUsage_,str]
localVarClass global:[errout] call:[assertEquals,functionVariableUsage_,str]
localVarSmartPtr global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarIfNOT global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarAnd global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarSwitch global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarNULL global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarUnusedGoto global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarLambda global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarCppInitialization global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarCpp11Initialization global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarRangeBasedFor global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarAssignInWhile global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarTemplate global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarFuncPtr global:[errout] call:[assertEquals,functionVariableUsage_,str,todoAssertEquals]
localvarAddr global:[errout] call:[assertEquals,functionVariableUsage_,str]
localvarDelete global:[errout] call:[assertEquals,functionVariableUsage_,str]
chainedAssignment global:[errout] call:[assertEquals,functionVariableUsage_,str]
crash1 call:[functionVariableUsage_] noreturn:[functionVariableUsage_]
crash2 call:[functionVariableUsage_] noreturn:[functionVariableUsage_]
usingNamespace global:[errout] call:[assertEquals,functionVariableUsage_,str]
lambdaFunction global:[errout] call:[assertEquals,functionVariableUsage_,str,todoAssertEquals] noreturn:[todoAssertEquals]
namespaces global:[errout] call:[assertEquals,functionVariableUsage_,str]
bracesInitCpp11 global:[errout] call:[assertEquals,functionVariableUsage_,str]
argument global:[errout] call:[assertEquals,functionVariableUsage_,str]
argumentClass global:[errout] call:[assertEquals,functionVariableUsage_,str]
escapeAlias global:[errout] call:[assertEquals,functionVariableUsage_,str]
volatileData global:[errout] call:[assertEquals,functionVariableUsage_,str]
globalData global:[errout] call:[assertEquals,functionVariableUsage_,str]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
intValue
clear
fill
setEnabledAll call:[clear,fill] noreturn:[clear,fill]
isEnabled call:[return]
enable
disable
setEnabled call:[disable,enable] noreturn:[disable,enable]
